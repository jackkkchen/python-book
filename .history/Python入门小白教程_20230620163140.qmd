# Python基础 {.unnumbered}

## **变量**

简单地说，变量就是编程中最基本的存储单位，变量会暂时性地储存你放进去的东西。

经常发生改变的一个量，变量一般是用来接受一个赋值或用户的一个输入，在程序的其他地方进行调用。

**定义：变量名 = 变量值**      

变量是表示（或指向）特定值的名称。例如，你可能想使用名称x来表示3，为此执行如下代码：

```python
 x = 3
```

这称为赋值（assignment），我们将值3赋给了变量x。换而言之，就是将变量x与值（或对象）3关联起来。给变量赋值后，就可在表达式中使用它。

```python
x * 2

6
```

不同于其他一些语言，使用Python变量前必须给它赋值，因为Python变量没有默认值。

● 调用：直接在需要调用的地方输入变量名即可

**命名规范**

在Python中使用变量时，需要遵守一些规则和指南。违反这些规则将引发错误，而指南旨在让你编写的代码更容易阅读和理解。请务必牢记下述有关变量的规则。

● 变量名只能包含字母、数字和下划线。变量名可以字母或下划线打头，但不能以数字打头，例如，可将变量命名为message_1，但不能将其命名为1_message。另外，py文件不要使用‘-’和以数字开头命名。

● 变量名不能包含空格，但可使用下划线来分隔其中的单词。例如，变量名greeting_message可行，但变量名greeting message会引发错误。

● 不要将Python关键字和函数名用作变量名，即不要使用Python保留用于特殊用途的单词，如print

● 标识符对大小写敏感，就目前而言，应使用小写的Python变量名。在变量名中使用大写字母虽然不会导致错误，但避免使用大写字母是个不错的主意。在命名时如果想避开关键字，可使用大写首字母可以很有效地区分。

● 变量名应既简短又具有描述性。例如，name比n好，student_name比s_n好，name_length比length_of_persons_name好。

● 慎用小写字母l和大写字母O，因为它们可能被人错看成数字1和0。

● 变量的数据类型是根据变量的赋值的类型来决定的

****

要创建良好的变量名，需要经过一定的实践，在程序复杂而有趣时尤其如此。随着你编写的程序越来越多，并开始阅读别人编写的代码，将越来越善于创建有意义的变量名。

## 数据类型

**Python有以下基本数据类型：**

- 整数（int）：如1, 2, 3
- 浮点数（float）：如1.5, 3.14
- 字符串（str）：如"hello", 'world'
- 布尔值（bool）：True, False

在Python中，我们可以使用变量来存储数据。例如：

```python
x = 10
y = 3.14
name = "Alice"
is_student = True
```

### **字符串**

在上面我们已经初步接触到了字符串，很简单地说，字符串就是…
**“任何在这双引号之间的文字”** 或者 **'单引号其实和双引号完全一样' ** 再或者

**'''三个引号被用于过于长段的文**
**字或者是说明，只要三引号不完**
**你就可以随意换行写下文字'''**



## **基础语法**和运算符 

### 常见转义字符：

| 转义字符 | 描述                |
| -------- | ------------------- |
| '\n'     | 换行符              |
| '\t'     | 制表符  空格        |
| '\r'     | 回车                |
| '\\'       | '将\转移字符原样输出' |
| '\"'      | 对双引号转义        |
| '\''       | 对单引号转义        |

### 常见运算符

##### 算术运算符（常用语数学运算）

| 运算符 | 描述             | 举例                |
| ------ | ---------------- | ------------------- |
| x+y    | 加               | 1+2=3               |
| x-y    | 减               | 6-5=1               |
| x*y    | 乘               | 2*3=6               |
| x/y    | 除               | 2/4=0.5             |
| x//y   | 整除，取整数部分 | 2//4=0              |
| x%y    | 取余             | 15%4=3              |
| **     | 幂运算           | 2**3=8   二的三次方 |

##### 比较运算符（常用语控制结构判断）

| 运算符 | 描述                               |
| ------ | ---------------------------------- |
| <      | 小于                               |
| <=     | 小于等于                           |
| >      | 大于                               |
| >=     | 大于等于                           |
| ==     | 等于                               |
| !=     | 不等于                             |
| is     | 判断两个标识符是不是引用自一个对象 |
| is not | 判断两个标识符是不是引用自不同对象 |

##### 逻辑运算符（常用于逻辑判断）

● and or not (与 或 非)

| 运算符  | 描述                                | 备注                                       |
| ------- | ----------------------------------- | ------------------------------------------ |
| x and y | if x is false, then x,else y        | xy都为True,结果为True；否则为False         |
| x or y  | if x is false, then y，else x       | xy都为False,结果为False；否则为True        |
| not x   | if x is false,then True，else False | x为True时，值为False；x为False时，值为True |

```python
x = 0 
y = 2

print(x and y)  #只要x的布尔值为true，那就取y的值，如果x为false，就取x的值

print(x or y)   #只要x的布尔值为false，那就取y的值，如果x为true，就取x的值

print(not x)   #非就是取反
```

##### 位运算符

| 运算符 | 描述 | 备注                                               |
| ------ | ---- | -------------------------------------------------- |
| &      | 与   | 两个二进制的位数都是1，则结果为1，否则为0          |
| \|     | 或   | 两个二进制的位数只要有一个为去，结果就为1，否则为0 |
| ^      | 异或 | 两个二进制的位数都相同就为1，否则为0               |
| ~      | 取反 | 就是对单个二进制数进行取反                         |
| <<     | 左移 | 高位丢弃，低位补0                                  |
| >>     | 右移 | 低位丢弃，高位补0                                  |

##### 赋值运算符（常用于变量赋值）

| 运算符 | 描述                                               |
| ------ | -------------------------------------------------- |
| =      | 赋值                                               |
| +=     | 加等,自增    number += 1   <==>  number = number+1 |
| *=     | 乘等                                               |
| %=     | 余等                                               |
| -=     | 减等，自检                                         |
| /=     | 除等                                               |
| //=    | 取整等                                             |
| **=    | 幂等                                               |

##### 成员运算符（常用语条件判断）

| 运算符 | 描述                                                |
| ------ | --------------------------------------------------- |
| in     | 如果在指定的序列中找到值返回True，否则返回False。   |
| not in | 如果在指定的序列中没找到值返回True，否则返回False。 |

举例：

```python
print("o" in "hello")                

>>>True

print("o" not in "hello")         

>>>False
```

# 函数

## 常用函数

### 输出（print）

输出：print()函数将括号内的字符串显示在屏幕上。

方法：print(value,sep=" ",end="\n",file=None)

value：输出的内容

sep：输出字符的间隔，默认空字符串

end：输出下一行格式，默认换行

file：指定写入文件流，将print输出写入到文件中，默认None

```python
print('Hello world!')

print('What is your name?') # ask for their name
```

备注：在写函数名时，末尾的左右括号表明它是一个函数的名字。引号没有打印在屏幕上。它们只是表示字符串的起止，不是字符串的一部分。

### 输入（input）

程序接受用户的输入参数，将该输入参数保存下来做进一步的处理，默认的输入参数类型为字符串类型。

函数等待用户在键盘上输入一些文本，并按下回车键。

语法：input（value）

value：输入的提示信息，可以为空

示例：

```python
print(input())

print(input("请输入用户名:"))

username = input(":")

print(username)
```

### len()函数

你可以向 len()函数传递一个字符串（或包含字符串的变量），然后该函数求值为一个整型值，即字符串中字符的个数。

### str()、int()和 float()函数

str()、int()和 float()函数将分别求值为传入值的字符串、整数和浮点数形式。

请尝试用这些函数在交互式环境中转换一些值，看看会发生什么。

```python
>>> str(0)

'0'

>>> str(-3.14)

'-3.14'

>>> int('42')

42

>>> int('-99')

-99

>>> int(1.25)

1 

>>> int(1.99)

1 

>>> float('3.14')

3.14

>>> float(10)

10.0
```



## 其他常见函数：

| 函数                                   | 描述                                                         |
| -------------------------------------- | ------------------------------------------------------------ |
| count(str, beg= 0,end=len(string))     | 返回 str 在 string 里面出现的次数，如果 beg或者 end 指定则返回指定范围内 str 出现的次数 |
| capitalize()                           | 将字符串的第一个字符转换为大写(同title()方法)                |
| center(width, fillchar)                | 返回一个指定的宽度 width 居中的字符串，fillchar 为填充的字符，默认为空格。 |
| find(str, beg=0 end=len(string))       | 检测 str 是否包含在字符串中 中，如果 beg 和end 指定范围，则检查是否包含在指定范围内，如果是返回开始的索引值，否则返回-1 |
| replace(old, new [, max])              | 把 将字符串中的 str1 替换成 str2,如果 max 指定，则替换不超过 max 次。 |
| split(str="", num=string.count(str))   | 以 str 为分隔符截取字符串，如果 num 有指定值，则仅截取 num 个子字符串 |
| index(str, beg=0, end=len(string))     | 跟find()方法一样，只不过如果str不在字符串中会报一个异常      |
| isalnum()                              | 如果字符串至少有一个字符并且所有字符都是字母或数字则返回 True,否则返回 False |
| isalpha()                              | 如果字符串至少有一个字符并且所有字符都是字母则返回True, 否则返回False |
| isdigit()                              | 如果字符串只包含数字则返回 True 否则返回 False               |
| islower()                              | 如果字符串中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是小写，则返回 True，否则返回 False |
| isupper()                              | 如果字符串中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是大写，则返回 True，否则返回 False |
| isspace()                              | 如果字符串中只包含空格，则返回 True，否则返回 False.         |
| istitle()                              | 如果字符串是标题化的(见 title())则返回 True，否则返回 False  |
| lower()                                | 转换字符串中所有大写字符为小写。                             |
| upper()                                | 转换字符串中所有小写字符为大写。                             |
| max(str)                               | 返回字符串 str 中最大的字母。                                |
| min(str)                               | 返回字符串 str 中最小的字母。                                |
| startswith(str, beg=0,end=len(string)) | 检查字符串是否是以 obj 开头，是则返回 True，否则返回 False。如果beg 和 end 指定值，则在指定范围内检查。 |
| strip()                                | 取出字符串的前后空格                                         |

## 内建函数

<!-- ![](./img/image-20230527220141541.png) -->

## 定义函数

在程序中需要反复执行的某些代码，可以将他们用函数封装起来。

函数是一种将一组语句组织在一起的机制，可以多次调用。函数可以接收参数，并返回结果。

```python
def greet_user(): 

"""显示简单的问候语""" 

    print("Hello!") 

greet_user() 
```

用 def 语句创建函数时，可以用 return 语句指定应该返回什么值。例如：

```python
def greet(name):
    return "你好, " + name + "!"

name = input("请输入你的名字：")
print(greet(name))

```

![](./img/image-20230527192028272.png)

### 向函数传递信息

只需稍作修改，就可以让函数greet_user()不仅向用户显示Hello!，还将用户的名字用作抬头。为此，可在函数定义def greet_user()的括号内添加username。通过在这里添加username，就可让函数接受你给username指定的任何值。现在，这个函数要求你调用它时给username指定一个值。调用greet_user()时，可将一个名字传递给它，如下所示：

```python
def greet_user(username): 

 """显示简单的问候语"""

    print("Hello, " + username.title() + "!") 


greet_user('jesse') 
```

代码greet_user('jesse')调用函数greet_user()，并向它提供执行print语句所需的信息。这个函数接受你传递给它的名字，并向这个人发出问候：

```python
Hello, Jesse! 
```

同样，greet_user('sarah')调用函数greet_user()并向它传递'sarah'，打印Hello, Sarah!。你可以根据需要调用函数greet_user()任意次，调用时无论传入什么样的名字，都会生成相应的输出。

### 形式参数和实际参数

由于定义函教时的参教不是实际教据，会在调用函教时传递给它们实际教据，所以我们称定义函教时的参教为**形式参**
**数**，简称**形参**；称调用函教时传递的实际教据为**实际参散**，简称**实参**。你可以将形参理解为在函数中定义的变量。

前面定义函数greet_user()时，要求给变量username指定一个值。调用这个函数并提供这种信息（人名）时，它将打印相应的问候语。

在函数greet_user()的定义中，变量username是一个形参——函数完成其工作所需的一项信息。在代码greet_user('jesse')中值'jesse'是一个实参。实参是调用函数时传递给函数的信息。我们调用函数时，将要让函数使用的信息放在括号内。在greet_user('jesse')中，将实参'jesse'传递给了函数greet_user()，这个值被存储在形参username中。

### 返回值

函数并非总是直接显示输出，相反，它可以处理一些数据，并返回一个或一组值。函数返回的值被称为返回值。在函数中，可使用return语句将值返回到调用函数的代码行。返回值让你能够将程序的大部分繁重工作移到函数中去完成，从而简化主程序。

### 函数中变量的作用域

变量可以在模块中创建，作用域（变量的有效范围）是整个模块，被称为全局变量。变量也可以在函数中创建，在默认情况下作用域是整

个函数，被称为局部变量。

![](./img/image-20230527222243663.png)

## 调用函数

在定义好函数后，就可以调用函数了。在调用函数时传递的实参与定义函数时的形参顺序一致，这是调用函数的基本形式。

# 控制流

## 布尔值

“布尔”数据类型只有两种值：True 和 False。

Boolean（布尔）的首字母大写，因为这个数据类型是根据数学家 George Boole 命名的。在作为 Python 代码输入时，布尔值 True 和 False不像字符串，两边没有引号，它们总是以大写字母 T 或 F 开头，后面的字母小写。

## 条件

布尔表达式可以看成是条件，它和表达式是一回事。“条件”只是在控制流语句的上下文中更具体的名称。条件总是求值为一个布尔值，True 或 False。控制流语句根据条件是 True 还是 False，来决定做什么。几乎所有的控制流语句都使用条件。

## 代码块

一些代码行可以作为一组，放在“代码块”中。可以根据代码行的缩进，知道代码块的开始和结束。代码块有 3 条规则。

1．缩进增加时，代码块开始。

2．代码块可以包含其他代码块。

3．缩进减少为零，或减少为外面包围代码块的缩进，代码块就结束了。看一些有缩进的代码，更容易理解代码块。

## 程序执行

Python 开始执行程序顶部的指令，然后一条接一条往下执行。“程序执行”（或简称“执行”）这一术语是指当前被执行的指令。

如果将源代码打印在纸上，在它执行时用手指指着每一行代码，你可以认为手指就是程序执行。

但是，并非所有的程序都是从上至下简单地执行。如果用手指追踪一个带有控制流语句的程序，可能会发现手指会根据条件跳过源代码，有可能跳过整个子句。

## 控制流语句

### 条件语句(if)

用一句话概括 if……else 结构的作用：**如果..条件是成立的，就做..；反之，就做…**所谓条件(condition)指的是成立的条件，即是**返回值为True的布尔表达式**。

**if**

if语句是：“如果条件为真，执行子句中的代码。”

**else** 

else语句是：“如果条件为真，执行这段代码。否则，执行那段代码。”

**elif**

虽然只有 if 或 else 子句会被执行，但有时候可能你希望，“许多”可能的子句中有一个被执行。elif 语句是“否则如果”，总是跟在 if 或另一条 elif 语句后面。它提供了另一个条件，仅在前面的条件为 False 时才检查该条件。

elif语句是：“如果第一个条件为真，做这个。否则，如果第二个条件为真，做那个。否则，做另外的事。“

例如：

```python
age = int(input("请输入你的年龄："))

if age < 18:
    print("你还未成年。")
elif age < 60:
    print("你已经成年了。")
else:
    print("你已经退休了。")
```

我们结合函数的概念来创建这样一个函数,逐行分析它的原理:

```python

def  account_ login():
          password  =  input( 'Password:' )
          if  password  ==   '12345' :
                  print( 'Login  success!' )
          else :
                  print( 'Wrong  password  or  invalid  input!' )
                  account_ login()
account_login()
```
第1行:定义函数,并不需要参数;

第2行:使用input获得用户输入的字符串并储存在变量password中;

第3、4行:设置条件,如果用户输入的字符串和预设的密码12345相等时,就执 行打印文本'Login success!';

第5、6行:反之,一切不等于预设密码的输入结果,全部会执行打印错误提示, 并且再次调用函数,让用户再次输入密码;

第7行:运行函数。

第8行:调用函数

### 循环语句(Loop)

循环语句用于重复执行某个代码块。

**while循环**

利用 while 语句，可以让一个代码块一遍又一遍的执行。只要 while 语句的条件为 True，while 子句中的代码就会执行。

while 语句看起来和 if 语句类似。不同之处是它们的行为。if 子句结束时，程序继续执行 if 语句之后的语句。但在 while 子句结束时，程序执行跳回到 while 语句开始处。

让我们来看一个 if 语句和一个 while 循环。它们使用同样的条件，并基于该条件做出同样的动作。下面是 if 语句的代码：

```python
a = 0

if a < 5:

   print('Hello, world.')

   a = a + 1
```

下面是 while 语句的代码：

```python
a = 0

while a < 5:

      print('Hello, world.')

      a = a + 1
```

这些语句类似，if 和 while 都检查 a 的值，如果它小于５，就打印一条消息。但如果运行这两段代码，它们各自的表现非常不同。对于 if 语句，输出就是"Hello, world."。但对于 while 语句，输出是"Hello, world."重复了 5 次！

带有 if 语句的代码检查条件，如果条件为 True，就打印一次"Hello, world."。带有 while 循环的代码则不同，会打印 5 次。打印 5 次后停下来是因为，在每次循环迭代末尾，spam 中的整数都增加 1。这意味着循环将执行 5 次，然后 spam < 5 变为False。

在 while 循环中，条件总是在每次“迭代”开始时检查（也就是每次循环执行时）。如果条件为 True，子句就会执行，然后，再次检查条件。当条件第一次为 False时，while 子句就跳过。

**for 循环和 range()函数**

在条件为 True 时，while 循环就会继续循环（这是它的名称的由来）。但如果你想让一个代码块执行固定次数，该怎么办？可以通过 for 循环语句和 range()函数来实现。

for循环和while的相同点在于都能循环做一件重复的事情,不同点在于for循环会在可迭代 的序列被穷尽的时候停止,while则是在条件不成立的时候停止,因此while的作用概 括成一句话就是: **只要…条件成立,就一直做…。**

例如：

```python
for i in range(5):
    print(i)

count = 0
while count < 5:
    print(count)
    count += 1
```

**提示**：只要能够使用for循环，就不要使用while循环。

无限循环：(在这里先行提醒一下,一定要记得及时停止运行代码!)

```python
while   1  <   3 :
print( '1 is smaller than 3')
```

在while后面的表达式是永远成立的,所以print会一直进行下去直至你的CPU过热。这种条件永远为True的循环,我们称之为死循环(Infinite Loop)。

### 跳转语句

**break 语句**

但如果while循环不能像for循环那样,在集合被穷尽之后停下来,我们又怎么 样才能控制while循环呢？

方法：

让执行提前跳出 while 循环子句。如果执行遇到 break 语句，就会马上退出 while 循环子句。在代码中，break 语句仅包含 break 关键字。例如:

```python
count  =  0
while True :
     print( 'Repeat this line !' )
     count = count  +  1
     if count == 5 :
         break
```

**continue 语句**

像 break 语句一样，continue 语句用于循环内部。如果程序执行遇到 continue语句，就会马上跳回到循环开始处，重新对循环条件求值（这也是执行到达循环末尾时发生的事情）。



# 数据结构

## 列表（list）

列表（list）由一系列按特定顺序排列的元素组成，是有序的元素集合，可以添加、删除和修改元素。

你可以创建包含字母表中所有字母、数字0~9或所有家庭成员姓名的列表；也可以将任何东西加入列表中，其中的元素之间可以没有任何关系。

鉴于列表通常包含多个元素，给列表指定一个表示复数的名称（如letters、digits或names）是个不错的主意。

在Python中，用方括号（[]）来表示列表，并用逗号来分隔其中的元素。

**访问列表元素**

列表是有序集合，因此要访问列表的任何元素，只需将该元素的位置或索引告诉Python即可。

要访问列表元素，可指出列表的名称，再指出元素的索引，并将其放在方括号内。

**索引从 0 而不是 1 开始**

在Python中，第一个列表元素的索引为0，而不是1。在大多数编程语言中都是如此，这与列表操作的底层实现相关。

**使用列表中的各个值**

可像使用其他变量一样使用列表中的各个值。例如，你可以使用拼接根据列表中的值来创建消息。

### 修改、添加和删除元素

你创建的大多数列表都将是动态的，这意味着列表创建后，将随着程序的运行增删元素。

**修改列表元素**

修改列表元素的语法与访问列表元素的语法类似。要修改列表元素，可指定列表名和要修改的元素的索引，再指定该元素的新值。

**在列表中添加元素**

在列表中添加新元素时，最简单的方式是将元素附加到列表末尾。给列表附加元素时，它将添加到列表末尾。

**在列表中插入元素**

使用方法insert()可在列表的任何位置添加新元素。为此，你需要指定新元素的索引和值。

**从列表中删除元素**

你经常需要从列表中删除一个或多个元素，可以根据位置或值来删除列表中的元素。

使用del语句删除元素

如果知道要删除的元素在列表中的位置，可使用del语句。

**使用方法pop()删除元素**

方法pop()可删除列表末尾的元素，并让你能够接着使用它。术语弹出（pop）源自这样的类

比：列表就像一个栈，而删除列表末尾的元素相当于弹出栈顶元素。

**弹出列表中任何位置处的元素**

实际上，你可以使用pop()来删除列表中任何位置的元素，只需在括号中指定要删除的元素的索引即可。别忘了，每当你使用pop()时，被弹出的元素就不再在列表中了。

如果你不确定该使用del语句还是pop()方法，下面是一个简单的判断标准：如果你要从列表中删除一个元素，且不再以任何方式使用它，就使用del语句；如果你要在删除元素后还能继续使用它，就使用方法pop()。

**根据值删除元素**

有时候，你不知道要从列表中删除的值所处的位置。如果你只知道要删除的元素的值，可使用方法remove()。

### 组织列表

在你创建的列表中，元素的排列顺序常常是无法预测的，因为你并非总能控制用户提供数据的顺序。这虽然在大多数情况下都是不可避免的，但你经常需要以特定的顺序呈现信息。有时候，你希望保留列表元素最初的排列顺序，而有时候又需要调整排列顺序。Python提供了很多组织列表的方式，可根据具体情况选用。

**使用方法 sort()对列表进行永久性排序**

Python方法sort()让你能够较为轻松地对列表进行排序。假设你有一个汽车列表，并要让其中的汽车按字母顺序排列。为简化这项任务，我们假设该列表中的所有值都是小写的。

方法sort()永久性地修改了列表元素的排列顺序。

你还可以按与字母顺序相反的顺序排列列表元素，为此，只需向sort()方法传递参数reverse=True。

**使用函数 sorted()对列表进行临时排序**

要保留列表元素原来的排列顺序，同时以特定的顺序呈现它们，可使用函数sorted()。函数sorted()让你能够按特定顺序显示列表元素，同时不影响它们在列表中的原始排列顺序。

我们首先按原始顺序打印列表，再按字母顺序显示该列表。以特定顺序显示列表后，我们进行核实，确认列表元素的排列顺序与以前相同。

注意，调用函数sorted()后，列表元素的排列顺序并没有变。如果你要按与字母顺序相反的顺序显示列表，也可向函数sorted()传递参数reverse=True。

**倒着打印列表**

要反转列表元素的排列顺序，可使用方法reverse()。

注意，reverse()不是指按与字母顺序相反的顺序排列列表元素，而只是反转列表元素的排列顺序：

方法reverse()永久性地修改列表元素的排列顺序，但可随时恢复到原来的排列顺序，为此只需对列表再次调用reverse()即可。

**确定列表的长度**

使用函数len()可快速获悉列表的长度。

注意:Python计算列表元素数时从1开始，因此确定列表长度时，你应该不会遇到差一错误。



## 元组（tuple）

元组是有序的元素集合，但是不可修改。

列表非常适合用于存储在程序运行期间可能变化的数据集。列表是可以修改的，这对处理网站的用户列表或游戏中的角色列表至关重要。然而，有时候你需要创建一系列不可修改的元素，元组可以满足这种需求。Python将不能修改的值称为不可变的，而不可变的列表被称为元组。

**定义元组**

元组看起来犹如列表，但使用圆括号而不是方括号来标识。定义元组后，就可以使用索引来访问其元素，就像访问列表元素一样。

当我们尝试用代码试图修改元组的元素时，Python会报告错误。

**修改元组变量**

虽然不能修改元组的元素，但可以给存储元组的变量赋值。

相比于列表，元组是更简单的数据结构。如果需要存储的一组值在程序的整个生命周期内都不变，可使用元组。



## 集合（set）

集合(set)是一种可迭代的、无序的、不能包含重复元素的容器类型的数据。

**创建集合**

我们可以通过以下两种方式创建集合。

1. set(iterable)函数：参数iterable是可迭代对象（字符串、列表、
   元组、集合和字典等)。

2. {元素1，元素2，元素3，…}：指定具体的集合元素，元素之间以
   逗号分隔。对于集合元素，需要使用大括号括起来。

**修改集合**

修改集合类似于修改列表，可以向其中插入和删除元素。修改可变集合有如右所示的常用方法。

add（elem）：添加元素，如果元素已经存在，则不能添加，不会抛出错误。

remove（elem）：删除元素，如果元素不存在，则抛出错误。

clear（）：清除集合。

## 字典（dict）

字典（dict）：键值对集合，通过键来查找对应的值。

字典是可迭代的、通过键（key）来访问元素的可变的容器类型的数据。

字典由两部分视图构成：键视图和值视图。键视图不能包含重复的元素，值视图能。在键视图中，键和值是成对出现的。

**创建字典**

我们可以通过以下两种方法创建字典。

1. dict（）函数。2 {key1：value1，key2：value2，...，key_n：value_n}：指定具体的字典键值对，键值对之间以逗号分隔，最后用大括号括起来。

**修改字典**

字典可以被修改，但都是针对键和值同时操作的，对字典的修改包括添加、替换和删除。

**访问字典视图**

我们可以通过字典中的三种方法访问字典视图。

items（）：返回字典的所有键值对视图。

keys（）：返回字典键视图。

values（）：返回字典值视图。

## 举例说明

```python
# 列表
fruits = ["apple", "banana", "cherry"]
fruits.append("orange")
print(fruits)

# 元组
coordinates = (1, 2, 3)
print(coordinates)

# 集合
unique_numbers = {1, 2, 3, 2, 1}
print(unique_numbers)

# 字典
person = {"name": "Alice", "age": 30}
print(person["name"])
```
