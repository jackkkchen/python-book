# SQL学习

## SQL通用语法

SQL语句可以单行或多行书写 以**分号结尾**

SQL语句可以使用空格/缩进来增强语句的可读性

MySQL数据库的SQL语句**不区分大小写，关键字建议使用大写**

● 注释

1. 单行注释 ：-- 注释内容 或#注释内容（MySQL独有）
2. 多行注释 ：/* */

## SQL分类

● SQL语句，根据其功能，主要分为四类：DDL、DML、DQL、DCL。

###  DDL **数据定义语句** 

#### 库操作

● 查询

1)查询所有数据库

```sql
(SHOW)SHOW DATABASES;
```

2)查询当前数据库

```sql
(SELECT)SELECT DATABASE();
```

● 创建(CREATE)

```sql
CREATE DATABASE[IF NOT EXISTS]数据库名[DEFAULT CHARSET 字符集][COLLATE 排序规则];
```

● 删除(DROP)

```sql
DROP DATABASES[IF EXISTS] 数据库名;
```

● 使用(USE)/*切换访问的数据库*/

```sql
USE数据库名；
```

DDL 数据定义语句

#### 表操作

● 查询

1）查询当前数据所有表

```sql
SHOW TABLES;
```

2）查询表结构

```sql
DESC 表名;
```

3）查询指定表的建表语句

```sql
SHOW CREATE TABLE 表名;
```

● 创建(CREATE)

```sql
CREATE TABLE 表名{

字段1 字段1类型[COMMENT 字段1注释],

字段2 字段2类型[COMMENT 字段2注释],

字段3 字段3类型[COMMENT 字段3注释]

}[COMMENT 表注释];
```

● 修改(ALTER)

1. 添加字段(ADD)

```sql
ALTER TABLE 表名 ADD 字段名 类型(长度)[comment 注释][约束];
```

2. 修改数据类型(MODIFY)

```sql
ALTER TABLE 表名 MODIFY 字段名 新数据类型(长度);
```

3. 修改字段名和字段类型(CHANGE)

```sql
ALTER TABLE 表名 CHANGE 旧字段名 新字段名 类型(长度)[COMMENT 注释] [约束];
```

4. 删除字段（DROP）

```sql
ALTER TABLE 表名 DROP 字段名;#删除列
```

5. 修改表名

```sql
ALTER TABLE 表名 RENAME TO 新表名;
```

●  删除

1. 删除表

```sql
DROP TABLE [IF EXISTS]表名;
```

2. 删除指定表，并重新创建该表(该表的**数据会被删除**，以该名表被重新创建)

```sql
TRUNCATE TABLE 表名;
```

#### DML 数据操作语句 

##### ● 添加数据（INSERT）

1. 给**指定字段**名添加数据

```sql
INSERT INTO 表名  (字段名1，字段名2， . . .)VALUES(值1，值2， . . .);
```

2. 给**全部字段名**添加数据

```sql
INSERT INTO 表名 VALUES(值1，值2， . . .);
```

3. 批量添加数据

/*批量插入数据 用逗号隔开*/

```sql
INSERT INTO 表名(字段名1，字段名2， . . .)VALUES(值1，值2， . . .),(值1，值2， . . .),(值 1，值2， . . .);

INSERT INTO 表名 VALUES (值1，值2， . . .)， (值1，值2， . . . .)， (值1，值2， . . . .);
```

**注意：**

1）插入数据时，指定的字段顺序需要与值的**顺序是一致**的

2）字符串和日期类型应该包含的在引号中

3）插入的数据大小，应该在字段的规定范围内

##### ● 修改数据（UPDATE）

```sql
UPDATE 表名 SET 字段名1=值1，字段名2=值2， . . .[WHERE 条件];
```

##### ● 删除（DELETE）

```sql
DELETE FROM 表名[WHERE 条件];
```

#### DQL 数据查询语句

##### 基本查询

1. 查询多个字段

```sql
SELECT 字段1,字段2，字段3 . . .FROM 表名;

SELECT *FROM 表名(全部字段)#返回查询列表中所有数据
```

2. 设置别名（AS）

```sql
SELECT 字段1[AS 别名1],字段2[AS 别名2]. . .FROM表名;#别名要用单引号 AS可以省略
```

3. 去除重复纪录(DISTINCT)

```sql
SELECT DISTINCT 字段列表 FROM 表名;#将该列的重复的元素去除（去重）
```

##### 2.条件查询

1. 语法(WHERE)

```sql
SELECT 字段列表 FROM WHERE 条件列表; # where相当于java中if语句 后接条件语句 字段列表 =*(所有列)
```

2. 条件

​      ●  比较运算符

| **比较运算符** | **功能**                                                |
| -------------- | ------------------------------------------------------- |
| \>             | 大于                                                    |
| \>=            | 大于等于                                                |
| <              | 小于                                                    |
| <=             | 小于等于                                                |
| =              | 等于                                                    |
| <>或！ =       | 不等于                                                  |
| BETWEEN...AND  | 在某个范围之内（含最小、最大值）                        |
| IN(...)        | 在in之后的列表中的值，多选一                            |
| LIKE 占位符    | 模糊匹配 ( _ 匹配**单个字符**,   % 匹配**任意个字符 **) |
| IS NULL        | 是NULL                                                  |

​        ● 逻辑运算符

| **逻辑运算符** | **功能**                   |
| -------------- | -------------------------- |
| AND或&&        | 并且(多个条件同时成立)     |
| OR或\|\|       | 或者(多个条件任意一个成立) |
| NOT或！        | 非，不是                   |

​       ●  聚合函数

1. 介绍

将一列数据作为一个整体

2. 常见聚合函数

| **函数** | **功能** |
| :------- | -------- |
| count    | 统计数量 |
| max      | 最大值   |
| min      | 最小值   |
| avg      | 平均值   |
| sum      | 求和     |



```sql
SELECT 聚合函数 from 表名;

SELECT COUNT(*)FROM EMP;

SELECT COUNT(ID)FROM EMP;

#聚合函数传进去的是字段
```

注意:null值不参与聚合函数的运算

##### 3.分组查询(GROUP BY)

1. 语法

```sql
SELECT 字段列表 FROM 表名[WHERE 条件]GROUP BY 分组字段名[HAVING 分组后过滤条件];

SELECT gender,count(*)from emp GROUP BY gender;

#查询效果是 根据性别分组 统计男女的数量

SELECT gender,AVG(age)FROM emp GROUP BY gender;

#查询效果是 根据性别分组 统计男女的平均年龄

SELECT address,COUNT(*)FROM emp WHERE age<xxx GROUP BY address;

#查询效果是 根据地址分组 统计年龄小于xxx的人数

SELECT address,COUNT(*) address_count FROM emp WHERE age<xxx GROUP BY address HAVING address_count>X;

#上面一条语句的基础上再次筛选having
```



2. HAING 和WHERE区别

执行时机不同:

where是**分组之前**进行过滤，不满足where条件不进行分组；而having是 **分组之后**对结果进行过滤

判断条件不同: 

**where不能对聚合函数进行判断** 而having可以。

3. 注意

执行顺序:where->聚合函数->having

分组之后，查询的字段一般为聚合函数和分组字段，查询其他字段无任何意义(意思是分组字段和查询字段是相同的)

##### 4.排序查询(ORDER BY)

1. 语法

```sql
#支持多字段排序
SELECT 字段列表 FROM 表名 ORDER BY 字段1 排序方1,字段2 排序方式2 SELECT * FROM emp ORDER BY age desc;#降序

SELECT * FROM emp ORDER BY age asc;#升序

SELECT * FROM emp ORDER BY age asc,entrydate desc;
```

2. 排序方式

ASC：升序（默认值）

DESC：降序

注意:如果是多字段查询时，当第一个字段值相同时，才会根据第二个字段进行排序

##### 5.分页查询(LIMIT)

1. 语法

```sql
SELECT 字段列表 FROM LIMIT 起始索引 ,查询记录数;#两个参数
```

注意

1）起始索引是**从0开始，**起始索引 =（查询页码-1）*每页显示记录数

2）**分页查询是数据库的方言**，不同的数据库有不同的实现， Mysql是LIMIT 

3）如果查询的是第一页数据，起始索引可以省略，直接简写为limit 10



## 函数

### 字符串函数

​       ● 常用函数

| **函数**                 | **功能**                                                     |
| ------------------------ | ------------------------------------------------------------ |
| CONCAT(S1,S2,...Sn)      | 字符串拼接,将s1,s2,..sn拼接成一个字符串                      |
| LOWER(str)               | 将字符串str全部转成小写                                      |
| UPPER(str)               | 将字符串str全部转成大写                                      |
| LPAD(str,n,pad)          | 左填充，用字符串pad对str的左边进行填充，达到n个字符串长度    |
| RPAD(str,n,pad)          | 右填充，用字符串pad对str的右边进行填充，达到n个字符串长度    |
| TRIM(str)                | 去掉字符串**头部和尾部的空格**                               |
| SUBSTRING(str,start,len) | 返回从字符串str从start位置起len个长度的字符串SELECT 函数(参数); |

### 2. 数值函数

​       ● 常用函数

| **函数**   | 功能                               |
| ---------- | ---------------------------------- |
| CEIL(x)    | 向上取整                           |
| FLOOR(x)   | 向下取整                           |
| MOD(x,y)   | 返回x/y的模                        |
| RAND()     | 返回0~1的随机数                    |
| ROUND(x,y) | 求参数x的四舍五入的值，保留y位小数 |

### **3.** **日期函数**

​       ●  常用函数

| **函数**                          | **功能**                                            |
| --------------------------------- | --------------------------------------------------- |
| CURDATE()                         | 返回当前日期                                        |
| CURTIME()                         | 返回当前时间                                        |
| NOW()                             | 返回当前日期和时间                                  |
| YEAR(date)                        | 返回当前指定date的年份                              |
| MONTH(date)                       | 返回当前指定date的月份                              |
| DAY(date)                         | 返回当前指定date的日期                              |
| DATE_ADD(date,INTERVAL_EXPR type) | 返回一个日期/时间加上一个**时间间隔**expr后的时间值 |
| DATEDIFF(date1 ，date2)           | 返回起始时间date1和结束时间date2之间的天数          |

 举例：

```sql
SELECT date_add(now(),INTERVAL 70 YEAR);

#查询员工的入职天数

SELECT name,diff(now(),entrydate) as entrydayscount FROM emp Group By entrydayscount SELECT name,DATEDIFF(NOW(),'2000-11-12 ')FROM emp
```



### 4. 流程函数

​       ● 常见函数

| **函数**                                          | 功能                                                         |
| ------------------------------------------------- | ------------------------------------------------------------ |
| IF(Value ，t ，f)                                 | 如果value为true，则返回t，否则返回f                          |
| IFNULL(Value1,Value2)                             | 如果Value1不为空(空=null)，则返回value1，否则返回value2      |
| CASE WHEN[val1]THEN[res1]...ELSE[default]END      | 如果val1为true，返回res1，否则返回default默认值              |
| CASE [expr]WHEN[val]THEN[res1]...ELSE[default]END | 如果**expr(表达式)**的值等于val1，返回res1 ，...否则返回default默认值 |

举例：

```sql
SELECT name,(case workaddress when '北京 'then'一线城市 'when '上海 'then'一线城 市 'else'二线城市 'end) as '工作地址 '

SELECT id,name,(case when math>=85 then '优秀 ' when math>=60 then '及格 'else '不 及格 'end)as '数学 '),

(case when English>=85 then '优秀 ' when English>=60 then '及格 'else '不及格 'end)as '英语 '),

(case when Chinese>=85 then '优秀 ' when Chinese>=60 then '及格 'else '不及格 'end)as '语文 ')

FROM score;
```



## 约束

### 概述和分类

1. 概念

约束是**作用表中字段**上的规则，用于限制存储在表中的数据

2. 作用

保证数据库中数据的**正确性、有效性和完整性**

3. 分类                          

   | 约束     | **描述**                                                 | **关键字**  |
   | -------- | -------------------------------------------------------- | ----------- |
   | 非空约束 | 限制该字段的数据不能为null                               | NOT NULL    |
   | 唯一约束 | 保证该字段的所有数据都是**唯一** ，**不重复**的          | UNIQUE      |
   | 主键约束 | 主键是一行数据的唯一标识，要求**非空且唯一**             | PRIMARY KEY |
   | 默认约束 | 保存数据时，如果未指定该字段的值，则采用默认值           | DEFAULT     |
   | 检查约束 | 保证字段值满足某一个条件(逻辑表达式+比较运算符)          | CHECK       |
   | 外键约束 | 用来让两张表的数据中之间建立连接，保证数据的一致性和完整 | FOREIGN KEY |
   
   ****

注意:约束是作用在表中字段上的，可以在**创建表**/**修改表**的时候添加约束

### **2.** **案例展示**

```sql
create table user(

id int primary key auto_increment comment '主键 ',

name varchar(10) not null comment '名字 ',

age int check ( age>0&&age<120 ) comment '年龄 ',  # mysql 版本要在8 .0才支持该语句 

status char(1) default '1 'comment '状态 ',

gander char(1) comment'性别 '

)comment '用户表 ';
```

### **3.** **外键约束**

**3.** **1** **语法**

添加外键:保证数据的完整性和一致性

```sql
#建表前添加外键

CREATE TABLE 表名{

     字段名 数据类型 ,

     ...

     [CONSTRAINT][外键名称]FOREIGN KEY(外键字段名)REFERENCES 主表（主表列名） };

#建表后进行添加外键
ALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY (外键字段名)REFERENCES 主表(主表列 名);#表名连接主表

ALTER TABLE 表名 ADD CONSTRAINT FK_表名_外键字段名 FOREIGN KEY (外键字段名)REFERENCES 主(父)表(主表列名);
```

删除外键

```sql
ALTER TABLE 表名 DROP FOREIGN KEY 外键名称;
```

删除/更新行为(DELETE/UPDATE)

| **行为**     | **说明**                                                     |
| ------------ | ------------------------------------------------------------ |
| NO ACTION    | 当父表中删除/更新对应纪录时，首先检查该记录是否有对应外键，如果有则不允许删除/更 新。 |
| RESTRICT     | 同上                                                         |
| CASCADE      | 当父表中删除/更新对应纪录时，首先检查该记录是否有对应外键，如果有则也删除/更新外键 在字表中的记录 |
| SET NULL     | 当父表中删除/更新对应纪录时，首先检查该记录是否有对应外键，如果有则设置字表中该外 键值为null |
| SET  DEFAULT | 父表有变更时，字表将外键列设置成一个默认值(Innodb不支持)     |

语法：

```sql
ALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY (外键字段)References 主表名(字表字 段名) ON UPDATE CASCADE ON DELETE CASCADE;
```



## 多表查询

### 多表关系

概述:

由于业务之间相互关联，所以各个表结构之间也存在着各种联系，基本分为三种



####        ● 一对多(多对一)

案例:部门与员工的关系

关系:一个部门对应多个员工， 一个员工只能对应一个部门

实现:**在多的一方建立外键，指向一的一方的主键**(员工表为多表，部门表就为一表)

####        **● 多对多**

案例:学生和课程的关系

关系:一个雪上可以选修多门课程， 一门课程也可以供多个学生选择

实现:**建立第三张中间表**，中间表至少包含两个外键，分别**关联两方主键**(primary key)

####        **● 一对一**

案例:用户与用户详情的关系

关系:一对一关系，多用于单表拆分，将一张表的**基础字段**放在一张表中， **其他详情字段放在另一张** **表中**，以提升操作效率

实现:在任意的一方加入外键，关联另外一方的主键，并且设置外键为唯一的(UNIQUE)

### 2.多表查询

​        ● 概述: 指从多张表中查询数据

笛卡尔积:笛卡尔乘积是指在数学中个，两个集合A集合和B集合的所有组合情况。(**多表查询时，需要消除无效的笛卡尔积（连接条件）** )

```sql
#多表查询

SELECT * FROM 父表 ,外表;
```

####         **● 多表查询分类**

​              连接查询

1. 内连接

​       相当于查询A、B**交集**部分数据

2. 外连接

​      •左外连接

​      •右外连接

3. 自连接

​      当前表与自身的连接查询，自连接**必须使用表别名**

4. 联合查询

​       •子查询

### 3.连接查询

#### **3.1** **内连接**

​       ● 隐式内连接

```sql
SELECT 字段列表 FROM 表1，表2 WHERE 条件 . . .;

#例子 emp员工表 dept部门表

SELECT emp.name,dept.name FROM emp,dept WHERE emp.dept_id=dept.id;
```

​       ● 显式内连接

```sql
SELECT 字段列表 FROM 表1,[INNER] JOIN 表2 ON 连接条件;

#例子

SELECT e.name,d.name FROM emp e INNER JOIN dept d ON e.dept_id=d.id;
```

#### **3.2** **外连接**

​       ● 左外连接(LEFT JOIN)

```sql
SELECT 字段列表 FROM 表1 LEFT [OUTER] JOIN 表2 ON 条件 #字段列表根据需求可进行优化 因为按照sql语句的执行属性可知select是在后面执行
```

相当于查询表1(左表)的所有数据和包含表1和表2交集部分的数据

​       ●  右外连接(RIGHT JOIN)

```sql
SELECT 字段列表 FROM 表1 RIGHT [OUTER] JOIN 表2 ON 条件
```

相当于查询表2(右表)的所有数据和包含表1和表2交集部分的数据

#### **3.3** **自连接**

​       ●  语法

```sql
# 把一张表看做成两张表 通过唯一 的id做为自连接的条件 managerid=id

# 自连接必须给表名取别名！ ！ ！

SELECT 字段列表 FROM 表A 别名A JOIN 表A 别名B ON 条件 . . .;

# 举例：

SELECT a.name,b.name FROM emp a JOIN emp b ON a.managerid=b.id;
```

 

#### **3.4** **联合查询**

​       ● 定义

对于联合查询，就是把多次查询的结果合并起来，形成一个新的查询结果集。

​       ● 关键词

```sql
# 作为单独一句 在两个sql语句查询中间

UNION #将查询的结果合并时 ，进行去重

UNION ALL #直接将查询的结果进行合并
```

注意

1. 对于联合查询多表查询的；列数必须保持一致，字段类型也必须保持一致 
1. union all 会将全部数据直接合并在一起， union 会对合并之后的数据去重

### 4.子查询

#### **4.1** **概述**

​       **● 概念:**SQL语句中嵌套SELECT语句，成为**嵌套语句**，又称子查询

```sql
SELECT * FROM t1 WHERE column1=(SELECT column1 FROM t2);
#子查询外部的语句可以是INSERT/UPDATE/DELETE/SELECT的任何一个
```

​       ● **查询结果分类**

1. 标量子查询(子表查询结果为单个值)
2. 列子查询（子查询结果为一列）
3. 行子查询（子查询结果为一行）
4. 表子查询（子查询结果为多行多列）

​       ● **根据子查询位置**

1. WHERE之后
2. FROM之后
3. SELECT之后

#### **4.2** **查询结果分类**

#####        **● 标量子查询**

1. 定义: 子查询返回的结果是单个值(数字，字符串，日期等)，最简单的形式，这种子查询称为标量子查询
2. 常用操作符:= 、<>、> 、>=、 < 、<=
3. 案例展示

```sql
# emp员工信息表

# dept部门表

# 要求查询具体部门对应的员工信息 前提员工表和部门表是已经建立了连接(foreign key) # 分析 首先得知道具体部门的部门ID 进而查询该部门的员工信息

# 可以两种sql写法

SELECT id FROM dept WHERE name='具体的部门名 ';

SELECT * FROM emp WHERE dept_id ="上条语句的结果";

# 所以可以整合成一句 形成嵌套

SELECT * FROM emp WHERE dept_id=(SELECT id FROM dept WHERE name='具体的部门名 ');
```

#####        **● 列子查询**

1. 子查询返回的结果是一列(可以是多行 )，这种子查询为列子查询

2. 常用操作符:IN、NOT IN、ANY、SOME、ALL

| **操作符** | **描述**                                   |
| ---------- | ------------------------------------------ |
| IN         | 在指定的集合范围之内，多选一               |
| NOT IN     | 不在指定的集合范围之内                     |
| **ANY**    | 子查询返回列表中，有**任意一个满足**即可   |
| **SOME**   | 与ANY**等同**，使用SOME的地方都可以使用ANY |
| **ALL**    | 子查询返回列表的**所有值都必须满足**       |

3. 案例演示

```sql
#查询比财务部所有人工资都高的员工信息

#将获取信息的问题拆分化 在通过嵌套进行优化 形成一句sql语句

# 获取财务部的部门id

SELECT id FROM dept WHERE name ='财务部';

# 获取财务中所有人的工资

SELECT salary FROM emp WHERE id=(SELECT id FROM dept WHERE name ='财务部');

# 获取比财务部所有员工工资都高的员工信息

SELECT * FROM emp WHERE salary>ALL SELECT salary FROM emp WHERE id=(SELECT id FROM dept WHERE name ='财务部');
```

#####        ● 行子查询

1 . 子查询返回的结果是一行(可以是多列)，这种子查询为行子查询

2 . 常用操作符:IN、 NOT IN、ANY、 SOME、ALL(同上)

3 . 案例演示

```sql
# 查询张无忌的薪资及直属领导相同的员工信息

SELECT salary managerid FROM emp WHERE name="张无忌 ";

SELECT * FROM emp WHERE (salary,managerid)=(SELECT salary managerid FROM emp WHERE name="张无忌 ");

#返回的结果是一行多列 对应的是salary和managerID
```

#####        ● 表子查询

1. 表子查询返回的结果是多行多列，这种子查询为列表查询
2. 常用操作符: IN
3. 案例演示

```sql
#查询入职日期是 “2006-01-01”之后的员工信息和部门信息

SELECT * FROM emp where entrydate>'2006-01-01';

SELECT e.*,d.* FROM (SELECT * FROM emp where entrydate>'2006-01-01 ') e LEFT JOIN dept d on e.dept_id=d.id;
```

