# 如何计算汇总统计

### describe()的用法

在Pandas中，您可以使用`describe()`方法查看数值型列的汇总统计信息。这个方法提供了关于数据分布的有用统计量，包括计数、平均值、标准差、最小值、25%、50%和75%的分位数，以及最大值。

示例代码：

```python
import pandas as pd

# 创建DataFrame示例
data = {'Name': ['John', 'Emma', 'Alex', 'Sophia', 'James'],
        'Age': [25, 28, 22, 30, 32],
        'Height': [175, 162, 180, 158, 170],
        'Weight': [70, 58, 75, 52, 68]}
df = pd.DataFrame(data)

# 查看数值型列的汇总统计
summary_stats = df.describe()
mean_age = df['Age'].mean()
median_height = df['Height'].median()
max_weight = df['Weight'].max()

print(summary_stats)
print("Mean Age:", mean_age)
print("Median Height:", median_height)
print("Max Weight:", max_weight)
```

输出：

```mathematica
             Age      Height     Weight
count   5.000000    5.000000   5.000000
mean   27.400000  169.000000  64.600000
std     4.131759    8.660254   8.996037
min    22.000000  158.000000  52.000000
25%    25.000000  162.000000  58.000000
50%    28.000000  170.000000  68.000000
75%    30.000000  175.000000  70.000000
max     32.000000  180.000000  75.000000

Mean Age: 27.4
Median Height: 170.0
Max Weight: 75


```

常用的计算汇总统计的方法：

1. `describe()`方法：计算数值型列的基本统计信息，包括计数、均值、标准差、最小值、25%、50%和75%分位数以及最大值。
2. `mean()`方法：计算数值型列的平均值。
3. `median()`方法：计算数值型列的中位数。
4. `min()`方法：计算数值型列的最小值。
5. `max()`方法：计算数值型列的最大值。
6. `sum()`方法：计算数值型列的总和。
7. `count()`方法：计算非缺失值的数量。
8. `std()`方法：计算数值型列的标准差。
9. `var()`方法：计算数值型列的方差。

通过查看数值型列的汇总统计，可以快速了解数据的整体分布和统计特征，有助于进行数据分析和洞察。



### size和count

在Pandas中，`size`和`count`是用于计算分组数据的两个方法，常常与`groupby`一起使用。它们可以提供关于每个分组的计数信息，但在计算方式和返回结果上有一些区别。

**size方法：**

- `size`方法用于计算每个分组中的元素数量，包括缺失值。
- 返回的结果是一个Series，其索引是分组键，值是每个分组中的元素数量。
- `size`方法不考虑缺失值，即使某个分组中存在缺失值，它也会将其计算为有效元素。

**count方法：**

- `count`方法用于计算每个分组中非缺失值的数量。
- 返回的结果是一个Series，其索引是分组键，值是每个分组中的非缺失值的数量。
- `count`方法排除了缺失值，只计算非缺失值的数量。

示例，演示如何使用`size`和`count`方法结合`groupby`对数据进行计数：

```python
import pandas as pd

# 创建一个示例DataFrame
data = {'Group': ['A', 'A', 'B', 'B', 'B'],
        'Value': [1, 2, 3, None, 5]}
df = pd.DataFrame(data)

# 使用groupby和size计算每个分组的元素数量
size_result = df.groupby('Group').size()

# 使用groupby和count计算每个分组的非缺失值数量
count_result = df.groupby('Group').count()

print("Size结果:")
print(size_result)
print("\nCount结果:")
print(count_result)
```

输出：

```less
Size结果:
Group
A    2
B    3
dtype: int64

Count结果:
       Value
Group       
A          2
B          2
```



# 如何重塑表格布局

### sort的用法

在Pandas中，`sort_values`和`sort_index`是用于对DataFrame或Series进行排序的两个常用方法。

1. `sort_values`方法：

   - `sort_values`方法用于按照指定的列或多个列的值对DataFrame或Series进行排序。

   - 可以通过`by`参数指定要排序的列或多个列，以列表形式提供。

   - 可以使用`ascending`参数来控制排序的升序或降序，默认为`True`（升序）。

   - 可以使用`inplace`参数来指定是否原地修改DataFrame或Series，默认为`False`，即返回排序后的副本。

   - 示例：

     ```python
     import pandas as pd
     
     df = pd.DataFrame({'A': [3, 2, 1], 'B': [1, 3, 2]})
     sorted_df = df.sort_values(by='A', ascending=True)
     ```

     上述代码将按照'A'列的值对DataFrame `df` 进行升序排序，并将结果存储在`sorted_df`中。

2. `sort_index`方法：

   - `sort_index`方法用于根据索引对DataFrame或Series进行排序。

   - 可以使用`axis`参数指定要排序的轴，`axis=0`表示按行索引排序，`axis=1`表示按列索引排序。

   - 可以使用`ascending`参数来控制排序的升序或降序，默认为`True`（升序）。

   - 可以使用`inplace`参数来指定是否原地修改DataFrame或Series，默认为`False`，即返回排序后的副本。

   - 示例：

     ```python
     import pandas as pd
     
     df = pd.DataFrame({'A': [3, 2, 1], 'B': [1, 3, 2]}, index=[2, 1, 3])
     sorted_df = df.sort_index(axis=0, ascending=True)
     ```

     上述代码将按照行索引对DataFrame `df` 进行升序排序，并将结果存储在`sorted_df`中。

排序操作可以根据具体需求来选择使用`sort_values`还是`sort_index`。如果希望根据列的值进行排序，使用`sort_values`方法；如果希望根据索引进行排序，使用`sort_index`方法。



----------------------------------------------------------------

在Pandas中，可以使用不同的方法来重新塑造（reshape）表格布局，以满足特定的数据分析和处理需求。以下是一些常用的重塑表格布局的方法：

### pivot()方法

`pivot()`方法：用于将长格式（long format）的数据转换为宽格式（wide format），根据指定的列创建新的列，并使用列值进行填充。

示例，展示如何使用`pivot()`方法将数据从长格式转换为宽格式：

```python
import pandas as pd

# 创建示例DataFrame
data = {'Name': ['John', 'John', 'Emma', 'Emma', 'Alex', 'Alex'],
        'Subject': ['Math', 'Science', 'Math', 'Science', 'Math', 'Science'],
        'Score': [85, 92, 78, 88, 90, 85]}
df = pd.DataFrame(data)

# 使用pivot方法重塑表格布局
pivot_df = df.pivot(index='Name', columns='Subject', values='Score')
print(pivot_df)

```

输出：

```javascript
Subject  Math  Science
Name                  
Alex       90       85
Emma       78       88
John       85       92

```



### melt()方法

在Pandas中，`melt()`是一个用于将宽格式（wide format）的数据转换为长格式（long format）的方法。它将数据从列中展开成为更长的格式，使得数据更适合进行分析和可视化。

`melt()`方法的语法如下：

```python
DataFrame.melt(id_vars=None, value_vars=None, var_name=None, value_name='value', col_level=None)
```

参数说明：

- `id_vars`：可选参数，指定要保留的列名，不进行展开操作。
- `value_vars`：可选参数，指定要进行展开操作的列名。如果未指定，则默认展开所有未指定为`id_vars`的列。
- `var_name`：可选参数，指定展开后的列名的名称。
- `value_name`：可选参数，指定展开后的值的列名的名称，默认为`value`。
- `col_level`：可选参数，用于多层索引列的级别。

下面是一个示例，演示如何使用`melt()`方法将宽格式的数据转换为长格式：

```python
import pandas as pd

# 创建一个示例DataFrame
data = {
    'Name': ['Alice', 'Bob', 'Charlie'],
    'Math': [90, 80, 70],
    'Science': [95, 85, 75],
    'History': [92, 82, 72]
}
df = pd.DataFrame(data)

# 使用melt()方法进行数据转换
melted_df = df.melt(id_vars='Name', value_vars=['Math', 'Science', 'History'], var_name='Subject', value_name='Score')

print("原始DataFrame:")
print(df)
print("\n转换后的DataFrame:")
print(melted_df)
```

输出：

```javascript
原始DataFrame:
      Name  Math  Science  History
0    Alice    90       95       92
1      Bob    80       85       82
2  Charlie    70       75       72

转换后的DataFrame:
      Name  Subject  Score
0    Alice     Math     90
1      Bob     Math     80
2  Charlie     Math     70
3    Alice  Science     95
4      Bob  Science     85
5  Charlie  Science     75
6    Alice  History     92
7      Bob  History     82
8  Charlie  History     72
```



### stack()方法

1. `stack()`方法：

在Pandas中，`stack()`是一个用于对DataFrame进行堆叠操作的方法。它将列标签（Column labels）转换为行索引（Row index），将数据从宽格式转换为长格式，从而生成一个更紧凑的DataFrame。

`stack()`方法的语法如下：

```python
DataFrame.stack(level=-1, dropna=True)
```

参数说明：

- `level`：可选参数，用于多层索引列的级别。默认值为`-1`，表示堆叠所有列。
- `dropna`：可选参数，指定是否删除包含缺失值的行，默认为`True`。

示例：

```python
import pandas as pd

# 创建一个示例DataFrame
data = {
    'Name': ['Alice', 'Bob'],
    'Math': [90, 80],
    'Science': [95, 85],
    'History': [92, 82]
}
df = pd.DataFrame(data)

# 使用stack()方法进行堆叠操作
stacked_df = df.set_index('Name').stack().reset_index()

print("原始DataFrame:")
print(df)
print("\n堆叠后的DataFrame:")
print(stacked_df)
```

输出：

```javascript
原始DataFrame:
   Name  Math  Science  History
0  Alice    90       95       92
1    Bob    80       85       82

堆叠后的DataFrame:
    Name  level_1   0
0  Alice     Math  90
1  Alice  Science  95
2  Alice  History  92
3    Bob     Math  80
4    Bob  Science  85
5    Bob  History  82
```



### unstack()方法

在Pandas中，`unstack()`是用于将表格中的行索引转换为列索引，将数据从长格式转换为宽格式。

`unstack()`方法的语法如下：

```python
DataFrame.unstack(level=-1, fill_value=None)
```

参数说明：

- `level`：可选参数，用于指定要展开的层次化索引的级别。默认值为`-1`，表示展开最内层索引。
- `fill_value`：可选参数，用于指定填充缺失值的值。

示例：

```python
import pandas as pd

# 创建一个示例DataFrame
data = {
    'Name': ['Alice', 'Bob'],
    'Subject': ['Math', 'Science'],
    'Score': [90, 80]
}
df = pd.DataFrame(data)

# 将DataFrame进行设置层次化索引
indexed_df = df.set_index(['Name', 'Subject'])

# 使用unstack()方法进行展开操作
unstacked_df = indexed_df.unstack()

print("原始DataFrame:")
print(df)
print("\n展开后的DataFrame:")
print(unstacked_df)
```

输出结果如下：

```javascript
原始DataFrame:
   Name  Subject  Score
0  Alice     Math     90
1    Bob  Science     80

展开后的DataFrame:
        Score        
Subject  Math Science
Name                 
Alice      90     NaN
Bob       NaN      80
```



# 如何合并多个表中的数据

在Pandas中，可以使用不同的方法来合并（merge）多个表中的数据。以下是一些常用的合并数据的方法：

### concat()方法

在Pandas中，`concat()`是一个用于沿指定轴（行或列）将多个DataFrame对象进行合并的方法。它可以将多个DataFrame对象按照指定的方式进行连接，并返回一个合并后的DataFrame。以下是关于`concat()`方法的解释和示例说明：

`concat()`方法的语法如下：

```python
pd.concat(objs, axis=0, join='outer', ignore_index=False)
```

参数说明：

- `objs`：要合并的DataFrame对象列表或字典。
- `axis`：可选参数，指定合并的轴。默认为`0`，表示按行合并；`1`表示按列合并。
- `join`：可选参数，指定连接的方式。默认为`'outer'`，表示按照并集进行连接；`'inner'`表示按照交集进行连接。
- `ignore_index`：可选参数，指定是否忽略合并后的索引。默认为`False`，表示保留原始索引。

示例：

```python
import pandas as pd

# 创建示例DataFrame
df1 = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6]})
df2 = pd.DataFrame({'A': [7, 8, 9], 'B': [10, 11, 12]})

# 使用concat()方法进行合并操作
merged_df = pd.concat([df1, df2])

print("合并后的DataFrame:")
print(merged_df)
```

输出：

```makefile
合并后的DataFrame:
   A   B
0  1   4
1  2   5
2  3   6
0  7  10
1  8  11
2  9  12
```



### merge()方法

在Pandas中，`merge()`是一个用于合并（或连接）多个DataFrame对象的方法。它基于指定的键（或多个键）将多个DataFrame按照指定的方式进行连接，并返回一个合并后的DataFrame。

`merge()`方法的语法如下：

```python
pd.merge(left, right, how='inner', on=None, left_on=None, right_on=None, left_index=False, right_index=False, sort=True)
```

参数说明：

- `left`：左侧的DataFrame对象。
- `right`：右侧的DataFrame对象。
- `how`：可选参数，指定连接方式。默认为`'inner'`，表示按照键的交集进行连接；`'outer'`表示按照键的并集进行连接；`'left'`表示按照左侧DataFrame的键进行连接；`'right'`表示按照右侧DataFrame的键进行连接。
- `on`：可选参数，用于指定连接的键。可以是一个列名的字符串，或多个列名组成的列表。
- `left_on`：可选参数，用于指定左侧DataFrame连接键的列名或列名列表。
- `right_on`：可选参数，用于指定右侧DataFrame连接键的列名或列名列表。
- `left_index`：可选参数，指定是否使用左侧DataFrame的索引作为连接键。
- `right_index`：可选参数，指定是否使用右侧DataFrame的索引作为连接键。
- `sort`：可选参数，指定是否按照连接键进行排序。

示例：

```python
import pandas as pd

# 创建示例DataFrame
df1 = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'Key': ['K1', 'K2', 'K3']})
df2 = pd.DataFrame({'C': [7, 8, 9], 'D': [10, 11, 12], 'Key': ['K2', 'K3', 'K4']})

# 使用merge()方法进行合并操作
merged_df = pd.merge(df1, df2, on='Key')

print("合并后的DataFrame:")
print(merged_df)
```

输出结果如下：

```mathematica
合并后的DataFrame:
   A  B Key  C   D
0  2  5  K2  7  10
1  3  6  K3  8  11
```



### join()方法

在Pandas中，`join()`是一个用于基于索引或列之间的关系将两个DataFrame对象进行连接的方法。它类似于SQL中的JOIN操作，可以根据指定的连接键将两个DataFrame进行合并，并返回一个合并后的DataFrame。

`join()`方法的语法如下：

```python
DataFrame.join(other, on=None, how='left', lsuffix='', rsuffix='', sort=False)
```

参数说明：

- `other`：要连接的另一个DataFrame对象。
- `on`：可选参数，用于指定连接键。可以是一个列名的字符串，或多个列名组成的列表。如果未指定，则根据索引进行连接。
- `how`：可选参数，指定连接方式。默认为`'left'`，表示按照左侧DataFrame的索引或列进行连接；`'right'`表示按照右侧DataFrame的索引或列进行连接；`'inner'`表示按照两个DataFrame共有的索引或列进行连接；`'outer'`表示按照两个DataFrame的并集进行连接。
- `lsuffix`：可选参数，用于处理连接时重叠列名的后缀（左侧DataFrame）。
- `rsuffix`：可选参数，用于处理连接时重叠列名的后缀（右侧DataFrame）。
- `sort`：可选参数，指定是否按照连接键进行排序。

示例：

```python
import pandas as pd

# 创建示例DataFrame
df1 = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6]}, index=['K1', 'K2', 'K3'])
df2 = pd.DataFrame({'C': [7, 8, 9], 'D': [10, 11, 12]}, index=['K2', 'K3', 'K4'])

# 使用join()方法进行连接操作
joined_df = df1.join(df2)

print("连接后的DataFrame:")
print(joined_df)
```

输出：

```mathematica
连接后的DataFrame:
     A    B    C     D
K1   1    4  NaN   NaN
K2   2    5  7.0  10.0
K3   3    6  8.0  11.0
```



### 补充：T（Transpose）转置

在Pandas中，T（Transpose）是一个用于转置数据的方法。转置操作会将DataFrame或Series的行和列进行交换，从而生成一个新的转置后的数据结构。以下是关于Pandas中的T转置的一些知识点：

1. DataFrame的转置： 转置DataFrame时，行索引将会变成转置前的列索引，列索引将会变成转置前的行索引。可以使用`T`方法来执行转置操作，例如：

   ```python
   import pandas as pd
   
   df = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6]})
   transposed_df = df.T
   ```

   上述代码将创建一个DataFrame `df`，然后使用`T`方法将其转置，结果将会存储在`transposed_df`中。

2. Series的转置： 转置一个Series对象会生成一个具有单一列的DataFrame，行索引将会保持不变，而列索引将会变为转置前的索引值。可以使用`T`方法对Series进行转置，例如：

   ```python
   import pandas as pd
   
   series = pd.Series([1, 2, 3, 4], index=['A', 'B', 'C', 'D'])
   transposed_series = series.T
   ```

   上述代码将创建一个Series `series`，然后使用`T`方法将其转置，结果将会存储在`transposed_series`中。

3. 转置对数据结构的影响： 转置操作不会改变原始数据结构，而是生成一个新的转置后的数据结构。原始数据结构保持不变，只是行和列的排列顺序发生了变化。

4. 转置的应用： 转置操作常用于需要改变数据结构的情况，例如在数据分析和处理过程中，可以使用转置来更改数据的布局以满足特定的分析需求。

需要注意的是，转置操作可能会导致数据结构的变化，因此在进行转置操作之后，索引和列名可能需要进行调整以适应新的结构。











