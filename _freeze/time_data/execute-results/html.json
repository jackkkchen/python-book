{
  "hash": "6d8d9ecd4abebf16d683428475d209cb",
  "result": {
    "markdown": "## 使用Pandas处理时间序列数据 \n\n### 1. Pandas中的时间序列数据 {.unnumbered}\n\nPandas中有6种关于时间序列数据的常见对象，分别是`timestamp`、`datetimeindex`、`period`、`periodindex`、以时间为元素的`series`和以时间索引的`dataframe`。\n\nPandas时序处理中最常见的两种数据类型为`datetime`和`timedelta`。\n\n* `datetime`\n\n  `datetime`即既有日期`date`，又有时间`time`的数据，表示一个具体的时间点（时间戳）。\n\n\n  ```{mermaid}\n  graph TD;\n  datetime --> date:2023-06-14;\n  datetime --> time:12:00:00;\n  ```\n\n\n* `timedelta`\n\n  `timedelta`表示两个时间点之差。如`2023-01-01`和`2023-01-02`之间的`timedelta`即为一天。\n\n### 2. 文本转换 {.unnumbered}\n\n一般情况下，从.csv文件中导入的数据后，`Dataframe`中对应的时间列是字符串的形式，Pandas中提供了`to_datetime()`函数将字符串转换为`datetime`对象，并将其设置为`Dataframe`的索引。在Pandas中，这种类似于标准库中的日期时间对象称为：`datetime64`、`datetime.datetime`、`pandas.Timestamp`。\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\n\n# 创建包含字符串时间列数据的dataframe\ndata = {'date': ['20230601', '20230602', '20230603', '20230604']}\ndf = pd.DataFrame(data)\n# 展示dataframe\ndf\n# 输出结果为\n#          date\n# 0  20230601\n# 1  20230602\n# 2  20230603\n# 3  20230604\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>date</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>20230601</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>20230602</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>20230603</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>20230604</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\n# 将字符串时间列转换为datetime64格式的对象\ndf['date'] = pd.to_datetime(df['date'])\n\n# 打印转换后的结果\ndf\n\n# 输出结果为\n#         date\n# 0 2023-06-01\n# 1 2023-06-02\n# 2 2023-06-03\n# 3 2023-06-04\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>date</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2023-06-01</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2023-06-02</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2023-06-03</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2023-06-04</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n将字符串数据转换为`datetime64`对象后，这些时间日期数据就具有了可比性，这样一来，我们就可以用它们来获取时间序列的长度。\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\n# 计算时间序列的长度\ntime_length = df['date'].max() - df['date'].min()\n\n# 打印时间序列的长度\nprint(\"时间序列的长度：\", time_length)\n\n# 输出结果为\n# 时间序列的长度： 3 days 00:00:00\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n时间序列的长度： 3 days 00:00:00\n```\n:::\n:::\n\n\n另外，我们还可以运用`dt`属性中的`month`函数来将月份信息提出出来，并将提取的结果赋值给新列。\n\n```python\n# 提取月份信息并形成新列\ndf['month'] = df['date'].dt.month\n\n# 打印DataFrame\nprint(df)\n\n# 输出结果为\n#         date  month\n# 0 2023-06-01      6\n# 1 2023-06-02      6\n# 2 2023-06-03      6\n# 3 2023-06-04      6\n```\n\n### 2. Pandas中的时间日期索引 {.unnumbered}\n\n在Pandas中，日期索引是一种特殊的索引类型，用于在时间序列数据中以日期或时间作为索引。日期索引在处理时间序列数据时非常有用，可以轻松地对数据进行切片、重采样和时间范围选择等操作。\n\nPandas提供了两种主要的日期索引类型：`Timestamp`和`DatetimeIndex`。\n\n1. `Timestamp`:\n\n   `Timestamp`是Pandas中表示单个时间点的对象，可以使用`pd.Timestamp()`函数创建一个`Timestamp`对象，指定日期和时间。\n\n   ```python\n   pd.Timestamp('2023-06-17 10:30:00')\n   ```\n\n2. `DatetimeIndex`:\n\n   `DatetimeIndex`是一种由`Timestamp`对象构成的索引对象。可以使用`pd.to_datetime()`函数将日期时间字符串转换为`DatetimeIndex`对象。\n\n   ```python\n   pd.to_datetime(['2023-06-17', '2023-06-18', '2023-06-19'])\n   ```\n\n使用日期索引可以实现以下功能：\n\n1. 切片和选择：\n\n   使用日期索引可以切片和选择时间序列数据。\n\n   ```python\n   # 创建一个示例时间序列数据\n   data = {'日期': pd.date_range(start='2023-01-01', periods=10, freq='D'),\n           '销售量': [100, 150, 120, 200, 180, 160, 190, 210, 230, 250]}\n   df = pd.DataFrame(data)\n   \n   # 将日期列设置为索引\n   df.set_index('日期', inplace=True)\n   \n   # 选择特定日期范围的数据\n   selected_data = df['2023-01-03':'2023-01-07']\n   print(selected_data)\n   \n   # 选择特定月份的数据\n   selected_month = df['2023-02']\n   print(selected_month)\n   \n   # 使用布尔条件选择数据\n   boolean_selection = df[df['销售量'] > 200]\n   print(boolean_selection)\n   ```\n\n2. 重采样：\n\n   重采样是指将时间序列数据从一个频率转换为另一个频率。使用日期索引，使用`resample()`方法可以对数据进行重采样，如按日、按周或按月重采样数据。\n\n   ```python\n   # 按周重采样并计算平均值\n   weekly_resampled = df.resample('W').mean()\n   print(weekly_resampled)\n   \n   # 按月重采样并计算总和\n   monthly_resampled = df.resample('M').sum()\n   print(monthly_resampled)\n   ```\n\n3. 时间范围生成：\n\n   Pandas提供了几个函数来生成一系列日期索引，如`pd.date_range()`和`pd.period_range()`。指定开始日期、结束日期和频率来生成日期范围，以便在创建时间序列数据时使用。\n\n   ```python\n   # 生成一个包含5个连续日期的时间范围\n   date_range = pd.date_range(start='2023-01-01', periods=5, freq='D')\n   print(date_range)\n   \n   # 生成一个包含3个月份的时间范围\n   month_range = pd.date_range(start='2023-01-01', periods=3, freq='M')\n   print(month_range)\n   \n   # 生成一个包含10个工作日的时间范围\n   business_days_range = pd.date_range(start='2023-01-01', periods=10, freq='B')\n   print(business_days_range)\n   ```\n\n4. 日期偏移：\n\n   Pandas提供了日期偏移功能，可以在日期上进行简单的数学运算。例如，您可以使用`+`或`-`操作符在日期索引上进行加减运算，例如`df.index + pd.DateOffset(days=1)`将日期索引向前偏移一天。\n\n   ```python\n   # 创建一个日期索引\n   date_index = pd.date_range(start='2023-01-01', periods=5, freq='D')\n   \n   # 将日期索引向前偏移一天\n   forward_offset = date_index + pd.DateOffset(days=1)\n   print(forward_offset)\n   \n   # 将日期索引向后偏移两天\n   backward_offset = date_index - pd.DateOffset(days=2)\n   print(backward_offset)\n   \n   # 将日期索引向前偏移一个月\n   month_offset = date_index + pd.DateOffset(months=1)\n   print(month_offset)\n   ```\n\n日期索引是Pandas中处理时间序列数据的重要工具之一，它提供了方便的方法来处理、分析和可视化时间相关的数据。使用日期索引，您可以更轻松地操作和探索时间序列数据。\n\n在Pandas中，`.dt`接口提供了许多常用的属性，用于处理日期和时间类型的Series数据。以下是一些常见的`.dt`接口属性的示例：\n\n| 属性                | 描述                                               |\n| :------------------ | :------------------------------------------------- |\n| `.year`             | 返回日期的年份。                                   |\n| `.month`            | 返回日期的月份。                                   |\n| `.day`              | 返回日期的日。                                     |\n| `.hour`             | 返回时间的小时。                                   |\n| `.minute`           | 返回时间的分钟。                                   |\n| `.second`           | 返回时间的秒。                                     |\n| `.microsecond`      | 返回时间的微秒。                                   |\n| `.nanosecond`       | 返回时间的纳秒。                                   |\n| `.weekday`          | 返回日期对应的星期几（0代表星期一，6代表星期日）。 |\n| `.weekday_name`     | 返回日期对应的星期几的名称。                       |\n| `.weekofyear`       | 返回日期所在年份的第几周。                         |\n| `.quarter`          | 返回日期所属的季度。                               |\n| `.is_month_start`   | 检查日期是否为月初。                               |\n| `.is_month_end`     | 检查日期是否为月末。                               |\n| `.is_quarter_start` | 检查日期是否为季度初。                             |\n| `.is_quarter_end`   | 检查日期是否为季度末。                             |\n| `.is_year_start`    | 检查日期是否为年初。                               |\n| `.is_year_end`      | 检查日期是否为年末。                               |\n| `.is_leap_year`     | 检查日期是否为闰年。                               |\n\n### 3. 重采样 {.unnumbered}\n\n在 Pandas 中，重采样是指将时间序列数据从一个频率转换为另一个频率的过程。重采样可以帮助我们对时间序列数据进行聚合、降采样或升采样，以适应不同的分析需求。Pandas 提供了强大的重采样功能，可以根据日期和时间索引对时间序列数据进行灵活的重采样操作。\n\n重采样主要有两种类型：降采样（Downsampling）和升采样（Upsampling）。\n\n1. 降采样：降采样是将时间序列数据从高频率转换为低频率。例如，从分钟数据转换为小时数据或从小时数据转换为每日数据。在降采样中，我们需要指定一个时间段，然后对该时间段内的数据进行聚合操作，例如求和、平均值、最大值、最小值等。\n\n   示例代码：\n\n   ```python\n   pythonCopy code\n   df.resample('D').sum()  # 将数据按天进行降采样，并计算每天的总和\n   ```\n\n2. 升采样：升采样是将时间序列数据从低频率转换为高频率。例如，从每日数据转换为小时数据或从每月数据转换为每日数据。在升采样中，我们通常需要使用插值方法来填充新增的时间点，以估计缺失的数据。\n\n   示例代码：\n\n   ```python\n   pythonCopy code\n   df.resample('H').ffill()  # 将数据按小时进行升采样，并使用向前填充方法插值数据\n   ```\n\n在重采样过程中，我们需要使用 `resample()` 函数指定重采样的频率，例如 'D' 表示按天重采样，'H' 表示按小时重采样。然后，我们可以对重采样对象应用聚合函数（例如 `sum()`、`mean()`、`max()`、`min()` 等）或插值函数（例如 `ffill()`、`bfill()` 等）来处理数据。\n\n",
    "supporting": [
      "time_data_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}