[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Python新手文档",
    "section": "",
    "text": "简介\n本文是为编程新手准备的Python入门学习指南，旨在帮助初学者掌握Python编程语言以及使用Pandas库进行数据处理和分析。无论你是完全没有编程经验，还是有其他编程语言经验但对Python和Pandas感兴趣，本指南将提供基础知识和实践案例，帮助你快速入门。"
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "Python简介",
    "section": "",
    "text": "Python是一种高级编程语言，由Guido van Rossum于1989年首次发布。Python之所以受到大家的欢迎，是因为它有很多优秀“品质”。\n1.简单、易学、免费、开源：Python简单、易学。我们可以自由发布其复制版本，阅读、修改其源代码，将其（部分）用于新软件中。\n2.解释型：Python是边解释边执行的，Python解释器会将源代码转换为中间字节码形式，然后将其解释为机器语言并执行。\n3.可移植：Python解释器己被移植在许多平台上，Python程序无须经过修改就可以在多个平台上运行。\n4.代码规范：Pythor所采用的强制缩进的方式，使得其代码具有极佳的可读性。\n5.面向对象：与C++和Java等相比，Python以强大而简单的方式实现了面向对象编程。\n6.胶水语言：标准版本的Python调用C语言，并可以借助C语言的接口驱动调用所有编程语言。\n7.丰富的库：Pythor的标准库种类繁多，可以帮助处理各种工作，我们不需要安装就可以直接使用这些库。\n8.动态类型：Python不会检查数据类型，在声明变量时不需要指定数据类型。"
  },
  {
    "objectID": "环境搭建.html",
    "href": "环境搭建.html",
    "title": "环境搭建",
    "section": "",
    "text": "要开始使用Python，首先需要安装Python。你可以访问Python官网下载并安装适合你操作系统的Python版本。\n安装完成后，打开命令行（Windows）或终端（macOS/Linux），输入以下命令，确认Python已成功安装：\npython --version\n输入python并按回车键。你将看到一条欢迎消息，其末尾\n为如下提示符：\n&gt;&gt;&gt;\n如果情况确实如此，就可以输入Python命令了。\n请尝试像下面这样做，以核实它是否管用：\n&gt;&gt;&gt; print(“Hello, world!”)\n等你按下回车键后，将出现如下输出：\nHello, world!\n&gt;&gt;&gt;\n如果你熟悉其他计算机语言，可能习惯了在每行末尾都加上分号。在Python中无需这样做，因为在Python中，一行就是一行。接下来，我们将学习如何编写和运行Python程序。"
  },
  {
    "objectID": "Python入门小白教程.html",
    "href": "Python入门小白教程.html",
    "title": "Python基础",
    "section": "",
    "text": "函数"
  },
  {
    "objectID": "Python入门小白教程.html#变量",
    "href": "Python入门小白教程.html#变量",
    "title": "Python基础",
    "section": "变量",
    "text": "变量\n简单地说，变量就是编程中最基本的存储单位，变量会暂时性地储存你放进去的东西。\n经常发生改变的一个量，变量一般是用来接受一个赋值或用户的一个输入，在程序的其他地方进行调用。\n定义：变量名 = 变量值\n变量是表示（或指向）特定值的名称。例如，你可能想使用名称x来表示3，为此执行如下代码：\n x = 3\n这称为赋值（assignment），我们将值3赋给了变量x。换而言之，就是将变量x与值（或对象）3关联起来。给变量赋值后，就可在表达式中使用它。\nx * 2\n\n6\n不同于其他一些语言，使用Python变量前必须给它赋值，因为Python变量没有默认值。\n● 调用：直接在需要调用的地方输入变量名即可\n命名规范\n在Python中使用变量时，需要遵守一些规则和指南。违反这些规则将引发错误，而指南旨在让你编写的代码更容易阅读和理解。请务必牢记下述有关变量的规则。\n● 变量名只能包含字母、数字和下划线。变量名可以字母或下划线打头，但不能以数字打头，例如，可将变量命名为message_1，但不能将其命名为1_message。另外，py文件不要使用‘-’和以数字开头命名。\n● 变量名不能包含空格，但可使用下划线来分隔其中的单词。例如，变量名greeting_message可行，但变量名greeting message会引发错误。\n● 不要将Python关键字和函数名用作变量名，即不要使用Python保留用于特殊用途的单词，如print\n● 标识符对大小写敏感，就目前而言，应使用小写的Python变量名。在变量名中使用大写字母虽然不会导致错误，但避免使用大写字母是个不错的主意。在命名时如果想避开关键字，可使用大写首字母可以很有效地区分。\n● 变量名应既简短又具有描述性。例如，name比n好，student_name比s_n好，name_length比length_of_persons_name好。\n● 慎用小写字母l和大写字母O，因为它们可能被人错看成数字1和0。\n● 变量的数据类型是根据变量的赋值的类型来决定的\n\n要创建良好的变量名，需要经过一定的实践，在程序复杂而有趣时尤其如此。随着你编写的程序越来越多，并开始阅读别人编写的代码，将越来越善于创建有意义的变量名。"
  },
  {
    "objectID": "Python入门小白教程.html#数据类型",
    "href": "Python入门小白教程.html#数据类型",
    "title": "Python基础",
    "section": "数据类型",
    "text": "数据类型\nPython有以下基本数据类型：\n\n整数（int）：如1, 2, 3\n浮点数（float）：如1.5, 3.14\n字符串（str）：如”hello”, ‘world’\n布尔值（bool）：True, False\n\n在Python中，我们可以使用变量来存储数据。例如：\nx = 10\ny = 3.14\nname = \"Alice\"\nis_student = True\n\n字符串\n在上面我们已经初步接触到了字符串，很简单地说，字符串就是… “任何在这双引号之间的文字” 或者 ‘单引号其实和双引号完全一样’  再或者\n’‘’三个引号被用于过于长段的文 字或者是说明，只要三引号不完 你就可以随意换行写下文字’’’"
  },
  {
    "objectID": "Python入门小白教程.html#基础语法和运算符",
    "href": "Python入门小白教程.html#基础语法和运算符",
    "title": "Python基础",
    "section": "基础语法和运算符",
    "text": "基础语法和运算符\n\n常见转义字符：\n\n\n\n转义字符\n描述\n\n\n\n\n‘’\n换行符\n\n\n’\n制表符 空格\n\n\n’\n回车\n\n\n‘\\’\n‘将’\n\n\n‘\"’\n对双引号转义\n\n\n‘'’\n对单引号转义\n\n\n\n\n\n常见运算符\n\n算术运算符（常用语数学运算）\n\n\n\n运算符\n描述\n举例\n\n\n\n\nx+y\n加\n1+2=3\n\n\nx-y\n减\n6-5=1\n\n\nx*y\n乘\n2*3=6\n\n\nx/y\n除\n2/4=0.5\n\n\nx//y\n整除，取整数部分\n2//4=0\n\n\nx%y\n取余\n15%4=3\n\n\n**\n幂运算\n2**3=8 二的三次方\n\n\n\n\n\n比较运算符（常用语控制结构判断）\n\n\n\n运算符\n描述\n\n\n\n\n&lt;\n小于\n\n\n&lt;=\n小于等于\n\n\n&gt;\n大于\n\n\n&gt;=\n大于等于\n\n\n==\n等于\n\n\n!=\n不等于\n\n\nis\n判断两个标识符是不是引用自一个对象\n\n\nis not\n判断两个标识符是不是引用自不同对象\n\n\n\n\n\n逻辑运算符（常用于逻辑判断）\n● and or not (与 或 非)\n\n\n\n\n\n\n\n\n运算符\n描述\n备注\n\n\n\n\nx and y\nif x is false, then x,else y\nxy都为True,结果为True；否则为False\n\n\nx or y\nif x is false, then y，else x\nxy都为False,结果为False；否则为True\n\n\nnot x\nif x is false,then True，else False\nx为True时，值为False；x为False时，值为True\n\n\n\nx = 0 \ny = 2\n\nprint(x and y)  #只要x的布尔值为true，那就取y的值，如果x为false，就取x的值\n\nprint(x or y)   #只要x的布尔值为false，那就取y的值，如果x为true，就取x的值\n\nprint(not x)   #非就是取反\n\n\n位运算符\n\n\n\n运算符\n描述\n备注\n\n\n\n\n&\n与\n两个二进制的位数都是1，则结果为1，否则为0\n\n\n|\n或\n两个二进制的位数只要有一个为去，结果就为1，否则为0\n\n\n^\n异或\n两个二进制的位数都相同就为1，否则为0\n\n\n~\n取反\n就是对单个二进制数进行取反\n\n\n&lt;&lt;\n左移\n高位丢弃，低位补0\n\n\n&gt;&gt;\n右移\n低位丢弃，高位补0\n\n\n\n\n\n赋值运算符（常用于变量赋值）\n\n\n\n运算符\n描述\n\n\n\n\n=\n赋值\n\n\n+=\n加等,自增 number += 1 &lt;==&gt; number = number+1\n\n\n*=\n乘等\n\n\n%=\n余等\n\n\n-=\n减等，自检\n\n\n/=\n除等\n\n\n//=\n取整等\n\n\n**=\n幂等\n\n\n\n\n\n成员运算符（常用语条件判断）\n\n\n\n运算符\n描述\n\n\n\n\nin\n如果在指定的序列中找到值返回True，否则返回False。\n\n\nnot in\n如果在指定的序列中没找到值返回True，否则返回False。\n\n\n\n举例：\nprint(\"o\" in \"hello\")                \n\n&gt;&gt;&gt;True\n\nprint(\"o\" not in \"hello\")         \n\n&gt;&gt;&gt;False"
  },
  {
    "objectID": "Python入门小白教程.html#常用函数",
    "href": "Python入门小白教程.html#常用函数",
    "title": "Python基础",
    "section": "常用函数",
    "text": "常用函数\n\n输出（print）\n输出：print()函数将括号内的字符串显示在屏幕上。\n方法：print(value,sep=” “,end=”“,file=None)\nvalue：输出的内容\nsep：输出字符的间隔，默认空字符串\nend：输出下一行格式，默认换行\nfile：指定写入文件流，将print输出写入到文件中，默认None\nprint('Hello world!')\n\nprint('What is your name?') # ask for their name\n备注：在写函数名时，末尾的左右括号表明它是一个函数的名字。引号没有打印在屏幕上。它们只是表示字符串的起止，不是字符串的一部分。\n\n\n输入（input）\n程序接受用户的输入参数，将该输入参数保存下来做进一步的处理，默认的输入参数类型为字符串类型。\n函数等待用户在键盘上输入一些文本，并按下回车键。\n语法：input（value）\nvalue：输入的提示信息，可以为空\n示例：\nprint(input())\n\nprint(input(\"请输入用户名:\"))\n\nusername = input(\":\")\n\nprint(username)\n\n\nlen()函数\n你可以向 len()函数传递一个字符串（或包含字符串的变量），然后该函数求值为一个整型值，即字符串中字符的个数。\n\n\nstr()、int()和 float()函数\nstr()、int()和 float()函数将分别求值为传入值的字符串、整数和浮点数形式。\n请尝试用这些函数在交互式环境中转换一些值，看看会发生什么。\n&gt;&gt;&gt; str(0)\n\n'0'\n\n&gt;&gt;&gt; str(-3.14)\n\n'-3.14'\n\n&gt;&gt;&gt; int('42')\n\n42\n\n&gt;&gt;&gt; int('-99')\n\n-99\n\n&gt;&gt;&gt; int(1.25)\n\n1 \n\n&gt;&gt;&gt; int(1.99)\n\n1 \n\n&gt;&gt;&gt; float('3.14')\n\n3.14\n\n&gt;&gt;&gt; float(10)\n\n10.0"
  },
  {
    "objectID": "Python入门小白教程.html#其他常见函数",
    "href": "Python入门小白教程.html#其他常见函数",
    "title": "Python基础",
    "section": "其他常见函数：",
    "text": "其他常见函数：\n\n\n\n\n\n\n\n函数\n描述\n\n\n\n\ncount(str, beg= 0,end=len(string))\n返回 str 在 string 里面出现的次数，如果 beg或者 end 指定则返回指定范围内 str 出现的次数\n\n\ncapitalize()\n将字符串的第一个字符转换为大写(同title()方法)\n\n\ncenter(width, fillchar)\n返回一个指定的宽度 width 居中的字符串，fillchar 为填充的字符，默认为空格。\n\n\nfind(str, beg=0 end=len(string))\n检测 str 是否包含在字符串中 中，如果 beg 和end 指定范围，则检查是否包含在指定范围内，如果是返回开始的索引值，否则返回-1\n\n\nreplace(old, new [, max])\n把 将字符串中的 str1 替换成 str2,如果 max 指定，则替换不超过 max 次。\n\n\nsplit(str=““, num=string.count(str))\n以 str 为分隔符截取字符串，如果 num 有指定值，则仅截取 num 个子字符串\n\n\nindex(str, beg=0, end=len(string))\n跟find()方法一样，只不过如果str不在字符串中会报一个异常\n\n\nisalnum()\n如果字符串至少有一个字符并且所有字符都是字母或数字则返回 True,否则返回 False\n\n\nisalpha()\n如果字符串至少有一个字符并且所有字符都是字母则返回True, 否则返回False\n\n\nisdigit()\n如果字符串只包含数字则返回 True 否则返回 False\n\n\nislower()\n如果字符串中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是小写，则返回 True，否则返回 False\n\n\nisupper()\n如果字符串中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是大写，则返回 True，否则返回 False\n\n\nisspace()\n如果字符串中只包含空格，则返回 True，否则返回 False.\n\n\nistitle()\n如果字符串是标题化的(见 title())则返回 True，否则返回 False\n\n\nlower()\n转换字符串中所有大写字符为小写。\n\n\nupper()\n转换字符串中所有小写字符为大写。\n\n\nmax(str)\n返回字符串 str 中最大的字母。\n\n\nmin(str)\n返回字符串 str 中最小的字母。\n\n\nstartswith(str, beg=0,end=len(string))\n检查字符串是否是以 obj 开头，是则返回 True，否则返回 False。如果beg 和 end 指定值，则在指定范围内检查。\n\n\nstrip()\n取出字符串的前后空格"
  },
  {
    "objectID": "Python入门小白教程.html#内建函数",
    "href": "Python入门小白教程.html#内建函数",
    "title": "Python基础",
    "section": "内建函数",
    "text": "内建函数"
  },
  {
    "objectID": "Python入门小白教程.html#定义函数",
    "href": "Python入门小白教程.html#定义函数",
    "title": "Python基础",
    "section": "定义函数",
    "text": "定义函数\n在程序中需要反复执行的某些代码，可以将他们用函数封装起来。\n函数是一种将一组语句组织在一起的机制，可以多次调用。函数可以接收参数，并返回结果。\ndef greet_user(): \n\n\"\"\"显示简单的问候语\"\"\" \n\n    print(\"Hello!\") \n\ngreet_user() \n用 def 语句创建函数时，可以用 return 语句指定应该返回什么值。例如：\ndef greet(name):\n    return \"你好, \" + name + \"!\"\n\nname = input(\"请输入你的名字：\")\nprint(greet(name))\n\n\n向函数传递信息\n只需稍作修改，就可以让函数greet_user()不仅向用户显示Hello!，还将用户的名字用作抬头。为此，可在函数定义def greet_user()的括号内添加username。通过在这里添加username，就可让函数接受你给username指定的任何值。现在，这个函数要求你调用它时给username指定一个值。调用greet_user()时，可将一个名字传递给它，如下所示：\ndef greet_user(username): \n\n \"\"\"显示简单的问候语\"\"\"\n\n    print(\"Hello, \" + username.title() + \"!\") \n\n\ngreet_user('jesse') \n代码greet_user(‘jesse’)调用函数greet_user()，并向它提供执行print语句所需的信息。这个函数接受你传递给它的名字，并向这个人发出问候：\nHello, Jesse! \n同样，greet_user(‘sarah’)调用函数greet_user()并向它传递’sarah’，打印Hello, Sarah!。你可以根据需要调用函数greet_user()任意次，调用时无论传入什么样的名字，都会生成相应的输出。\n\n\n形式参数和实际参数\n由于定义函教时的参教不是实际教据，会在调用函教时传递给它们实际教据，所以我们称定义函教时的参教为形式参 数，简称形参；称调用函教时传递的实际教据为实际参散，简称实参。你可以将形参理解为在函数中定义的变量。\n前面定义函数greet_user()时，要求给变量username指定一个值。调用这个函数并提供这种信息（人名）时，它将打印相应的问候语。\n在函数greet_user()的定义中，变量username是一个形参——函数完成其工作所需的一项信息。在代码greet_user(‘jesse’)中值’jesse’是一个实参。实参是调用函数时传递给函数的信息。我们调用函数时，将要让函数使用的信息放在括号内。在greet_user(‘jesse’)中，将实参’jesse’传递给了函数greet_user()，这个值被存储在形参username中。\n\n\n返回值\n函数并非总是直接显示输出，相反，它可以处理一些数据，并返回一个或一组值。函数返回的值被称为返回值。在函数中，可使用return语句将值返回到调用函数的代码行。返回值让你能够将程序的大部分繁重工作移到函数中去完成，从而简化主程序。\n\n\n函数中变量的作用域\n变量可以在模块中创建，作用域（变量的有效范围）是整个模块，被称为全局变量。变量也可以在函数中创建，在默认情况下作用域是整\n个函数，被称为局部变量。"
  },
  {
    "objectID": "Python入门小白教程.html#调用函数",
    "href": "Python入门小白教程.html#调用函数",
    "title": "Python基础",
    "section": "调用函数",
    "text": "调用函数\n在定义好函数后，就可以调用函数了。在调用函数时传递的实参与定义函数时的形参顺序一致，这是调用函数的基本形式。"
  },
  {
    "objectID": "Python入门小白教程.html#布尔值",
    "href": "Python入门小白教程.html#布尔值",
    "title": "Python基础",
    "section": "布尔值",
    "text": "布尔值\n“布尔”数据类型只有两种值：True 和 False。\nBoolean（布尔）的首字母大写，因为这个数据类型是根据数学家 George Boole 命名的。在作为 Python 代码输入时，布尔值 True 和 False不像字符串，两边没有引号，它们总是以大写字母 T 或 F 开头，后面的字母小写。"
  },
  {
    "objectID": "Python入门小白教程.html#条件",
    "href": "Python入门小白教程.html#条件",
    "title": "Python基础",
    "section": "条件",
    "text": "条件\n布尔表达式可以看成是条件，它和表达式是一回事。“条件”只是在控制流语句的上下文中更具体的名称。条件总是求值为一个布尔值，True 或 False。控制流语句根据条件是 True 还是 False，来决定做什么。几乎所有的控制流语句都使用条件。"
  },
  {
    "objectID": "Python入门小白教程.html#代码块",
    "href": "Python入门小白教程.html#代码块",
    "title": "Python基础",
    "section": "代码块",
    "text": "代码块\n一些代码行可以作为一组，放在“代码块”中。可以根据代码行的缩进，知道代码块的开始和结束。代码块有 3 条规则。\n1．缩进增加时，代码块开始。\n2．代码块可以包含其他代码块。\n3．缩进减少为零，或减少为外面包围代码块的缩进，代码块就结束了。看一些有缩进的代码，更容易理解代码块。"
  },
  {
    "objectID": "Python入门小白教程.html#程序执行",
    "href": "Python入门小白教程.html#程序执行",
    "title": "Python基础",
    "section": "程序执行",
    "text": "程序执行\nPython 开始执行程序顶部的指令，然后一条接一条往下执行。“程序执行”（或简称“执行”）这一术语是指当前被执行的指令。\n如果将源代码打印在纸上，在它执行时用手指指着每一行代码，你可以认为手指就是程序执行。\n但是，并非所有的程序都是从上至下简单地执行。如果用手指追踪一个带有控制流语句的程序，可能会发现手指会根据条件跳过源代码，有可能跳过整个子句。"
  },
  {
    "objectID": "Python入门小白教程.html#控制流语句",
    "href": "Python入门小白教程.html#控制流语句",
    "title": "Python基础",
    "section": "控制流语句",
    "text": "控制流语句\n\n条件语句(if)\n用一句话概括 if……else 结构的作用：如果..条件是成立的，就做..；反之，就做…所谓条件(condition)指的是成立的条件，即是返回值为True的布尔表达式。\nif\nif语句是：“如果条件为真，执行子句中的代码。”\nelse\nelse语句是：“如果条件为真，执行这段代码。否则，执行那段代码。”\nelif\n虽然只有 if 或 else 子句会被执行，但有时候可能你希望，“许多”可能的子句中有一个被执行。elif 语句是“否则如果”，总是跟在 if 或另一条 elif 语句后面。它提供了另一个条件，仅在前面的条件为 False 时才检查该条件。\nelif语句是：“如果第一个条件为真，做这个。否则，如果第二个条件为真，做那个。否则，做另外的事。“\n例如：\nage = int(input(\"请输入你的年龄：\"))\n\nif age &lt; 18:\n    print(\"你还未成年。\")\nelif age &lt; 60:\n    print(\"你已经成年了。\")\nelse:\n    print(\"你已经退休了。\")\n我们结合函数的概念来创建这样一个函数,逐行分析它的原理:\n\ndef  account_ login():\n          password  =  input( 'Password:' )\n          if  password  ==   '12345' :\n                  print( 'Login  success!' )\n          else :\n                  print( 'Wrong  password  or  invalid  input!' )\n                  account_ login()\naccount_login()\n第1行:定义函数,并不需要参数;\n第2行:使用input获得用户输入的字符串并储存在变量password中;\n第3、4行:设置条件,如果用户输入的字符串和预设的密码12345相等时,就执 行打印文本’Login success!’;\n第5、6行:反之,一切不等于预设密码的输入结果,全部会执行打印错误提示, 并且再次调用函数,让用户再次输入密码;\n第7行:运行函数。\n第8行:调用函数\n\n\n循环语句(Loop)\n循环语句用于重复执行某个代码块。\nwhile循环\n利用 while 语句，可以让一个代码块一遍又一遍的执行。只要 while 语句的条件为 True，while 子句中的代码就会执行。\nwhile 语句看起来和 if 语句类似。不同之处是它们的行为。if 子句结束时，程序继续执行 if 语句之后的语句。但在 while 子句结束时，程序执行跳回到 while 语句开始处。\n让我们来看一个 if 语句和一个 while 循环。它们使用同样的条件，并基于该条件做出同样的动作。下面是 if 语句的代码：\na = 0\n\nif a &lt; 5:\n\n   print('Hello, world.')\n\n   a = a + 1\n下面是 while 语句的代码：\na = 0\n\nwhile a &lt; 5:\n\n      print('Hello, world.')\n\n      a = a + 1\n这些语句类似，if 和 while 都检查 a 的值，如果它小于５，就打印一条消息。但如果运行这两段代码，它们各自的表现非常不同。对于 if 语句，输出就是”Hello, world.”。但对于 while 语句，输出是”Hello, world.”重复了 5 次！\n带有 if 语句的代码检查条件，如果条件为 True，就打印一次”Hello, world.”。带有 while 循环的代码则不同，会打印 5 次。打印 5 次后停下来是因为，在每次循环迭代末尾，spam 中的整数都增加 1。这意味着循环将执行 5 次，然后 spam &lt; 5 变为False。\n在 while 循环中，条件总是在每次“迭代”开始时检查（也就是每次循环执行时）。如果条件为 True，子句就会执行，然后，再次检查条件。当条件第一次为 False时，while 子句就跳过。\n\n\nfor 循环和 range()函数\n在条件为 True 时，while 循环就会继续循环（这是它的名称的由来）。但如果你想让一个代码块执行固定次数，该怎么办？可以通过 for 循环语句和 range()函数来实现。\nfor循环和while的相同点在于都能循环做一件重复的事情,不同点在于for循环会在可迭代 的序列被穷尽的时候停止,while则是在条件不成立的时候停止,因此while的作用概 括成一句话就是: 只要…条件成立,就一直做…。\n例如：\nfor i in range(5):\n    print(i)\n\ncount = 0\nwhile count &lt; 5:\n    print(count)\n    count += 1\n提示：只要能够使用for循环，就不要使用while循环。\n无限循环：(在这里先行提醒一下,一定要记得及时停止运行代码!)\nwhile   1  &lt;   3 :\nprint( '1 is smaller than 3')\n在while后面的表达式是永远成立的,所以print会一直进行下去直至你的CPU过热。这种条件永远为True的循环,我们称之为死循环(Infinite Loop)。\n\n\n跳转语句\nbreak 语句\n但如果while循环不能像for循环那样,在集合被穷尽之后停下来,我们又怎么 样才能控制while循环呢？\n方法：\n让执行提前跳出 while 循环子句。如果执行遇到 break 语句，就会马上退出 while 循环子句。在代码中，break 语句仅包含 break 关键字。例如:\ncount  =  0\nwhile True :\n     print( 'Repeat this line !' )\n     count = count  +  1\n     if count == 5 :\n         break\ncontinue 语句\n像 break 语句一样，continue 语句用于循环内部。如果程序执行遇到 continue语句，就会马上跳回到循环开始处，重新对循环条件求值（这也是执行到达循环末尾时发生的事情）。"
  },
  {
    "objectID": "Python入门小白教程.html#列表list",
    "href": "Python入门小白教程.html#列表list",
    "title": "Python基础",
    "section": "列表（list）",
    "text": "列表（list）\n列表（list）由一系列按特定顺序排列的元素组成，是有序的元素集合，可以添加、删除和修改元素。\n你可以创建包含字母表中所有字母、数字0~9或所有家庭成员姓名的列表；也可以将任何东西加入列表中，其中的元素之间可以没有任何关系。\n鉴于列表通常包含多个元素，给列表指定一个表示复数的名称（如letters、digits或names）是个不错的主意。\n在Python中，用方括号（[]）来表示列表，并用逗号来分隔其中的元素。\n访问列表元素\n列表是有序集合，因此要访问列表的任何元素，只需将该元素的位置或索引告诉Python即可。\n要访问列表元素，可指出列表的名称，再指出元素的索引，并将其放在方括号内。\n索引从 0 而不是 1 开始\n在Python中，第一个列表元素的索引为0，而不是1。在大多数编程语言中都是如此，这与列表操作的底层实现相关。\n使用列表中的各个值\n可像使用其他变量一样使用列表中的各个值。例如，你可以使用拼接根据列表中的值来创建消息。\n\n修改、添加和删除元素\n你创建的大多数列表都将是动态的，这意味着列表创建后，将随着程序的运行增删元素。\n修改列表元素\n修改列表元素的语法与访问列表元素的语法类似。要修改列表元素，可指定列表名和要修改的元素的索引，再指定该元素的新值。\n在列表中添加元素\n在列表中添加新元素时，最简单的方式是将元素附加到列表末尾。给列表附加元素时，它将添加到列表末尾。\n在列表中插入元素\n使用方法insert()可在列表的任何位置添加新元素。为此，你需要指定新元素的索引和值。\n从列表中删除元素\n你经常需要从列表中删除一个或多个元素，可以根据位置或值来删除列表中的元素。\n使用del语句删除元素\n如果知道要删除的元素在列表中的位置，可使用del语句。\n使用方法pop()删除元素\n方法pop()可删除列表末尾的元素，并让你能够接着使用它。术语弹出（pop）源自这样的类\n比：列表就像一个栈，而删除列表末尾的元素相当于弹出栈顶元素。\n弹出列表中任何位置处的元素\n实际上，你可以使用pop()来删除列表中任何位置的元素，只需在括号中指定要删除的元素的索引即可。别忘了，每当你使用pop()时，被弹出的元素就不再在列表中了。\n如果你不确定该使用del语句还是pop()方法，下面是一个简单的判断标准：如果你要从列表中删除一个元素，且不再以任何方式使用它，就使用del语句；如果你要在删除元素后还能继续使用它，就使用方法pop()。\n根据值删除元素\n有时候，你不知道要从列表中删除的值所处的位置。如果你只知道要删除的元素的值，可使用方法remove()。\n\n\n组织列表\n在你创建的列表中，元素的排列顺序常常是无法预测的，因为你并非总能控制用户提供数据的顺序。这虽然在大多数情况下都是不可避免的，但你经常需要以特定的顺序呈现信息。有时候，你希望保留列表元素最初的排列顺序，而有时候又需要调整排列顺序。Python提供了很多组织列表的方式，可根据具体情况选用。\n使用方法 sort()对列表进行永久性排序\nPython方法sort()让你能够较为轻松地对列表进行排序。假设你有一个汽车列表，并要让其中的汽车按字母顺序排列。为简化这项任务，我们假设该列表中的所有值都是小写的。\n方法sort()永久性地修改了列表元素的排列顺序。\n你还可以按与字母顺序相反的顺序排列列表元素，为此，只需向sort()方法传递参数reverse=True。\n使用函数 sorted()对列表进行临时排序\n要保留列表元素原来的排列顺序，同时以特定的顺序呈现它们，可使用函数sorted()。函数sorted()让你能够按特定顺序显示列表元素，同时不影响它们在列表中的原始排列顺序。\n我们首先按原始顺序打印列表，再按字母顺序显示该列表。以特定顺序显示列表后，我们进行核实，确认列表元素的排列顺序与以前相同。\n注意，调用函数sorted()后，列表元素的排列顺序并没有变。如果你要按与字母顺序相反的顺序显示列表，也可向函数sorted()传递参数reverse=True。\n倒着打印列表\n要反转列表元素的排列顺序，可使用方法reverse()。\n注意，reverse()不是指按与字母顺序相反的顺序排列列表元素，而只是反转列表元素的排列顺序：\n方法reverse()永久性地修改列表元素的排列顺序，但可随时恢复到原来的排列顺序，为此只需对列表再次调用reverse()即可。\n确定列表的长度\n使用函数len()可快速获悉列表的长度。\n注意:Python计算列表元素数时从1开始，因此确定列表长度时，你应该不会遇到差一错误。"
  },
  {
    "objectID": "Python入门小白教程.html#元组tuple",
    "href": "Python入门小白教程.html#元组tuple",
    "title": "Python基础",
    "section": "元组（tuple）",
    "text": "元组（tuple）\n元组是有序的元素集合，但是不可修改。\n列表非常适合用于存储在程序运行期间可能变化的数据集。列表是可以修改的，这对处理网站的用户列表或游戏中的角色列表至关重要。然而，有时候你需要创建一系列不可修改的元素，元组可以满足这种需求。Python将不能修改的值称为不可变的，而不可变的列表被称为元组。\n定义元组\n元组看起来犹如列表，但使用圆括号而不是方括号来标识。定义元组后，就可以使用索引来访问其元素，就像访问列表元素一样。\n当我们尝试用代码试图修改元组的元素时，Python会报告错误。\n修改元组变量\n虽然不能修改元组的元素，但可以给存储元组的变量赋值。\n相比于列表，元组是更简单的数据结构。如果需要存储的一组值在程序的整个生命周期内都不变，可使用元组。"
  },
  {
    "objectID": "Python入门小白教程.html#集合set",
    "href": "Python入门小白教程.html#集合set",
    "title": "Python基础",
    "section": "集合（set）",
    "text": "集合（set）\n集合(set)是一种可迭代的、无序的、不能包含重复元素的容器类型的数据。\n创建集合\n我们可以通过以下两种方式创建集合。\n\nset(iterable)函数：参数iterable是可迭代对象（字符串、列表、 元组、集合和字典等)。\n{元素1，元素2，元素3，…}：指定具体的集合元素，元素之间以 逗号分隔。对于集合元素，需要使用大括号括起来。\n\n修改集合\n修改集合类似于修改列表，可以向其中插入和删除元素。修改可变集合有如右所示的常用方法。\nadd（elem）：添加元素，如果元素已经存在，则不能添加，不会抛出错误。\nremove（elem）：删除元素，如果元素不存在，则抛出错误。\nclear（）：清除集合。"
  },
  {
    "objectID": "Python入门小白教程.html#字典dict",
    "href": "Python入门小白教程.html#字典dict",
    "title": "Python基础",
    "section": "字典（dict）",
    "text": "字典（dict）\n字典（dict）：键值对集合，通过键来查找对应的值。\n字典是可迭代的、通过键（key）来访问元素的可变的容器类型的数据。\n字典由两部分视图构成：键视图和值视图。键视图不能包含重复的元素，值视图能。在键视图中，键和值是成对出现的。\n创建字典\n我们可以通过以下两种方法创建字典。\n\ndict（）函数。2 {key1：value1，key2：value2，…，key_n：value_n}：指定具体的字典键值对，键值对之间以逗号分隔，最后用大括号括起来。\n\n修改字典\n字典可以被修改，但都是针对键和值同时操作的，对字典的修改包括添加、替换和删除。\n访问字典视图\n我们可以通过字典中的三种方法访问字典视图。\nitems（）：返回字典的所有键值对视图。\nkeys（）：返回字典键视图。\nvalues（）：返回字典值视图。"
  },
  {
    "objectID": "Python入门小白教程.html#举例说明",
    "href": "Python入门小白教程.html#举例说明",
    "title": "Python基础",
    "section": "举例说明",
    "text": "举例说明\n# 列表\nfruits = [\"apple\", \"banana\", \"cherry\"]\nfruits.append(\"orange\")\nprint(fruits)\n\n# 元组\ncoordinates = (1, 2, 3)\nprint(coordinates)\n\n# 集合\nunique_numbers = {1, 2, 3, 2, 1}\nprint(unique_numbers)\n\n# 字典\nperson = {\"name\": \"Alice\", \"age\": 30}\nprint(person[\"name\"])"
  },
  {
    "objectID": "test.html",
    "href": "test.html",
    "title": "5  安装",
    "section": "",
    "text": "5.0.1 使用Anaconda安装\n对于没有经验的小白来说，直接上手用代码来安装各种包可能有点困难，而Anaconda作为一个发型平台，可以非常轻松的安装除了Pandas之外的各种Python包（IPython、NumPy、 Matplotlib等）\n详细的Anaconda安装步骤可以观看我的B站视频，或者官方文档\n\nconda install pandas\n\n\n\n\n\n\n\n5.0.2 使用PyPI中的 pip 安装\n\npip install pandas\n\n\n\n\n\n\n\nTip\n\n\n\n一般来说这是python自带的安装方式，但有时候你的虚拟环境没有或者服务器里的需要更新，可以参考文档\n\n\n\nLinuxMacOSWindows\n\n\n$ python -m ensurepip --upgrade\n\n\n$ python -m ensurepip --upgrade\n\n\nC:&gt; py -m ensurepip --upgrade"
  },
  {
    "objectID": "快速入门.html#用-pandas-处理什么样的数据",
    "href": "快速入门.html#用-pandas-处理什么样的数据",
    "title": "2  快速入门",
    "section": "用 Pandas 处理什么样的数据？",
    "text": "用 Pandas 处理什么样的数据？\n大家在前面可能已经学习了python的用法，但是那些各种各样的数据该怎么用python来处理呢？或者说python跟其他像 SQL、JAVA或者R这些语言，在数据处理方面又有什么不同呢？\n首先这个Pandas是Python的一个库，专门用于数据处理和分析。它提供了高性能、灵活和易于使用的数据结构，包括数据导入、清洗、转换、分析和可视化，是非常适用于处理结构化和表格化的数据。pandas在数据科学、金融分析、商业智能等领域得到广泛应用。对于不同的数据结构下面进行举例（附上相关案例链接）\n\n\n\n\n\n\nTip\n\n\n\n一个免费的Python在线编辑器，别等啦！快打开来试试✌️\n\n\n\n2.0.1 表格数据\nPandas最常用于处理表格数据，例如CSV文件、Excel文件、数据库查询结果等。你可以使用Pandas读取这些数据，并对其进行各种操作，如过滤、排序、合并、聚合、计算统计指标等。\n当使用Pandas处理表格数据时，你可以使用DataFrame这个主要的数据结构。DataFrame是一个二维的标记数组，类似于电子表格或SQL表。\n\n# 1. 导入pandas包\nimport pandas as pd\n\n# 2. 假设data数据\ndata = {\n  \"calories\": [420, 380, 390],\n  \"duration\": [50, 40, 45]\n}\n\n# 3. 假设df，然后调用pd(pandas包)，将数据转换为DataFrame格式\ndf = pd.DataFrame(data)\n\n# 4. 打印df\nprint(df) \n\n\n   calories  duration\n0       420        50\n1       380        40\n2       390        45\n\n\n\n\n2.0.2 时间序列数据\nPandas提供了强大的时间序列功能，可以处理日期和时间相关的数据。你可以使用Pandas对时间序列数据进行重采样、滚动计算、时间窗口分析、时间序列绘图等操作。\n\nimport pandas as pd\n\ndate = pd.to_datetime(\"13th of June, 2023\")\n\nprint(date) \n\n2023-06-13 00:00:00\n\n\n可以使用DateTimeIndex和TimedeltaIndex来表示时间索引和时间间隔。\n\nimport pandas as pd\n# 创建一个包含日期范围的时间索引\ndate_range = pd.date_range(start='2023-01-01', end='2023-01-10', freq='D')\n\n# 创建一个DataFrame，并使用时间索引\ndata = pd.DataFrame({'Value': [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]}, index=date_range)\n\n# 查看数据的前几行\nprint(data.head())\n\n\n            Value\n2023-01-01     10\n2023-01-02     20\n2023-01-03     30\n2023-01-04     40\n2023-01-05     50\n\n\n\n\n# 通过日期索引获取某一天的数据\nday_data = data.loc['2023-01-05']\n\n# 通过日期范围索引获取一段时间内的数据\nrange_data = data.loc['2023-01-03':'2023-01-07']\n\n# 使用日期的年、月、日等属性进行切片\nyear_data = data[data.index.year == 2023]\nmonth_data = data[data.index.month == 1]\nday_data = data[data.index.day == 5]\n\n# 将数据按周进行重采样，计算每周的平均值\nweekly_data = data.resample('W').mean()\n\n# 将数据按月进行重采样，计算每月的总和\nmonthly_data = data.resample('M').sum()\n\n\n\n2.0.3 缺失数据处理\nPandas提供了灵活的方法来处理缺失数据。你可以使用Pandas来检测和处理缺失值，填充缺失数据，或者根据缺失值进行数据筛选和计算。\n\n# 创建带有缺失数据的DataFrame\ndata = pd.DataFrame({'A': [1, 2, None, 4, 5],\n                     'B': [None, 2, 3, None, 6],\n\n                     'C': [1, 2, 3, 4, 5]})\n\n\n# 检测每个单元格是否为缺失值\nmissing_values = data.isnull()\n\n# 统计每列的缺失值数量\nmissing_counts = data.isnull().sum()\n\n# 统计整个DataFrame的缺失值数量\ntotal_missing_count = data.isnull().sum().sum()\n\n\n# 删除包含缺失值的行\ndata_dropna = data.dropna()\n\n# 删除全部为缺失值的列\ndata_dropna_cols = data.dropna(axis=1, how='all')\n\n# 填充缺失值为指定的常数\ndata_fillna = data.fillna(0)\n\n# 使用缺失值前面的值进行前向填充\ndata_ffill = data.fillna(method='ffill')\n\n# 使用缺失值后面的值进行后向填充\ndata_bfill = data.fillna(method='bfill')\n\n\n\n2.0.4 数据清洗和转换\nPandas可以用于数据清洗和转换的各种操作。你可以使用Pandas对数据进行重塑、合并、分组、变形等，以满足特定的分析需求。\n\n# 创建原始数据\ndata = pd.DataFrame({'Name': ['John', 'Emily', 'Michael', 'Emma'],\n                     'Age': [25, 30, 35, 28],\n                     'Gender': ['M', 'F', 'M', 'F'],\n                     'Salary': ['$5000', '$6000', '$4500', '$7000']})\n\n\n# 去除重复的行\ndata_cleaned = data.drop_duplicates()\n\n# 去除列中的空格\ndata_cleaned['Name'] = data_cleaned['Name'].str.strip()\n\n# 将字符串列转换为数字列\ndata_cleaned['Salary'] = data_cleaned['Salary'].str.replace('$', '').astype(int)\n\n# 删除缺失值所在的行\ndata_cleaned = data_cleaned.dropna()\n\n\n# 将字符串转换为日期时间类型\ndata_cleaned['Date'] = pd.to_datetime('2022-01-01')\n\n# 将分类变量转换为数值变量\ndata_cleaned['Gender'] = data_cleaned['Gender'].map({'M': 0, 'F': 1})\n\n# 创建新的衍生变量\ndata_cleaned['Age_group'] = pd.cut(data_cleaned['Age'], bins=[0, 20, 30, 40, 50], labels=['&lt;20', '20-30', '30-40', '40+'])\n\n\n\n\n\n\n\nTip\n\n\n\n数据的清洗和转换是pandas最常使用的功能，之后我们会逐步拆解，进行详细说明\n\n\n\n\n2.0.5 数据可视化\nPandas集成了Matplotlib库，可以通过简单的接口生成各种统计图表和可视化图形，以便更好地理解和呈现数据。\n\n# 创建数据\ndata = pd.DataFrame({'Month': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'],\n                     'Sales': [100, 150, 120, 200, 180, 250],\n                     'Expenses': [80, 90, 100, 85, 95, 110]})\n\n\n# 折线图\ndata.plot(x='Month', y='Sales', kind='line')\n\n&lt;Axes: xlabel='Month'&gt;\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n虽然pandas也可以画图，但是还是静态图形，之后我们会详细说明更加简洁和酷炫的可视化库 Plotly库\n\n\n\n\n2.0.6 数据建模和分析\nPandas还支持数据建模和分析的操作。你可以使用Pandas进行数据建模、特征工程、数据预处理等，然后将数据传递给机器学习库（如Scikit-learn）进行模型训练和预测。网上看到不错的数据预测案例"
  },
  {
    "objectID": "快速入门.html#pandas-如何导入导出表格数据xslcsvtxt",
    "href": "快速入门.html#pandas-如何导入导出表格数据xslcsvtxt",
    "title": "2  快速入门",
    "section": "Pandas 如何导入/导出表格数据(xsl,csv,txt…)",
    "text": "Pandas 如何导入/导出表格数据(xsl,csv,txt…)\n\n获取数据data.csv下载地址，将csv文件下载到本地。\n\n# 导入pandas包\nimport pandas as pd\n\n# 注意csv文件路径\ndf = pd.read_csv('./example_data/data.csv') \n\n# 打印前五个\nprint(df.head()) \n\n   Duration  Pulse  Maxpulse  Calories\n0        60    110       130     409.1\n1        60    117       145     479.0\n2        60    103       135     340.0\n3        45    109       175     282.4\n4        45    117       148     406.0\n\n\n或者直接读取线上csv数据\n\ndf = pd.read_csv('https://www.w3schools.com/python/pandas/data.csv.txt')\n\n# 打印前五个\nprint(df.head()) \n\n   Duration  Pulse  Maxpulse  Calories\n0        60    110       130     409.1\n1        60    117       145     479.0\n2        60    103       135     340.0\n3        45    109       175     282.4\n4        45    117       148     406.0"
  },
  {
    "objectID": "安装.html",
    "href": "安装.html",
    "title": "1  Pandas安装",
    "section": "",
    "text": "使用Anaconda安装\n对于没有经验的小白来说，直接上手用代码来安装各种包可能有点困难，而Anaconda作为一个发型平台，可以非常轻松的安装除了Pandas之外的各种Python包（IPython、NumPy、 Matplotlib等）\n详细的Anaconda安装步骤可以观看我的B站视频，或者官方文档\n\nconda install pandas\n\n\n\n\n\n\n\n\n\n使用PyPI中的 pip 安装\n\npip install pandas\n\n\n\n\n\n\n\nTip\n\n\n\n一般来说这是python自带的安装方式，但有时候你的虚拟环境没有或者服务器里的需要更新，可以参考文档\n\n\n\nLinuxMacOSWindows\n\n\n$ python -m ensurepip --upgrade\n\n\n$ python -m ensurepip --upgrade\n\n\nC:&gt; py -m ensurepip --upgrade"
  },
  {
    "objectID": "快速入门.html#pandas-处理什么样的数据",
    "href": "快速入门.html#pandas-处理什么样的数据",
    "title": "2  快速入门",
    "section": "Pandas 处理什么样的数据？",
    "text": "Pandas 处理什么样的数据？\n大家在前面可能已经学习了python的用法，但是那些各种各样的数据该怎么用python来处理呢？或者说python跟其他像 SQL、JAVA或者R这些语言，在数据处理方面又有什么不同呢？\n首先这个Pandas是Python的一个库，专门用于数据处理和分析。它提供了高性能、灵活和易于使用的数据结构，包括数据导入、清洗、转换、分析和可视化，是非常适用于处理结构化和表格化的数据。pandas在数据科学、金融分析、商业智能等领域得到广泛应用。对于不同的数据结构下面进行举例（附上相关案例链接）\n\n\n\n\n\n\nTip\n\n\n\n一个免费的Python在线编辑器，别等啦！快打开来试试✌️\n\n\n\n2.0.1 表格数据\nPandas最常用于处理表格数据，例如CSV文件、Excel文件、数据库查询结果等。你可以使用Pandas读取这些数据，并对其进行各种操作，如过滤、排序、合并、聚合、计算统计指标等。\n当使用Pandas处理表格数据时，你可以使用DataFrame这个主要的数据结构。DataFrame是一个二维的标记数组，类似于电子表格或SQL表。\n\n\nCode\n# 1. 导入pandas包\nimport pandas as pd\n\n# 2. 假设data数据\ndata = {\n  \"calories\": [420, 380, 390],\n  \"duration\": [50, 40, 45]\n}\n\n# 3. 假设df，然后调用pd(pandas包)，将数据转换为DataFrame格式\ndf = pd.DataFrame(data)\n\n# 4. 打印df\ndf\n\n\n\n\n\n\n\n\n\n\ncalories\nduration\n\n\n\n\n0\n420\n50\n\n\n1\n380\n40\n\n\n2\n390\n45\n\n\n\n\n\n\n\n\n\n2.0.2 时间序列数据\nPandas提供了强大的时间序列功能，可以处理日期和时间相关的数据。你可以使用Pandas对时间序列数据进行重采样、滚动计算、时间窗口分析、时间序列绘图等操作。\n\n\nCode\nimport pandas as pd\n\ndate = pd.to_datetime(\"13th of June, 2023\")\n\nprint(date) \n\n\n2023-06-13 00:00:00\n\n\n可以使用DateTimeIndex和TimedeltaIndex来表示时间索引和时间间隔。\n\n\nCode\nimport pandas as pd\n# 创建一个包含日期范围的时间索引\ndate_range = pd.date_range(start='2023-01-01', end='2023-01-10', freq='D')\n\n# 创建一个DataFrame，并使用时间索引\ndata = pd.DataFrame({'Value': [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]}, index=date_range)\n\n# 查看数据的前几行\ndata.head()\n\n\n\n            Value\n2023-01-01     10\n2023-01-02     20\n2023-01-03     30\n2023-01-04     40\n2023-01-05     50\n\n\n\n\nCode\n\n# 通过日期索引获取某一天的数据\nday_data = data.loc['2023-01-05']\n\n# 通过日期范围索引获取一段时间内的数据\nrange_data = data.loc['2023-01-03':'2023-01-07']\n\n# 使用日期的年、月、日等属性进行切片\nyear_data = data[data.index.year == 2023]\nmonth_data = data[data.index.month == 1]\nday_data = data[data.index.day == 5]\n\n# 将数据按周进行重采样，计算每周的平均值\nweekly_data = data.resample('W').mean()\n\n# 将数据按月进行重采样，计算每月的总和\nmonthly_data = data.resample('M').sum()\n\n\n\n\n2.0.3 缺失数据处理\nPandas提供了灵活的方法来处理缺失数据。你可以使用Pandas来检测和处理缺失值，填充缺失数据，或者根据缺失值进行数据筛选和计算。\n\n\nCode\n# 创建带有缺失数据的DataFrame\ndata = pd.DataFrame({'A': [1, 2, None, 4, 5],\n                     'B': [None, 2, 3, None, 6],\n\n                     'C': [1, 2, 3, 4, 5]})\n\n\n\n\nCode\n# 检测每个单元格是否为缺失值\nmissing_values = data.isnull()\n\n# 统计每列的缺失值数量\nmissing_counts = data.isnull().sum()\n\n# 统计整个DataFrame的缺失值数量\ntotal_missing_count = data.isnull().sum().sum()\n\n\n\n\nCode\n# 删除包含缺失值的行\ndata_dropna = data.dropna()\n\n# 删除全部为缺失值的列\ndata_dropna_cols = data.dropna(axis=1, how='all')\n\n# 填充缺失值为指定的常数\ndata_fillna = data.fillna(0)\n\n# 使用缺失值前面的值进行前向填充\ndata_ffill = data.fillna(method='ffill')\n\n# 使用缺失值后面的值进行后向填充\ndata_bfill = data.fillna(method='bfill')\n\n\n\n\n2.0.4 数据清洗和转换\nPandas可以用于数据清洗和转换的各种操作。你可以使用Pandas对数据进行重塑、合并、分组、变形等，以满足特定的分析需求。\n\n\nCode\n# 创建原始数据\ndata = pd.DataFrame({'Name': ['John', 'Emily', 'Michael', 'Emma'],\n                     'Age': [25, 30, 35, 28],\n                     'Gender': ['M', 'F', 'M', 'F'],\n                     'Salary': ['$5000', '$6000', '$4500', '$7000']})\n\n\n\n\nCode\n# 去除重复的行\ndata_cleaned = data.drop_duplicates()\n\n# 去除列中的空格\ndata_cleaned['Name'] = data_cleaned['Name'].str.strip()\n\n# 将字符串列转换为数字列\ndata_cleaned['Salary'] = data_cleaned['Salary'].str.replace('$', '').astype(int)\n\n# 删除缺失值所在的行\ndata_cleaned = data_cleaned.dropna()\n\n\n\n\nCode\n# 将字符串转换为日期时间类型\ndata_cleaned['Date'] = pd.to_datetime('2022-01-01')\n\n# 将分类变量转换为数值变量\ndata_cleaned['Gender'] = data_cleaned['Gender'].map({'M': 0, 'F': 1})\n\n# 创建新的衍生变量\ndata_cleaned['Age_group'] = pd.cut(data_cleaned['Age'], bins=[0, 20, 30, 40, 50], labels=['&lt;20', '20-30', '30-40', '40+'])\n\n\n\n\n\n\n\n\nTip\n\n\n\n数据的清洗和转换是pandas最常使用的功能，之后我们会逐步拆解，进行详细说明\n\n\n\n\n2.0.5 数据可视化\nPandas集成了Matplotlib库，可以通过简单的接口生成各种统计图表和可视化图形，以便更好地理解和呈现数据。\n\n\nCode\n# 创建数据\ndata = pd.DataFrame({'Month': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'],\n                     'Sales': [100, 150, 120, 200, 180, 250],\n                     'Expenses': [80, 90, 100, 85, 95, 110]})\n\n# 折线图\ndata.plot(x='Month', y='Sales', kind='line')\n\n\n&lt;Axes: xlabel='Month'&gt;\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n虽然pandas也可以画图，但是还是静态图形，之后我们会详细说明更加简洁和酷炫的可视化库 Plotly库\n\n\n\n\n2.0.6 数据建模和分析\nPandas还支持数据建模和分析的操作。你可以使用Pandas进行数据建模、特征工程、数据预处理等，然后将数据传递给机器学习库（如Scikit-learn）进行模型训练和预测。网上看到不错的数据预测案例"
  },
  {
    "objectID": "快速入门.html#如何导入导出表格数据xslcsvtxt",
    "href": "快速入门.html#如何导入导出表格数据xslcsvtxt",
    "title": "2  快速入门",
    "section": "如何导入/导出表格数据(xsl,csv,txt…)",
    "text": "如何导入/导出表格数据(xsl,csv,txt…)\n\n\n2.0.7 读取本地数据\n获取数据data.csv下载地址，将csv文件下载到本地。\n\n\nCode\n# 导入pandas包\nimport pandas as pd\n\n# 注意csv文件路径\ndf = pd.read_csv('./example_data/data.csv') \n\n# 打印前五个\nprint(df.head()) \n\n\n   Duration  Pulse  Maxpulse  Calories\n0        60    110       130     409.1\n1        60    117       145     479.0\n2        60    103       135     340.0\n3        45    109       175     282.4\n4        45    117       148     406.0\n\n\n\n\n2.0.8 读取线上数据\n线上数据地址\n\n\nCode\ndf = pd.read_csv('https://www.w3schools.com/python/pandas/data.csv.txt')\n\n# 打印前五个\nprint(df.head()) \n\n\n   Duration  Pulse  Maxpulse  Calories\n0        60    110       130     409.1\n1        60    117       145     479.0\n2        60    103       135     340.0\n3        45    109       175     282.4\n4        45    117       148     406.0"
  },
  {
    "objectID": "快速入门.html#如何在dataframe中选取数据",
    "href": "快速入门.html#如何在dataframe中选取数据",
    "title": "2  快速入门",
    "section": "如何在DataFrame中选取数据？",
    "text": "如何在DataFrame中选取数据？\n在数据分析中，选取需要的数据进行处理和分析是很重要的。在Excel中，主要通过鼠标点选或拖拽来选取数据。\n而在pandas中，我们也可以通过行列名、索引以及各种条件来筛选感兴趣的数据子集，并进行数据过滤、筛选、切片、分析和连接等操作。\n\n\nCode\n# 获取案例数据\nimport pandas as pd\ndf = pd.read_csv('https://raw.githubusercontent.com/pandas-dev/pandas/main/doc/data/titanic.csv') \nprint(df.head(1)) \n\n\n\n\n\n\n\n\nNote\n\n\n\n本教程使用存储为 CSV 格式的泰坦尼克号数据集。以下是详细说明（改成折叠！！！！！）\nPassengerId：每位乘客的Id。\nSurvived：指示乘客是否幸存。0是和1否。\nPclass：3 个机票类别之一：Class 1、Class2和 Class 3。\nName：乘客姓名。\nSex：乘客的性别。\nAge：乘客的年龄。\nSibSp：船上兄弟姐妹或配偶的数量。\nParch：船上父母或孩子的人数。\nTicket：旅客的客票号。\nFare：表示票价。\nCabin：乘客的客舱号。\nEmbarked：登船的港口。\n\n\n\n2.0.9 选取特定列\n通过列索引标签或以属性的方式可以单独获取 DataFrame的列数据，返回的数据为 Series结构。\n假如我想知道每位乘客的姓名id（选取单列），df为数据表格，Name为列名\n\n\nCode\n# 方法一：\ndf['Name']\n\n# 方法二：\ndf.Name\n\n# 方法三：\ndf.loc[:, 'Name']\n\n\n0                                Braund, Mr. Owen Harris\n1      Cumings, Mrs. John Bradley (Florence Briggs Th...\n2                                 Heikkinen, Miss. Laina\n3           Futrelle, Mrs. Jacques Heath (Lily May Peel)\n4                               Allen, Mr. William Henry\n                             ...                        \n886                                Montvila, Rev. Juozas\n887                         Graham, Miss. Margaret Edith\n888             Johnston, Miss. Catherine Helen \"Carrie\"\n889                                Behr, Mr. Karl Howell\n890                                  Dooley, Mr. Patrick\nName: Name, Length: 891, dtype: object\n\n\n假如我想知道所有乘客的幸存情况（获取多列），我们可以通过两个中括号，可以获取多个列的数据。\n\n\nCode\ndf[['Name','Survived']].head()\n\n\n\n\n\n\n\n\n\nName\nSurvived\n\n\n\n\n0\nBraund, Mr. Owen Harris\n0\n\n\n1\nCumings, Mrs. John Bradley (Florence Briggs Th...\n1\n\n\n2\nHeikkinen, Miss. Laina\n1\n\n\n3\nFutrelle, Mrs. Jacques Heath (Lily May Peel)\n1\n\n\n4\nAllen, Mr. William Henry\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n内部方括号定义了一个 带有列名的Python列表，而外部方括号用于从 pandas 中选择数据\n\n\n\n\n2.0.10 选取特定行\n通过行索引获取行数据，冒号指定范围\n假设想知道第三行，Laina小姐的信息（单行）\n\n\nCode\n# 选取从第二行到第三行到数据\ndf[2:3]\n\n# df[2:5] 选取从第三行到第五行到数据\n\n\n\n\n\n\n\n\n\nPassengerId\nSurvived\nPclass\nName\nSex\nAge\nSibSp\nParch\nTicket\nFare\nCabin\nEmbarked\n\n\n\n\n2\n3\n1\n3\nHeikkinen, Miss. Laina\nfemale\n26.0\n0\n0\nSTON/O2. 3101282\n7.925\nNaN\nS\n\n\n\n\n\n\n\n如果我不想按顺序这样选取多行数据呢？\n如果想获取单独的几行，通过loc和iloc方法 来获取第二行Laina和第五行William的信息\n\n\n\n\n\n\nWarning\n\n\n\n注意在pandas中第0行才是第一行，所以切片要-1\n\n\n\n\nCode\n# iloc方法是按行索引位置选取数据，索引就是表格最左边的数字\ndf.iloc[[2,4]]\n\n\n\n\n\n\n\n\n\nPassengerId\nSurvived\nPclass\nName\nSex\nAge\nSibSp\nParch\nTicket\nFare\nCabin\nEmbarked\n\n\n\n\n2\n3\n1\n3\nHeikkinen, Miss. Laina\nfemale\n26.0\n0\n0\nSTON/O2. 3101282\n7.925\nNaN\nS\n\n\n4\n5\n0\n3\nAllen, Mr. William Henry\nmale\n35.0\n0\n0\n373450\n8.050\nNaN\nS\n\n\n\n\n\n\n\n\n\nCode\n# loc方法是按行索引标签选取数据，因为这里索引的标签和位置相同，所以结果同上\ndf.loc[[2,4]]\n\n\n\n\n\n\n\n\n\nPassengerId\nSurvived\nPclass\nName\nSex\nAge\nSibSp\nParch\nTicket\nFare\nCabin\nEmbarked\n\n\n\n\n2\n3\n1\n3\nHeikkinen, Miss. Laina\nfemale\n26.0\n0\n0\nSTON/O2. 3101282\n7.925\nNaN\nS\n\n\n4\n5\n0\n3\nAllen, Mr. William Henry\nmale\n35.0\n0\n0\n373450\n8.050\nNaN\nS\n\n\n\n\n\n\n\n\n\n2.0.11 根据条件筛选行列\n假设我想知道十八岁以下的乘客信息\n\n\nCode\ndf[df[\"Age\"] &lt; 18].head()\n\n\n\n\n\n\n\n\n\nPassengerId\nSurvived\nPclass\nName\nSex\nAge\nSibSp\nParch\nTicket\nFare\nCabin\nEmbarked\n\n\n\n\n7\n8\n0\n3\nPalsson, Master. Gosta Leonard\nmale\n2.0\n3\n1\n349909\n21.0750\nNaN\nS\n\n\n9\n10\n1\n2\nNasser, Mrs. Nicholas (Adele Achem)\nfemale\n14.0\n1\n0\n237736\n30.0708\nNaN\nC\n\n\n10\n11\n1\n3\nSandstrom, Miss. Marguerite Rut\nfemale\n4.0\n1\n1\nPP 9549\n16.7000\nG6\nS\n\n\n14\n15\n0\n3\nVestrom, Miss. Hulda Amanda Adolfina\nfemale\n14.0\n0\n0\n350406\n7.8542\nNaN\nS\n\n\n16\n17\n0\n3\nRice, Master. Eugene\nmale\n2.0\n4\n1\n382652\n29.1250\nNaN\nQ\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n从里到外来拆解，首先需要先确定\"Age\"列，然后使用运算符&gt;，选取十八岁以下的乘客。然后把这两操作在用方括号框起来，表明在数据df中操作，.head()选取前五行。\n\n\nDataFrames 可以通过多种方式进行过滤，其中最直观的是使用布尔索引"
  },
  {
    "objectID": "快速入门.html#根据条件筛选行列",
    "href": "快速入门.html#根据条件筛选行列",
    "title": "2  快速入门",
    "section": "2.1 根据条件筛选行列",
    "text": "2.1 根据条件筛选行列\n假设我想知道十八岁以下的乘客信息\n\n\nCode\ndf[df[\"Age\"] &lt; 18].head()\n\n\n\n\n\n\n\n\n\nPassengerId\nSurvived\nPclass\nName\nSex\nAge\nSibSp\nParch\nTicket\nFare\nCabin\nEmbarked\n\n\n\n\n7\n8\n0\n3\nPalsson, Master. Gosta Leonard\nmale\n2.0\n3\n1\n349909\n21.0750\nNaN\nS\n\n\n9\n10\n1\n2\nNasser, Mrs. Nicholas (Adele Achem)\nfemale\n14.0\n1\n0\n237736\n30.0708\nNaN\nC\n\n\n10\n11\n1\n3\nSandstrom, Miss. Marguerite Rut\nfemale\n4.0\n1\n1\nPP 9549\n16.7000\nG6\nS\n\n\n14\n15\n0\n3\nVestrom, Miss. Hulda Amanda Adolfina\nfemale\n14.0\n0\n0\n350406\n7.8542\nNaN\nS\n\n\n16\n17\n0\n3\nRice, Master. Eugene\nmale\n2.0\n4\n1\n382652\n29.1250\nNaN\nQ\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n从里到外来拆解，首先需要先确定\"Age\"列，然后使用运算符&gt;，选取十八岁以下的乘客。然后把这两操作在用方括号框起来，表明在数据df中操作，.head()选取前五行。"
  },
  {
    "objectID": "快速入门.html#数据可视化-1",
    "href": "快速入门.html#数据可视化-1",
    "title": "2  快速入门",
    "section": "2.2 数据可视化",
    "text": "2.2 数据可视化\n前面我们有展示pandas自带的可视化效果，其实和matplotlib一样都是静态的图表（略显呆板…）\n这边我们极力推荐使用plotly.express，只需几行代码就可以实现酷炫交互式可视化。\n\n\nCode\nimport plotly.express as px\nimport plotly.io as pio\ngapminder = px.data.gapminder()\ngapminder2007 = gapminder.query(\"year == 2007\")\nfig = px.scatter(gapminder2007, \n                 x=\"gdpPercap\", y=\"lifeExp\", color=\"continent\", \n                 size=\"pop\", size_max=60,\n                 hover_name=\"country\")\nfig.show()\n\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json"
  },
  {
    "objectID": "快速入门.html#更好的数据可视化plotly",
    "href": "快速入门.html#更好的数据可视化plotly",
    "title": "2  快速入门",
    "section": "更好的数据可视化(Plotly)",
    "text": "更好的数据可视化(Plotly)\n前面我们有展示pandas自带的可视化效果，其实和matplotlib一样都是静态的图表（略显呆板…）\n这边我们极力推荐使用plotly.express，只需几行代码就可以实现酷炫交互式可视化。\n\npip安装conda安装\n\n\n$ pip install plotly\n\n\n$ conda install -c plotly plotly\n\n\n\nplotly.express是plotly的简化包，只需要1～2行就可以生成可视化图表，大家可以滑动鼠标，获取相对应的数据。官方文档\n\n\nCode\nimport plotly.express as px\nfig = px.bar(x=[\"a\", \"b\", \"c\"], y=[6, 1, 8])\nfig.show(renderer=\"notebook\")"
  },
  {
    "objectID": "快速入门.html#如何在原表中添加新数据dataframe",
    "href": "快速入门.html#如何在原表中添加新数据dataframe",
    "title": "2  快速入门",
    "section": "如何在原表中添加新数据(DataFrame)",
    "text": "如何在原表中添加新数据(DataFrame)\n\n\nCode\nimport pandas as pd\n\n# 创建示例数据\ndata = {'姓名': ['张三', '李四', '王五', '赵六'],\n        '年龄': [25, 30, 35, 28],\n        '性别': ['M', 'F', 'M', 'F']}\n\ndf = pd.DataFrame(data)\ndf\n\n\n\n\n\n\n\n\n\n姓名\n年龄\n性别\n\n\n\n\n0\n张三\n25\nM\n\n\n1\n李四\n30\nF\n\n\n2\n王五\n35\nM\n\n\n3\n赵六\n28\nF\n\n\n\n\n\n\n\n\n\nCode\n# 查看行列数\ndf.shape\n\n\n(4, 3)\n\n\n\n2.0.12 添加新列\n可以看到目前的案例中是四行三列，如果我想添加新的一列“薪资”，有两种方法：\n\n2.0.12.1 方法一： df[‘列名’] = 值\n\n\nCode\n\ndf['工资'] = [5000, 6000, '', 7000]\ndf\n\n\n\n\n\n\n\n\n\n姓名\n年龄\n性别\n工资\n\n\n\n\n0\n张三\n25\nM\n5000\n\n\n1\n李四\n30\nF\n6000\n\n\n2\n王五\n35\nM\n\n\n\n3\n赵六\n28\nF\n7000\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n[值]必须对应行数，这里有四个人就必须有四个值，没有则可以为空白' ' 或者 'NA'；[]里面的顺序也会保持一样\n\n\n\n\n2.0.12.2 方法二：使用assign()\n\n\nCode\n\ndf = df.assign(工资=[5000, 6000, 4500, 7000])\ndf\n\n\n\n\n\n\n\n\n\n姓名\n年龄\n性别\n工资\n\n\n\n\n0\n张三\n25\nM\n5000\n\n\n1\n李四\n30\nF\n6000\n\n\n2\n王五\n35\nM\n4500\n\n\n3\n赵六\n28\nF\n7000\n\n\n\n\n\n\n\n我们可以在原有表格中添加新列，也可以从其他数据源（如文件、数据库等）中导入数据，并将其作为新列添加到DataFrame中。\n\n\n\n2.0.13 添加新行\n\n2.0.13.1 方法一： 使用append方法\ndf = df.append(new_row, ignore_index=True)\n其中，new_row是一个包含新行数据的字典或Series对象。\n\n\nCode\n# 重新选取数据\ndata = {'姓名': ['张三', '李四', '王五', '赵六'],\n        '年龄': [25, 30, 35, 28],\n        '性别': ['M', 'F', 'M', 'F']}\n\ndf = pd.DataFrame(data)\n\n\n\n\nCode\n#`ignore_index=True`是确保新行的索引与原始DataFrame的索引保持一致。\n\nnew_row = {'姓名': '熊大', '年龄': 35, '性别': 'M'}\n\ndf = df.append(new_row, ignore_index=True)\ndf\n\n\n/var/folders/fx/3rtntmd93wg4hsmfkcgfpq840000gn/T/ipykernel_7818/3717194637.py:5: FutureWarning:\n\nThe frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n\n\n\n\n\n\n\n\n\n\n姓名\n年龄\n性别\n\n\n\n\n0\n张三\n25\nM\n\n\n1\n李四\n30\nF\n\n\n2\n王五\n35\nM\n\n\n3\n赵六\n28\nF\n\n\n4\n熊大\n35\nM\n\n\n\n\n\n\n\n\n\n2.0.13.2 方法二：使用concat()\n先创建一个新的DataFrame，然后将其与原始DataFrame进行合并\n\n\nCode\nnew_row = {'姓名': '熊二', '年龄': 30, '性别': 'M'}\n\nnew_df = pd.DataFrame([new_row])\n\ndf = pd.concat([df, new_df], ignore_index=True)\ndf\n\n\n\n\n\n\n\n\n\n姓名\n年龄\n性别\n\n\n\n\n0\n张三\n25\nM\n\n\n1\n李四\n30\nF\n\n\n2\n王五\n35\nM\n\n\n3\n赵六\n28\nF\n\n\n4\n熊大\n35\nM\n\n\n5\n熊二\n30\nM\n\n\n\n\n\n\n\n\n\n\n2.0.14 删除行/列\n\n2.0.14.1 使用drop方法删除列\ndf = df.drop('column_name', axis=1)\n需要提供要删除的列名，然后指定axis=1表示按列进行操作。删除列后，DataFrame会自动调整列的顺序。\n\n\nCode\ndf = df.drop('性别', axis=1)\ndf\n\n\n\n\n\n\n\n\n\n姓名\n年龄\n\n\n\n\n0\n张三\n25\n\n\n1\n李四\n30\n\n\n2\n王五\n35\n\n\n3\n赵六\n28\n\n\n4\n熊大\n35\n\n\n5\n熊二\n30\n\n\n\n\n\n\n\n\n\n2.0.14.2 使用drop方法删除行\ndf = df.drop(row_index)\n使用drop方法根据行的索引来删除特定的行\n\n\nCode\n# 删除第五行数据\ndf = df.drop(5)\ndf\n\n\n\n\n\n\n\n\n\n姓名\n年龄\n\n\n\n\n0\n张三\n25\n\n\n1\n李四\n30\n\n\n2\n王五\n35\n\n\n3\n赵六\n28\n\n\n4\n熊大\n35\n\n\n\n\n\n\n\n\n\n\n2.0.15 重命名列\n\n2.0.15.1 使用rename方法：\ndf = df.rename(columns={'old_column_name': 'new_column_name'})\n其中，old_column_name是要重命名的旧列名，new_column_name是新的列名。\n\n\nCode\ndf = df.rename(columns={'姓名': '乘客id', '年龄':'乘客年龄'})\ndf\n\n\n\n\n\n\n\n\n\n乘客id\n乘客年龄\n\n\n\n\n0\n张三\n25\n\n\n1\n李四\n30\n\n\n2\n王五\n35\n\n\n3\n赵六\n28\n\n\n4\n熊大\n35\n\n\n\n\n\n\n\n\n\n\n2.0.16 按值排序\n\n2.0.16.1 使用sort_values方法：\ndf = df.sort_values(by='column_name', ascending=True)\n其中，column_name是你想要按其值进行排序的列名。ascending=True表示按升序排序，若要按降序排序，将ascending设置为False。\n通过sort_values方法，你可以根据特定列的值对DataFrame进行排序。你可以选择按单个列的值排序，也可以按多个列的值排序，只需在by参数中提供相应的列名列表即可。\n\n\nCode\ndf = df.sort_values(by='乘客年龄', ascending=True)\ndf\n\n\n\n\n\n\n\n\n\n乘客id\n乘客年龄\n\n\n\n\n0\n张三\n25\n\n\n3\n赵六\n28\n\n\n1\n李四\n30\n\n\n2\n王五\n35\n\n\n4\n熊大\n35"
  },
  {
    "objectID": "快速入门.html#添加新数据dataframe",
    "href": "快速入门.html#添加新数据dataframe",
    "title": "2  快速入门",
    "section": "添加新数据(DataFrame)",
    "text": "添加新数据(DataFrame)\n\n\nCode\nimport pandas as pd\n\n# 创建示例数据\ndata = {'姓名': ['张三', '李四', '王五', '赵六'],\n        '年龄': [25, 30, 35, 28],\n        '性别': ['M', 'F', 'M', 'F']}\n\ndf = pd.DataFrame(data)\ndf\n\n\n\n\n\n\n\n\n\n姓名\n年龄\n性别\n\n\n\n\n0\n张三\n25\nM\n\n\n1\n李四\n30\nF\n\n\n2\n王五\n35\nM\n\n\n3\n赵六\n28\nF\n\n\n\n\n\n\n\n\n\nCode\n# 查看行列数\ndf.shape\n\n\n(4, 3)\n\n\n\n2.0.12 添加新列\n可以看到目前的案例中是四行三列，如果我想添加新的一列“薪资”，有两种方法：\n\n2.0.12.1 方法一： df[‘列名’] = 值\n\n\nCode\n\ndf['工资'] = [5000, 6000, '', 7000]\ndf\n\n\n\n\n\n\n\n\n\n姓名\n年龄\n性别\n工资\n\n\n\n\n0\n张三\n25\nM\n5000\n\n\n1\n李四\n30\nF\n6000\n\n\n2\n王五\n35\nM\n\n\n\n3\n赵六\n28\nF\n7000\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n[值]必须对应行数，这里有四个人就必须有四个值，没有则可以为空白' ' 或者 'NA'；[]里面的顺序也会保持一样\n\n\n\n\n2.0.12.2 方法二：使用assign()\n\n\nCode\n\ndf = df.assign(工资=[5000, 6000, 4500, 7000])\ndf\n\n\n\n\n\n\n\n\n\n姓名\n年龄\n性别\n工资\n\n\n\n\n0\n张三\n25\nM\n5000\n\n\n1\n李四\n30\nF\n6000\n\n\n2\n王五\n35\nM\n4500\n\n\n3\n赵六\n28\nF\n7000\n\n\n\n\n\n\n\n我们可以在原有表格中添加新列，也可以从其他数据源（如文件、数据库等）中导入数据，并将其作为新列添加到DataFrame中。\n\n\n\n2.0.13 添加新行\n\n2.0.13.1 方法一： 使用append方法\ndf = df.append(new_row, ignore_index=True)\n其中，new_row是一个包含新行数据的字典或Series对象。\n\n\nCode\n# 重新选取数据\ndata = {'姓名': ['张三', '李四', '王五', '赵六'],\n        '年龄': [25, 30, 35, 28],\n        '性别': ['M', 'F', 'M', 'F']}\n\ndf = pd.DataFrame(data)\n\n\n\n\nCode\n#`ignore_index=True`是确保新行的索引与原始DataFrame的索引保持一致。\n\nnew_row = {'姓名': '熊大', '年龄': 35, '性别': 'M'}\n\ndf = df.append(new_row, ignore_index=True)\ndf\n\n\n/var/folders/fx/3rtntmd93wg4hsmfkcgfpq840000gn/T/ipykernel_7818/3717194637.py:5: FutureWarning:\n\nThe frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n\n\n\n\n\n\n\n\n\n\n姓名\n年龄\n性别\n\n\n\n\n0\n张三\n25\nM\n\n\n1\n李四\n30\nF\n\n\n2\n王五\n35\nM\n\n\n3\n赵六\n28\nF\n\n\n4\n熊大\n35\nM\n\n\n\n\n\n\n\n\n\n2.0.13.2 方法二：使用concat()\n先创建一个新的DataFrame，然后将其与原始DataFrame进行合并\n\n\nCode\nnew_row = {'姓名': '熊二', '年龄': 30, '性别': 'M'}\n\nnew_df = pd.DataFrame([new_row])\n\ndf = pd.concat([df, new_df], ignore_index=True)\ndf\n\n\n\n\n\n\n\n\n\n姓名\n年龄\n性别\n\n\n\n\n0\n张三\n25\nM\n\n\n1\n李四\n30\nF\n\n\n2\n王五\n35\nM\n\n\n3\n赵六\n28\nF\n\n\n4\n熊大\n35\nM\n\n\n5\n熊二\n30\nM\n\n\n\n\n\n\n\n\n\n\n2.0.14 删除行/列\n\n2.0.14.1 使用drop方法删除列\ndf = df.drop('column_name', axis=1)\n需要提供要删除的列名，然后指定axis=1表示按列进行操作。删除列后，DataFrame会自动调整列的顺序。\n\n\nCode\ndf = df.drop('性别', axis=1)\ndf\n\n\n\n\n\n\n\n\n\n姓名\n年龄\n\n\n\n\n0\n张三\n25\n\n\n1\n李四\n30\n\n\n2\n王五\n35\n\n\n3\n赵六\n28\n\n\n4\n熊大\n35\n\n\n5\n熊二\n30\n\n\n\n\n\n\n\n\n\n2.0.14.2 使用drop方法删除行\ndf = df.drop(row_index)\n使用drop方法根据行的索引来删除特定的行\n\n\nCode\n# 删除第五行数据\ndf = df.drop(5)\ndf\n\n\n\n\n\n\n\n\n\n姓名\n年龄\n\n\n\n\n0\n张三\n25\n\n\n1\n李四\n30\n\n\n2\n王五\n35\n\n\n3\n赵六\n28\n\n\n4\n熊大\n35\n\n\n\n\n\n\n\n\n\n\n2.0.15 重命名列\n\n2.0.15.1 使用rename方法：\ndf = df.rename(columns={'old_column_name': 'new_column_name'})\n其中，old_column_name是要重命名的旧列名，new_column_name是新的列名。\n\n\nCode\ndf = df.rename(columns={'姓名': '乘客id', '年龄':'乘客年龄'})\ndf\n\n\n\n\n\n\n\n\n\n乘客id\n乘客年龄\n\n\n\n\n0\n张三\n25\n\n\n1\n李四\n30\n\n\n2\n王五\n35\n\n\n3\n赵六\n28\n\n\n4\n熊大\n35\n\n\n\n\n\n\n\n\n\n\n2.0.16 按值排序\n\n2.0.16.1 使用sort_values方法：\ndf = df.sort_values(by='column_name', ascending=True)\n其中，column_name是你想要按其值进行排序的列名。ascending=True表示按升序排序，若要按降序排序，将ascending设置为False。\n通过sort_values方法，你可以根据特定列的值对DataFrame进行排序。你可以选择按单个列的值排序，也可以按多个列的值排序，只需在by参数中提供相应的列名列表即可。\n\n\nCode\ndf = df.sort_values(by='乘客年龄', ascending=True)\ndf\n\n\n\n\n\n\n\n\n\n乘客id\n乘客年龄\n\n\n\n\n0\n张三\n25\n\n\n3\n赵六\n28\n\n\n1\n李四\n30\n\n\n2\n王五\n35\n\n\n4\n熊大\n35"
  },
  {
    "objectID": "快速入门.html#选取数据",
    "href": "快速入门.html#选取数据",
    "title": "2  快速入门",
    "section": "选取数据",
    "text": "选取数据\n在数据分析中，选取需要的数据进行处理和分析是很重要的。在Excel中，主要通过鼠标点选或拖拽来选取数据。\n而在pandas中，我们也可以通过行列名、索引以及各种条件来筛选感兴趣的数据子集，并进行数据过滤、筛选、切片、分析和连接等操作。\n\n\nCode\n# 获取案例数据\nimport pandas as pd\ndf = pd.read_csv('https://raw.githubusercontent.com/pandas-dev/pandas/main/doc/data/titanic.csv') \nprint(df.head(1)) \n\n\n\n\n\n\n\n\nNote\n\n\n\n本教程使用存储为 CSV 格式的泰坦尼克号数据集。以下是详细说明（改成折叠！！！！！）\nPassengerId：每位乘客的Id。\nSurvived：指示乘客是否幸存。0是和1否。\nPclass：3 个机票类别之一：Class 1、Class2和 Class 3。\nName：乘客姓名。\nSex：乘客的性别。\nAge：乘客的年龄。\nSibSp：船上兄弟姐妹或配偶的数量。\nParch：船上父母或孩子的人数。\nTicket：旅客的客票号。\nFare：表示票价。\nCabin：乘客的客舱号。\nEmbarked：登船的港口。\n\n\n\n2.0.9 选取特定列\n通过列索引标签或以属性的方式可以单独获取 DataFrame的列数据，返回的数据为 Series结构。\n假如我想知道每位乘客的姓名id（选取单列），df为数据表格，Name为列名\n\n\nCode\n# 方法一：\ndf['Name']\n\n# 方法二：\ndf.Name\n\n# 方法三：\ndf.loc[:, 'Name']\n\n\n0                                Braund, Mr. Owen Harris\n1      Cumings, Mrs. John Bradley (Florence Briggs Th...\n2                                 Heikkinen, Miss. Laina\n3           Futrelle, Mrs. Jacques Heath (Lily May Peel)\n4                               Allen, Mr. William Henry\n                             ...                        \n886                                Montvila, Rev. Juozas\n887                         Graham, Miss. Margaret Edith\n888             Johnston, Miss. Catherine Helen \"Carrie\"\n889                                Behr, Mr. Karl Howell\n890                                  Dooley, Mr. Patrick\nName: Name, Length: 891, dtype: object\n\n\n假如我想知道所有乘客的幸存情况（获取多列），我们可以通过两个中括号，可以获取多个列的数据。\n\n\nCode\ndf[['Name','Survived']].head()\n\n\n\n\n\n\n\n\n\nName\nSurvived\n\n\n\n\n0\nBraund, Mr. Owen Harris\n0\n\n\n1\nCumings, Mrs. John Bradley (Florence Briggs Th...\n1\n\n\n2\nHeikkinen, Miss. Laina\n1\n\n\n3\nFutrelle, Mrs. Jacques Heath (Lily May Peel)\n1\n\n\n4\nAllen, Mr. William Henry\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n内部方括号定义了一个 带有列名的Python列表，而外部方括号用于从 pandas 中选择数据\n\n\n\n\n2.0.10 选取特定行\n通过行索引获取行数据，冒号指定范围\n假设想知道第三行，Laina小姐的信息（单行）\n\n\nCode\n# 选取从第二行到第三行到数据\ndf[2:3]\n\n# df[2:5] 选取从第三行到第五行到数据\n\n\n\n\n\n\n\n\n\nPassengerId\nSurvived\nPclass\nName\nSex\nAge\nSibSp\nParch\nTicket\nFare\nCabin\nEmbarked\n\n\n\n\n2\n3\n1\n3\nHeikkinen, Miss. Laina\nfemale\n26.0\n0\n0\nSTON/O2. 3101282\n7.925\nNaN\nS\n\n\n\n\n\n\n\n如果我不想按顺序这样选取多行数据呢？\n如果想获取单独的几行，通过loc和iloc方法 来获取第二行Laina和第五行William的信息\n\n\n\n\n\n\nWarning\n\n\n\n注意在pandas中第0行才是第一行，所以切片要-1\n\n\n\n\nCode\n# iloc方法是按行索引位置选取数据，索引就是表格最左边的数字\ndf.iloc[[2,4]]\n\n\n\n\n\n\n\n\n\nPassengerId\nSurvived\nPclass\nName\nSex\nAge\nSibSp\nParch\nTicket\nFare\nCabin\nEmbarked\n\n\n\n\n2\n3\n1\n3\nHeikkinen, Miss. Laina\nfemale\n26.0\n0\n0\nSTON/O2. 3101282\n7.925\nNaN\nS\n\n\n4\n5\n0\n3\nAllen, Mr. William Henry\nmale\n35.0\n0\n0\n373450\n8.050\nNaN\nS\n\n\n\n\n\n\n\n\n\nCode\n# loc方法是按行索引标签选取数据，因为这里索引的标签和位置相同，所以结果同上\ndf.loc[[2,4]]\n\n\n\n\n\n\n\n\n\nPassengerId\nSurvived\nPclass\nName\nSex\nAge\nSibSp\nParch\nTicket\nFare\nCabin\nEmbarked\n\n\n\n\n2\n3\n1\n3\nHeikkinen, Miss. Laina\nfemale\n26.0\n0\n0\nSTON/O2. 3101282\n7.925\nNaN\nS\n\n\n4\n5\n0\n3\nAllen, Mr. William Henry\nmale\n35.0\n0\n0\n373450\n8.050\nNaN\nS\n\n\n\n\n\n\n\n\n\n2.0.11 根据条件筛选行列\n假设我想知道十八岁以下的乘客信息\n\n\nCode\ndf[df[\"Age\"] &lt; 18].head()\n\n\n\n\n\n\n\n\n\nPassengerId\nSurvived\nPclass\nName\nSex\nAge\nSibSp\nParch\nTicket\nFare\nCabin\nEmbarked\n\n\n\n\n7\n8\n0\n3\nPalsson, Master. Gosta Leonard\nmale\n2.0\n3\n1\n349909\n21.0750\nNaN\nS\n\n\n9\n10\n1\n2\nNasser, Mrs. Nicholas (Adele Achem)\nfemale\n14.0\n1\n0\n237736\n30.0708\nNaN\nC\n\n\n10\n11\n1\n3\nSandstrom, Miss. Marguerite Rut\nfemale\n4.0\n1\n1\nPP 9549\n16.7000\nG6\nS\n\n\n14\n15\n0\n3\nVestrom, Miss. Hulda Amanda Adolfina\nfemale\n14.0\n0\n0\n350406\n7.8542\nNaN\nS\n\n\n16\n17\n0\n3\nRice, Master. Eugene\nmale\n2.0\n4\n1\n382652\n29.1250\nNaN\nQ\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n从里到外来拆解，首先需要先确定\"Age\"列，然后使用运算符&gt;，选取十八岁以下的乘客。然后把这两操作在用方括号框起来，表明在数据df中操作，.head()选取前五行。\n\n\nDataFrames 可以通过多种方式进行过滤，其中最直观的是使用布尔索引"
  },
  {
    "objectID": "快速入门.html#选取特定数据",
    "href": "快速入门.html#选取特定数据",
    "title": "2  快速入门",
    "section": "选取特定数据",
    "text": "选取特定数据\n在数据分析中，选取需要的数据进行处理和分析是很重要的。在Excel中，主要通过鼠标点选或拖拽来选取数据。\n而在pandas中，我们也可以通过行列名、索引以及各种条件来筛选感兴趣的数据子集，并进行数据过滤、筛选、切片、分析和连接等操作。\n\n\nCode\n# 获取案例数据\nimport pandas as pd\ndf = pd.read_csv('https://raw.githubusercontent.com/pandas-dev/pandas/main/doc/data/titanic.csv') \ndf.head()\n\n\n\n\n\n\n\n\n\nPassengerId\nSurvived\nPclass\nName\nSex\nAge\nSibSp\nParch\nTicket\nFare\nCabin\nEmbarked\n\n\n\n\n0\n1\n0\n3\nBraund, Mr. Owen Harris\nmale\n22.0\n1\n0\nA/5 21171\n7.2500\nNaN\nS\n\n\n1\n2\n1\n1\nCumings, Mrs. John Bradley (Florence Briggs Th...\nfemale\n38.0\n1\n0\nPC 17599\n71.2833\nC85\nC\n\n\n2\n3\n1\n3\nHeikkinen, Miss. Laina\nfemale\n26.0\n0\n0\nSTON/O2. 3101282\n7.9250\nNaN\nS\n\n\n3\n4\n1\n1\nFutrelle, Mrs. Jacques Heath (Lily May Peel)\nfemale\n35.0\n1\n0\n113803\n53.1000\nC123\nS\n\n\n4\n5\n0\n3\nAllen, Mr. William Henry\nmale\n35.0\n0\n0\n373450\n8.0500\nNaN\nS\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n本教程使用存储为 CSV 格式的泰坦尼克号数据集。以下是详细说明（改成折叠！！！！！）\nPassengerId：每位乘客的Id。\nSurvived：指示乘客是否幸存。0是和1否。\nPclass：3 个机票类别之一：Class 1、Class2和 Class 3。\nName：乘客姓名。\nSex：乘客的性别。\nAge：乘客的年龄。\nSibSp：船上兄弟姐妹或配偶的数量。\nParch：船上父母或孩子的人数。\nTicket：旅客的客票号。\nFare：表示票价。\nCabin：乘客的客舱号。\nEmbarked：登船的港口。\n\n\n\n2.0.9 选取特定列\n通过列索引标签或以属性的方式可以单独获取 DataFrame的列数据，返回的数据为 Series结构。\n假如我想知道每位乘客的姓名id（选取单列），df为数据表格，Name为列名\n\n\nCode\n# 方法一：\ndf['Name']\n\n# 方法二：\ndf.Name\n\n# 方法三：\ndf.loc[:, 'Name']\n\n\n0                                Braund, Mr. Owen Harris\n1      Cumings, Mrs. John Bradley (Florence Briggs Th...\n2                                 Heikkinen, Miss. Laina\n3           Futrelle, Mrs. Jacques Heath (Lily May Peel)\n4                               Allen, Mr. William Henry\n                             ...                        \n886                                Montvila, Rev. Juozas\n887                         Graham, Miss. Margaret Edith\n888             Johnston, Miss. Catherine Helen \"Carrie\"\n889                                Behr, Mr. Karl Howell\n890                                  Dooley, Mr. Patrick\nName: Name, Length: 891, dtype: object\n\n\n假如我想知道所有乘客的幸存情况（获取多列），我们可以通过两个中括号，可以获取多个列的数据。\n\n\nCode\ndf[['Name','Survived']].head()\n\n\n\n\n\n\n\n\n\nName\nSurvived\n\n\n\n\n0\nBraund, Mr. Owen Harris\n0\n\n\n1\nCumings, Mrs. John Bradley (Florence Briggs Th...\n1\n\n\n2\nHeikkinen, Miss. Laina\n1\n\n\n3\nFutrelle, Mrs. Jacques Heath (Lily May Peel)\n1\n\n\n4\nAllen, Mr. William Henry\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n内部方括号定义了一个 带有列名的Python列表，而外部方括号用于从 pandas 中选择数据\n\n\n\n\n2.0.10 选取特定行\n通过行索引获取行数据，冒号指定范围\n假设想知道第三行，Laina小姐的信息（单行）\n\n\nCode\n# 选取从第二行到第三行到数据\ndf[2:3]\n\n# df[2:5] 选取从第三行到第五行到数据\n\n\n\n\n\n\n\n\n\nPassengerId\nSurvived\nPclass\nName\nSex\nAge\nSibSp\nParch\nTicket\nFare\nCabin\nEmbarked\n\n\n\n\n2\n3\n1\n3\nHeikkinen, Miss. Laina\nfemale\n26.0\n0\n0\nSTON/O2. 3101282\n7.925\nNaN\nS\n\n\n\n\n\n\n\n如果我不想按顺序这样选取多行数据呢？\n如果想获取单独的几行，通过loc和iloc方法 来获取第二行Laina和第五行William的信息\n\n\n\n\n\n\nWarning\n\n\n\n注意在pandas中第0行才是第一行，所以切片要-1\n\n\n\n\nCode\n# iloc方法是按行索引位置选取数据，索引就是表格最左边的数字\ndf.iloc[[2,4]]\n\n\n\n\n\n\n\n\n\nPassengerId\nSurvived\nPclass\nName\nSex\nAge\nSibSp\nParch\nTicket\nFare\nCabin\nEmbarked\n\n\n\n\n2\n3\n1\n3\nHeikkinen, Miss. Laina\nfemale\n26.0\n0\n0\nSTON/O2. 3101282\n7.925\nNaN\nS\n\n\n4\n5\n0\n3\nAllen, Mr. William Henry\nmale\n35.0\n0\n0\n373450\n8.050\nNaN\nS\n\n\n\n\n\n\n\n\n\nCode\n# loc方法是按行索引标签选取数据，因为这里索引的标签和位置相同，所以结果同上\ndf.loc[[2,4]]\n\n\n\n\n\n\n\n\n\nPassengerId\nSurvived\nPclass\nName\nSex\nAge\nSibSp\nParch\nTicket\nFare\nCabin\nEmbarked\n\n\n\n\n2\n3\n1\n3\nHeikkinen, Miss. Laina\nfemale\n26.0\n0\n0\nSTON/O2. 3101282\n7.925\nNaN\nS\n\n\n4\n5\n0\n3\nAllen, Mr. William Henry\nmale\n35.0\n0\n0\n373450\n8.050\nNaN\nS\n\n\n\n\n\n\n\n\n\n2.0.11 根据条件筛选行列\n假设我想知道十八岁以下的乘客信息\n\n\nCode\ndf[df[\"Age\"] &lt; 18].head()\n\n\n\n\n\n\n\n\n\nPassengerId\nSurvived\nPclass\nName\nSex\nAge\nSibSp\nParch\nTicket\nFare\nCabin\nEmbarked\n\n\n\n\n7\n8\n0\n3\nPalsson, Master. Gosta Leonard\nmale\n2.0\n3\n1\n349909\n21.0750\nNaN\nS\n\n\n9\n10\n1\n2\nNasser, Mrs. Nicholas (Adele Achem)\nfemale\n14.0\n1\n0\n237736\n30.0708\nNaN\nC\n\n\n10\n11\n1\n3\nSandstrom, Miss. Marguerite Rut\nfemale\n4.0\n1\n1\nPP 9549\n16.7000\nG6\nS\n\n\n14\n15\n0\n3\nVestrom, Miss. Hulda Amanda Adolfina\nfemale\n14.0\n0\n0\n350406\n7.8542\nNaN\nS\n\n\n16\n17\n0\n3\nRice, Master. Eugene\nmale\n2.0\n4\n1\n382652\n29.1250\nNaN\nQ\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n从里到外来拆解，首先需要先确定\"Age\"列，然后使用运算符&gt;，选取十八岁以下的乘客。然后把这两操作在用方括号框起来，表明在数据df中操作，.head()选取前五行。\n\n\nDataFrames 可以通过多种方式进行过滤，其中最直观的是使用布尔索引"
  },
  {
    "objectID": "快速入门.html#导入导出数据xslcsvtxt",
    "href": "快速入门.html#导入导出数据xslcsvtxt",
    "title": "2  快速入门",
    "section": "导入/导出数据(xsl,csv,txt…)",
    "text": "导入/导出数据(xsl,csv,txt…)\n\n\n2.0.7 读取本地数据\n获取数据data.csv下载地址，将csv文件下载到本地。\n\n\nCode\n# 导入pandas包\nimport pandas as pd\n\n# 注意csv文件路径\ndf = pd.read_csv('./example_data/data.csv') \n\n# 打印前五个\ndf.head()\n\n\n\n\n\n\n\n\n\nDuration\nPulse\nMaxpulse\nCalories\n\n\n\n\n0\n60\n110\n130\n409.1\n\n\n1\n60\n117\n145\n479.0\n\n\n2\n60\n103\n135\n340.0\n\n\n3\n45\n109\n175\n282.4\n\n\n4\n45\n117\n148\n406.0\n\n\n\n\n\n\n\n\n\n2.0.8 读取线上数据\n线上数据地址\n\n\nCode\ndf = pd.read_csv('https://www.w3schools.com/python/pandas/data.csv.txt')\n\n# 打印前五个\ndf.head()\n\n\n\n\n\n\n\n\n\nDuration\nPulse\nMaxpulse\nCalories\n\n\n\n\n0\n60\n110\n130\n409.1\n\n\n1\n60\n117\n145\n479.0\n\n\n2\n60\n103\n135\n340.0\n\n\n3\n45\n109\n175\n282.4\n\n\n4\n45\n117\n148\n406.0"
  },
  {
    "objectID": "time&txt_data.html#二使用pandas处理文本数据",
    "href": "time&txt_data.html#二使用pandas处理文本数据",
    "title": "3  使用Pandas处理时间序列数据",
    "section": "二、使用Pandas处理文本数据",
    "text": "二、使用Pandas处理文本数据\n在Pandas中，文本的主要两个类型是string和object。如果不特殊指定类型为string，文本类型一般为object。\n在通过访问器str实现对文本的操作之前，需要注意：\n\n要确保访问的对象类型是字符串str类型，如果不是，需要使用astype(str)转换类型\n访问器只能对Series数据结构使用，可以多个连接使用。\n\n\n1. 文本格式：大小写变换\n在 Pandas 中，可以使用字符串方法 str.lower() 和 str.upper() 对文本数据进行大小写转换。这些方法可以应用于 Pandas 的 Series或DataFrame列中的文本数据，以将其转换为小写或大写形式。\n# 字符全部变成小写\ns.str.lower()\n# 字符全部大写\ns.str.upper()\n# 每个单词首字母大写\ns.str.title()\n# 字符串第一个字母大写\ns.str.capitalize()\n# 大小写字母转换\ns.str.swapcase()\n\n\n2. 文本拆分\n在 Pandas 中，可以使用字符串方法 str.split() 对文本数据进行拆分。该方法可以将字符串按指定的分隔符拆分为多个部分，并返回一个包含拆分结果的 Series或DataFrame列。\n在对文本进行拆分时，可以使用expand参数将拆分出来的内容单独成列，使用n参数指定拆分的位置来控制形成几列。在对文本进行拆分以后，也可以使用get方法提取相关部分单独成列。\n# 使用方法\ns.str.split('x', expand=True, n=1)\n\n# 示例\n# 创建一个包含文本数据的 DataFrame\ndata = {'Text': ['Hello World', 'Python Programming', 'Data Science']}\ndf = pd.DataFrame(data)\n\n# 拆分文本并形成新列\ndf[['Word1', 'Word2']] = df['Text'].str.split(' ', expand=True)\n\nprint(df)\n\n# 输出结果\n#                 Text    Word1        Word2\n# 0        Hello World    Hello        World\n# 1  Python Programming   Python  Programming\n# 2       Data Science      Data      Science\n要进行更复杂的拆分可以借助正则表达式，如：\ns.str.split('\\@|\\.', expand=True, n=1)\n\n\n3. 文本包含\n在 Pandas 中，可以使用字符串方法 str.contains() 来判断文本数据是否包含指定的子串。这个方法返回一个布尔值的 Series或DataFrame列，用于表示每个元素是否包含指定的子串。，一般配合loc查询功能使用可搭配的参数有：\n\npat: 匹配字符串，支持正则表达式\ncase: 是否区分大小写，True表示区别\nflags: 正则库re中的标识，比如re.IGNORECASE\nna: 对缺失值填充\nregex: 是否支持正则，默认True支持\n\n# 使用方法\ns.str.contains(\"\")\n\n# 示例\n# 判断文本是否包含特定子串，并创建新列\ndf['Contains_Python'] = df['Text'].str.contains('Python')\n\nprint(df)\n\n# 输出结果\n#                 Text  Contains_Python\n# 0        Hello World            False\n# 1  Python Programming             True\n# 2       Data Science            False\n\n\n4. 文本格式：计数\n在 Pandas 中，可以使用字符串方法 str.count() 计算文本数据中指定子串的出现次数，同时可以使用字符串方法 str.len() 计量文本的长度。这两个方法可以方便地对文本数据进行计数和测量长度的操作。\n# 使用方法\ns.str.count('') # 字符串种包括指定字母的数量\ns.str.len() # 字符串长度\n\n# 示例\n# 计算指定子串的出现次数，并创建新列\ndf['Count_o'] = df['Text'].str.count('o')\n\n# 计量文本长度，并创建新列\ndf['Text_length'] = df['Text'].str.len()\n\nprint(df)\n\n# 输出结果\n#                 Text  Count_o  Text_length\n# 0        Hello World        2           11\n# 1  Python Programming        2           19\n# 2       Data Science        0           12\n\n\n5. 文本替换\n文本替换通常使用replace方法进行，可选参数如下：\n\npal：为被替代的内容字符串，也可以为正则表达式\nrepl：为新内容字符串，也可以是一个被调用的函数\nregex：用于设置是否支持正则，默认是True\n\n# 使用方法\ns.str.replace(\"s\":\"S\", \"f\":\"F\")\n\n# 示例\n# 将指定子串替换为新值，并创建新列\ndf['New_Text'] = df['Text'].str.replace('o', 'x')\n\nprint(df)\n\n# 输出结果\n#                 Text            New_Text\n# 0        Hello World        Hellx Wxrld\n# 1  Python Programming  Pythxn Prxgramming\n# 2       Data Science       Data Science"
  },
  {
    "objectID": "time_data.html",
    "href": "time_data.html",
    "title": "7  使用Pandas处理时间序列数据",
    "section": "",
    "text": "1. Pandas中的时间序列数据\nPandas中有6种关于时间序列数据的常见对象，分别是timestamp、datetimeindex、period、periodindex、以时间为元素的series和以时间索引的dataframe。\nPandas时序处理中最常见的两种数据类型为datetime和timedelta。\n\ndatetime\ndatetime即既有日期date，又有时间time的数据，表示一个具体的时间点（时间戳）。\ngraph TD;\ndatetime --&gt; date:2023-06-14;\ndatetime --&gt; time:12:00:00;\ntimedelta\ntimedelta表示两个时间点之差。如2023-01-01和2023-01-02之间的timedelta即为一天。\n\n\n\n2. 文本转换\n一般情况下，从.csv文件中导入的数据后，Dataframe中对应的时间列是字符串的形式，Pandas中提供了to_datetime()函数将字符串转换为datetime对象，并将其设置为Dataframe的索引。在Pandas中，这种类似于标准库中的日期时间对象称为：datetime64、datetime.datetime、pandas.Timestamp。\nimport pandas as pd\n\n# 创建包含字符串时间列数据的dataframe\ndata = {'date': ['20230601', '20230602', '20230603', '20230604']}\ndf = pd.DataFrame(data)\n# 展示dataframe\ndf\n# 输出结果为\n#          date\n# 0  20230601\n# 1  20230602\n# 2  20230603\n# 3  20230604\n# 将字符串时间列转换为datetime64格式的对象\ndf['date'] = pd.to_datetime(df['date'])\n\n# 打印转换后的结果\ndf\n\n# 输出结果为\n#         date\n# 0 2023-06-01\n# 1 2023-06-02\n# 2 2023-06-03\n# 3 2023-06-04\n将字符串数据转换为datetime64对象后，这些时间日期数据就具有了可比性，这样一来，我们就可以用它们来获取时间序列的长度。\n# 计算时间序列的长度\ntime_length = df['date'].max() - df['date'].min()\n\n# 打印时间序列的长度\nprint(\"时间序列的长度：\", time_length)\n\n# 输出结果为\n# 时间序列的长度： 3 days 00:00:00\n另外，我们还可以运用dt属性中的month函数来将月份信息提出出来，并将提取的结果赋值给新列。\n# 提取月份信息并形成新列\ndf['month'] = df['date'].dt.month\n\n# 打印DataFrame\nprint(df)\n\n# 输出结果为\n#         date  month\n# 0 2023-06-01      6\n# 1 2023-06-02      6\n# 2 2023-06-03      6\n# 3 2023-06-04      6\n\n\n2. Pandas中的时间日期索引\n在Pandas中，日期索引是一种特殊的索引类型，用于在时间序列数据中以日期或时间作为索引。日期索引在处理时间序列数据时非常有用，可以轻松地对数据进行切片、重采样和时间范围选择等操作。\nPandas提供了两种主要的日期索引类型：Timestamp和DatetimeIndex。\n\nTimestamp:\nTimestamp是Pandas中表示单个时间点的对象，可以使用pd.Timestamp()函数创建一个Timestamp对象，指定日期和时间。\npd.Timestamp('2023-06-17 10:30:00')\nDatetimeIndex:\nDatetimeIndex是一种由Timestamp对象构成的索引对象。可以使用pd.to_datetime()函数将日期时间字符串转换为DatetimeIndex对象。\npd.to_datetime(['2023-06-17', '2023-06-18', '2023-06-19'])\n\n使用日期索引可以实现以下功能：\n\n切片和选择：\n使用日期索引可以切片和选择时间序列数据。\n# 创建一个示例时间序列数据\ndata = {'日期': pd.date_range(start='2023-01-01', periods=10, freq='D'),\n        '销售量': [100, 150, 120, 200, 180, 160, 190, 210, 230, 250]}\ndf = pd.DataFrame(data)\n\n# 将日期列设置为索引\ndf.set_index('日期', inplace=True)\n\n# 选择特定日期范围的数据\nselected_data = df['2023-01-03':'2023-01-07']\nprint(selected_data)\n\n# 选择特定月份的数据\nselected_month = df['2023-02']\nprint(selected_month)\n\n# 使用布尔条件选择数据\nboolean_selection = df[df['销售量'] &gt; 200]\nprint(boolean_selection)\n重采样：\n重采样是指将时间序列数据从一个频率转换为另一个频率。使用日期索引，使用resample()方法可以对数据进行重采样，如按日、按周或按月重采样数据。\n# 按周重采样并计算平均值\nweekly_resampled = df.resample('W').mean()\nprint(weekly_resampled)\n\n# 按月重采样并计算总和\nmonthly_resampled = df.resample('M').sum()\nprint(monthly_resampled)\n时间范围生成：\nPandas提供了几个函数来生成一系列日期索引，如pd.date_range()和pd.period_range()。指定开始日期、结束日期和频率来生成日期范围，以便在创建时间序列数据时使用。\n# 生成一个包含5个连续日期的时间范围\ndate_range = pd.date_range(start='2023-01-01', periods=5, freq='D')\nprint(date_range)\n\n# 生成一个包含3个月份的时间范围\nmonth_range = pd.date_range(start='2023-01-01', periods=3, freq='M')\nprint(month_range)\n\n# 生成一个包含10个工作日的时间范围\nbusiness_days_range = pd.date_range(start='2023-01-01', periods=10, freq='B')\nprint(business_days_range)\n日期偏移：\nPandas提供了日期偏移功能，可以在日期上进行简单的数学运算。例如，您可以使用+或-操作符在日期索引上进行加减运算，例如df.index + pd.DateOffset(days=1)将日期索引向前偏移一天。\n# 创建一个日期索引\ndate_index = pd.date_range(start='2023-01-01', periods=5, freq='D')\n\n# 将日期索引向前偏移一天\nforward_offset = date_index + pd.DateOffset(days=1)\nprint(forward_offset)\n\n# 将日期索引向后偏移两天\nbackward_offset = date_index - pd.DateOffset(days=2)\nprint(backward_offset)\n\n# 将日期索引向前偏移一个月\nmonth_offset = date_index + pd.DateOffset(months=1)\nprint(month_offset)\n\n日期索引是Pandas中处理时间序列数据的重要工具之一，它提供了方便的方法来处理、分析和可视化时间相关的数据。使用日期索引，您可以更轻松地操作和探索时间序列数据。\n在Pandas中，.dt接口提供了许多常用的属性，用于处理日期和时间类型的Series数据。以下是一些常见的.dt接口属性的示例：\n\n\n\n\n\n\n\n属性\n描述\n\n\n\n\n.year\n返回日期的年份。\n\n\n.month\n返回日期的月份。\n\n\n.day\n返回日期的日。\n\n\n.hour\n返回时间的小时。\n\n\n.minute\n返回时间的分钟。\n\n\n.second\n返回时间的秒。\n\n\n.microsecond\n返回时间的微秒。\n\n\n.nanosecond\n返回时间的纳秒。\n\n\n.weekday\n返回日期对应的星期几（0代表星期一，6代表星期日）。\n\n\n.weekday_name\n返回日期对应的星期几的名称。\n\n\n.weekofyear\n返回日期所在年份的第几周。\n\n\n.quarter\n返回日期所属的季度。\n\n\n.is_month_start\n检查日期是否为月初。\n\n\n.is_month_end\n检查日期是否为月末。\n\n\n.is_quarter_start\n检查日期是否为季度初。\n\n\n.is_quarter_end\n检查日期是否为季度末。\n\n\n.is_year_start\n检查日期是否为年初。\n\n\n.is_year_end\n检查日期是否为年末。\n\n\n.is_leap_year\n检查日期是否为闰年。\n\n\n\n\n\n3. 重采样\n在 Pandas 中，重采样是指将时间序列数据从一个频率转换为另一个频率的过程。重采样可以帮助我们对时间序列数据进行聚合、降采样或升采样，以适应不同的分析需求。Pandas 提供了强大的重采样功能，可以根据日期和时间索引对时间序列数据进行灵活的重采样操作。\n重采样主要有两种类型：降采样（Downsampling）和升采样（Upsampling）。\n\n降采样：降采样是将时间序列数据从高频率转换为低频率。例如，从分钟数据转换为小时数据或从小时数据转换为每日数据。在降采样中，我们需要指定一个时间段，然后对该时间段内的数据进行聚合操作，例如求和、平均值、最大值、最小值等。\n示例代码：\npythonCopy code\ndf.resample('D').sum()  # 将数据按天进行降采样，并计算每天的总和\n升采样：升采样是将时间序列数据从低频率转换为高频率。例如，从每日数据转换为小时数据或从每月数据转换为每日数据。在升采样中，我们通常需要使用插值方法来填充新增的时间点，以估计缺失的数据。\n示例代码：\npythonCopy code\ndf.resample('H').ffill()  # 将数据按小时进行升采样，并使用向前填充方法插值数据\n\n在重采样过程中，我们需要使用 resample() 函数指定重采样的频率，例如 ‘D’ 表示按天重采样，‘H’ 表示按小时重采样。然后，我们可以对重采样对象应用聚合函数（例如 sum()、mean()、max()、min() 等）或插值函数（例如 ffill()、bfill() 等）来处理数据。"
  },
  {
    "objectID": "txt_data.html",
    "href": "txt_data.html",
    "title": "7  使用Pandas处理文本数据",
    "section": "",
    "text": "在Pandas中，文本的主要两个类型是string和object。如果不特殊指定类型为string，文本类型一般为object。\n在通过访问器str实现对文本的操作之前，需要注意：\n\n要确保访问的对象类型是字符串str类型，如果不是，需要使用astype(str)转换类型\n访问器只能对Series数据结构使用，可以多个连接使用。\n\n\n1. 文本格式：大小写变换\n在 Pandas 中，可以使用字符串方法 str.lower() 和 str.upper() 对文本数据进行大小写转换。这些方法可以应用于 Pandas 的 Series或DataFrame列中的文本数据，以将其转换为小写或大写形式。\nimport pandas as pd\n\n# 创建示例数据\ndata = {'text': ['Hello World', 'Welcome to Pandas', 'Text Processing']}\ndf = pd.DataFrame(data)\n\n# 字符全部变成小写\ndf['lowercase'] = df['text'].str.lower()\n\n# 字符全部变成大写\ndf['uppercase'] = df['text'].str.upper()\n\n# 每个单词首字母大写\ndf['titlecase'] = df['text'].str.title()\n\n# 字符串第一个字母大写，其余小写\ndf['capitalize'] = df['text'].str.capitalize()\n\n# 大小写字母转换\ndf['swapcase'] = df['text'].str.swapcase()\n\n# 打印处理后的数据集\nprint(df)\n\n\n2. 文本拆分\n在 Pandas 中，可以使用字符串方法 str.split() 对文本数据进行拆分。该方法可以将字符串按指定的分隔符拆分为多个部分，并返回一个包含拆分结果的 Series或DataFrame列。\n在对文本进行拆分时，可以使用expand参数将拆分出来的内容单独成列，使用n参数指定拆分的位置来控制形成几列。在对文本进行拆分以后，也可以使用get方法提取相关部分单独成列。\n# 使用方法\ns.str.split('x', expand=True, n=1)\n\n# 示例\n# 创建一个包含文本数据的 DataFrame\ndata = {'Text': ['Hello World', 'Python Programming', 'Data Science']}\ndf = pd.DataFrame(data)\n\n# 拆分文本并形成新列\ndf[['Word1', 'Word2']] = df['Text'].str.split(' ', expand=True)\n\nprint(df)\n\n# 输出结果\n#                 Text    Word1        Word2\n# 0        Hello World    Hello        World\n# 1  Python Programming   Python  Programming\n# 2       Data Science      Data      Science\n要进行更复杂的拆分可以借助正则表达式，如：\ns.str.split('\\@|\\.', expand=True, n=1)\n\n\n3. 文本包含\n在 Pandas 中，可以使用字符串方法 str.contains() 来判断文本数据是否包含指定的子串。这个方法返回一个布尔值的 Series或DataFrame列，用于表示每个元素是否包含指定的子串。，一般配合loc查询功能使用可搭配的参数有：\n\npat: 匹配字符串，支持正则表达式\ncase: 是否区分大小写，True表示区别\nflags: 正则库re中的标识，比如re.IGNORECASE\nna: 对缺失值填充\nregex: 是否支持正则，默认True支持\n\n# 使用方法\ns.str.contains(\"\")\n\n# 示例\n# 判断文本是否包含特定子串，并创建新列\ndf['Contains_Python'] = df['Text'].str.contains('Python')\n\nprint(df)\n\n# 输出结果\n#                 Text  Contains_Python\n# 0        Hello World            False\n# 1  Python Programming             True\n# 2       Data Science            False\n\n\n4. 文本格式：计数\n在 Pandas 中，可以使用字符串方法 str.count() 计算文本数据中指定子串的出现次数，同时可以使用字符串方法 str.len() 计量文本的长度。这两个方法可以方便地对文本数据进行计数和测量长度的操作。\n# 使用方法\ns.str.count('') # 字符串种包括指定字母的数量\ns.str.len() # 字符串长度\n\n# 示例\n# 计算指定子串的出现次数，并创建新列\ndf['Count_o'] = df['Text'].str.count('o')\n\n# 计量文本长度，并创建新列\ndf['Text_length'] = df['Text'].str.len()\n\nprint(df)\n\n# 输出结果\n#                 Text  Count_o  Text_length\n# 0        Hello World        2           11\n# 1  Python Programming        2           19\n# 2       Data Science        0           12\n\n\n5. 文本替换\n文本替换通常使用replace方法进行，可选参数如下：\n\npal：为被替代的内容字符串，也可以为正则表达式\nrepl：为新内容字符串，也可以是一个被调用的函数\nregex：用于设置是否支持正则，默认是True\n\n# 使用方法\ns.str.replace(\"s\":\"S\", \"f\":\"F\")\n\n# 示例\n# 将指定子串替换为新值，并创建新列\ndf['New_Text'] = df['Text'].str.replace('o', 'x')\n\nprint(df)\n\n# 输出结果\n#                 Text            New_Text\n# 0        Hello World        Hellx Wxrld\n# 1  Python Programming  Pythxn Prxgramming\n# 2       Data Science       Data Science"
  },
  {
    "objectID": "zhizai.html",
    "href": "zhizai.html",
    "title": "6  如何计算汇总统计",
    "section": "",
    "text": "describe()的用法\n在Pandas中，您可以使用describe()方法查看数值型列的汇总统计信息。这个方法提供了关于数据分布的有用统计量，包括计数、平均值、标准差、最小值、25%、50%和75%的分位数，以及最大值。\n示例代码：\nimport pandas as pd\n\n# 创建DataFrame示例\ndata = {'Name': ['John', 'Emma', 'Alex', 'Sophia', 'James'],\n        'Age': [25, 28, 22, 30, 32],\n        'Height': [175, 162, 180, 158, 170],\n        'Weight': [70, 58, 75, 52, 68]}\ndf = pd.DataFrame(data)\n\n# 查看数值型列的汇总统计\nsummary_stats = df.describe()\nmean_age = df['Age'].mean()\nmedian_height = df['Height'].median()\nmax_weight = df['Weight'].max()\n\nprint(summary_stats)\nprint(\"Mean Age:\", mean_age)\nprint(\"Median Height:\", median_height)\nprint(\"Max Weight:\", max_weight)\n输出：\n             Age      Height     Weight\ncount   5.000000    5.000000   5.000000\nmean   27.400000  169.000000  64.600000\nstd     4.131759    8.660254   8.996037\nmin    22.000000  158.000000  52.000000\n25%    25.000000  162.000000  58.000000\n50%    28.000000  170.000000  68.000000\n75%    30.000000  175.000000  70.000000\nmax     32.000000  180.000000  75.000000\n\nMean Age: 27.4\nMedian Height: 170.0\nMax Weight: 75\n\n常用的计算汇总统计的方法：\n\ndescribe()方法：计算数值型列的基本统计信息，包括计数、均值、标准差、最小值、25%、50%和75%分位数以及最大值。\nmean()方法：计算数值型列的平均值。\nmedian()方法：计算数值型列的中位数。\nmin()方法：计算数值型列的最小值。\nmax()方法：计算数值型列的最大值。\nsum()方法：计算数值型列的总和。\ncount()方法：计算非缺失值的数量。\nstd()方法：计算数值型列的标准差。\nvar()方法：计算数值型列的方差。\n\n通过查看数值型列的汇总统计，可以快速了解数据的整体分布和统计特征，有助于进行数据分析和洞察。\n\n\nsize和count\n在Pandas中，size和count是用于计算分组数据的两个方法，常常与groupby一起使用。它们可以提供关于每个分组的计数信息，但在计算方式和返回结果上有一些区别。\nsize方法：\n\nsize方法用于计算每个分组中的元素数量，包括缺失值。\n返回的结果是一个Series，其索引是分组键，值是每个分组中的元素数量。\nsize方法不考虑缺失值，即使某个分组中存在缺失值，它也会将其计算为有效元素。\n\ncount方法：\n\ncount方法用于计算每个分组中非缺失值的数量。\n返回的结果是一个Series，其索引是分组键，值是每个分组中的非缺失值的数量。\ncount方法排除了缺失值，只计算非缺失值的数量。\n\n示例，演示如何使用size和count方法结合groupby对数据进行计数：\nimport pandas as pd\n\n# 创建一个示例DataFrame\ndata = {'Group': ['A', 'A', 'B', 'B', 'B'],\n        'Value': [1, 2, 3, None, 5]}\ndf = pd.DataFrame(data)\n\n# 使用groupby和size计算每个分组的元素数量\nsize_result = df.groupby('Group').size()\n\n# 使用groupby和count计算每个分组的非缺失值数量\ncount_result = df.groupby('Group').count()\n\nprint(\"Size结果:\")\nprint(size_result)\nprint(\"\\nCount结果:\")\nprint(count_result)\n输出：\nSize结果:\nGroup\nA    2\nB    3\ndtype: int64\n\nCount结果:\n       Value\nGroup       \nA          2\nB          2\n\n\n如何重塑表格布局\n\nsort的用法\n在Pandas中，sort_values和sort_index是用于对DataFrame或Series进行排序的两个常用方法。\n\nsort_values方法：\n\nsort_values方法用于按照指定的列或多个列的值对DataFrame或Series进行排序。\n可以通过by参数指定要排序的列或多个列，以列表形式提供。\n可以使用ascending参数来控制排序的升序或降序，默认为True（升序）。\n可以使用inplace参数来指定是否原地修改DataFrame或Series，默认为False，即返回排序后的副本。\n示例：\nimport pandas as pd\n\ndf = pd.DataFrame({'A': [3, 2, 1], 'B': [1, 3, 2]})\nsorted_df = df.sort_values(by='A', ascending=True)\n上述代码将按照’A’列的值对DataFrame df 进行升序排序，并将结果存储在sorted_df中。\n\nsort_index方法：\n\nsort_index方法用于根据索引对DataFrame或Series进行排序。\n可以使用axis参数指定要排序的轴，axis=0表示按行索引排序，axis=1表示按列索引排序。\n可以使用ascending参数来控制排序的升序或降序，默认为True（升序）。\n可以使用inplace参数来指定是否原地修改DataFrame或Series，默认为False，即返回排序后的副本。\n示例：\nimport pandas as pd\n\ndf = pd.DataFrame({'A': [3, 2, 1], 'B': [1, 3, 2]}, index=[2, 1, 3])\nsorted_df = df.sort_index(axis=0, ascending=True)\n上述代码将按照行索引对DataFrame df 进行升序排序，并将结果存储在sorted_df中。\n\n\n排序操作可以根据具体需求来选择使用sort_values还是sort_index。如果希望根据列的值进行排序，使用sort_values方法；如果希望根据索引进行排序，使用sort_index方法。\n\n在Pandas中，可以使用不同的方法来重新塑造（reshape）表格布局，以满足特定的数据分析和处理需求。以下是一些常用的重塑表格布局的方法：\n\n\npivot()方法\npivot()方法：用于将长格式（long format）的数据转换为宽格式（wide format），根据指定的列创建新的列，并使用列值进行填充。\n示例，展示如何使用pivot()方法将数据从长格式转换为宽格式：\nimport pandas as pd\n\n# 创建示例DataFrame\ndata = {'Name': ['John', 'John', 'Emma', 'Emma', 'Alex', 'Alex'],\n        'Subject': ['Math', 'Science', 'Math', 'Science', 'Math', 'Science'],\n        'Score': [85, 92, 78, 88, 90, 85]}\ndf = pd.DataFrame(data)\n\n# 使用pivot方法重塑表格布局\npivot_df = df.pivot(index='Name', columns='Subject', values='Score')\nprint(pivot_df)\n输出：\nSubject  Math  Science\nName                  \nAlex       90       85\nEmma       78       88\nJohn       85       92\n\n\nmelt()方法\n在Pandas中，melt()是一个用于将宽格式（wide format）的数据转换为长格式（long format）的方法。它将数据从列中展开成为更长的格式，使得数据更适合进行分析和可视化。\nmelt()方法的语法如下：\nDataFrame.melt(id_vars=None, value_vars=None, var_name=None, value_name='value', col_level=None)\n参数说明：\n\nid_vars：可选参数，指定要保留的列名，不进行展开操作。\nvalue_vars：可选参数，指定要进行展开操作的列名。如果未指定，则默认展开所有未指定为id_vars的列。\nvar_name：可选参数，指定展开后的列名的名称。\nvalue_name：可选参数，指定展开后的值的列名的名称，默认为value。\ncol_level：可选参数，用于多层索引列的级别。\n\n下面是一个示例，演示如何使用melt()方法将宽格式的数据转换为长格式：\nimport pandas as pd\n\n# 创建一个示例DataFrame\ndata = {\n    'Name': ['Alice', 'Bob', 'Charlie'],\n    'Math': [90, 80, 70],\n    'Science': [95, 85, 75],\n    'History': [92, 82, 72]\n}\ndf = pd.DataFrame(data)\n\n# 使用melt()方法进行数据转换\nmelted_df = df.melt(id_vars='Name', value_vars=['Math', 'Science', 'History'], var_name='Subject', value_name='Score')\n\nprint(\"原始DataFrame:\")\nprint(df)\nprint(\"\\n转换后的DataFrame:\")\nprint(melted_df)\n输出：\n原始DataFrame:\n      Name  Math  Science  History\n0    Alice    90       95       92\n1      Bob    80       85       82\n2  Charlie    70       75       72\n\n转换后的DataFrame:\n      Name  Subject  Score\n0    Alice     Math     90\n1      Bob     Math     80\n2  Charlie     Math     70\n3    Alice  Science     95\n4      Bob  Science     85\n5  Charlie  Science     75\n6    Alice  History     92\n7      Bob  History     82\n8  Charlie  History     72\n\n\nstack()方法\n\nstack()方法：\n\n在Pandas中，stack()是一个用于对DataFrame进行堆叠操作的方法。它将列标签（Column labels）转换为行索引（Row index），将数据从宽格式转换为长格式，从而生成一个更紧凑的DataFrame。\nstack()方法的语法如下：\nDataFrame.stack(level=-1, dropna=True)\n参数说明：\n\nlevel：可选参数，用于多层索引列的级别。默认值为-1，表示堆叠所有列。\ndropna：可选参数，指定是否删除包含缺失值的行，默认为True。\n\n示例：\nimport pandas as pd\n\n# 创建一个示例DataFrame\ndata = {\n    'Name': ['Alice', 'Bob'],\n    'Math': [90, 80],\n    'Science': [95, 85],\n    'History': [92, 82]\n}\ndf = pd.DataFrame(data)\n\n# 使用stack()方法进行堆叠操作\nstacked_df = df.set_index('Name').stack().reset_index()\n\nprint(\"原始DataFrame:\")\nprint(df)\nprint(\"\\n堆叠后的DataFrame:\")\nprint(stacked_df)\n输出：\n原始DataFrame:\n   Name  Math  Science  History\n0  Alice    90       95       92\n1    Bob    80       85       82\n\n堆叠后的DataFrame:\n    Name  level_1   0\n0  Alice     Math  90\n1  Alice  Science  95\n2  Alice  History  92\n3    Bob     Math  80\n4    Bob  Science  85\n5    Bob  History  82\n\n\nunstack()方法\n在Pandas中，unstack()是用于将表格中的行索引转换为列索引，将数据从长格式转换为宽格式。\nunstack()方法的语法如下：\nDataFrame.unstack(level=-1, fill_value=None)\n参数说明：\n\nlevel：可选参数，用于指定要展开的层次化索引的级别。默认值为-1，表示展开最内层索引。\nfill_value：可选参数，用于指定填充缺失值的值。\n\n示例：\nimport pandas as pd\n\n# 创建一个示例DataFrame\ndata = {\n    'Name': ['Alice', 'Bob'],\n    'Subject': ['Math', 'Science'],\n    'Score': [90, 80]\n}\ndf = pd.DataFrame(data)\n\n# 将DataFrame进行设置层次化索引\nindexed_df = df.set_index(['Name', 'Subject'])\n\n# 使用unstack()方法进行展开操作\nunstacked_df = indexed_df.unstack()\n\nprint(\"原始DataFrame:\")\nprint(df)\nprint(\"\\n展开后的DataFrame:\")\nprint(unstacked_df)\n输出结果如下：\n原始DataFrame:\n   Name  Subject  Score\n0  Alice     Math     90\n1    Bob  Science     80\n\n展开后的DataFrame:\n        Score        \nSubject  Math Science\nName                 \nAlice      90     NaN\nBob       NaN      80\n\n\n\n如何合并多个表中的数据\n在Pandas中，可以使用不同的方法来合并（merge）多个表中的数据。以下是一些常用的合并数据的方法：\n\nconcat()方法\n在Pandas中，concat()是一个用于沿指定轴（行或列）将多个DataFrame对象进行合并的方法。它可以将多个DataFrame对象按照指定的方式进行连接，并返回一个合并后的DataFrame。以下是关于concat()方法的解释和示例说明：\nconcat()方法的语法如下：\npd.concat(objs, axis=0, join='outer', ignore_index=False)\n参数说明：\n\nobjs：要合并的DataFrame对象列表或字典。\naxis：可选参数，指定合并的轴。默认为0，表示按行合并；1表示按列合并。\njoin：可选参数，指定连接的方式。默认为'outer'，表示按照并集进行连接；'inner'表示按照交集进行连接。\nignore_index：可选参数，指定是否忽略合并后的索引。默认为False，表示保留原始索引。\n\n示例：\nimport pandas as pd\n\n# 创建示例DataFrame\ndf1 = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6]})\ndf2 = pd.DataFrame({'A': [7, 8, 9], 'B': [10, 11, 12]})\n\n# 使用concat()方法进行合并操作\nmerged_df = pd.concat([df1, df2])\n\nprint(\"合并后的DataFrame:\")\nprint(merged_df)\n输出：\n合并后的DataFrame:\n   A   B\n0  1   4\n1  2   5\n2  3   6\n0  7  10\n1  8  11\n2  9  12\n\n\nmerge()方法\n在Pandas中，merge()是一个用于合并（或连接）多个DataFrame对象的方法。它基于指定的键（或多个键）将多个DataFrame按照指定的方式进行连接，并返回一个合并后的DataFrame。\nmerge()方法的语法如下：\npd.merge(left, right, how='inner', on=None, left_on=None, right_on=None, left_index=False, right_index=False, sort=True)\n参数说明：\n\nleft：左侧的DataFrame对象。\nright：右侧的DataFrame对象。\nhow：可选参数，指定连接方式。默认为'inner'，表示按照键的交集进行连接；'outer'表示按照键的并集进行连接；'left'表示按照左侧DataFrame的键进行连接；'right'表示按照右侧DataFrame的键进行连接。\non：可选参数，用于指定连接的键。可以是一个列名的字符串，或多个列名组成的列表。\nleft_on：可选参数，用于指定左侧DataFrame连接键的列名或列名列表。\nright_on：可选参数，用于指定右侧DataFrame连接键的列名或列名列表。\nleft_index：可选参数，指定是否使用左侧DataFrame的索引作为连接键。\nright_index：可选参数，指定是否使用右侧DataFrame的索引作为连接键。\nsort：可选参数，指定是否按照连接键进行排序。\n\n示例：\nimport pandas as pd\n\n# 创建示例DataFrame\ndf1 = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'Key': ['K1', 'K2', 'K3']})\ndf2 = pd.DataFrame({'C': [7, 8, 9], 'D': [10, 11, 12], 'Key': ['K2', 'K3', 'K4']})\n\n# 使用merge()方法进行合并操作\nmerged_df = pd.merge(df1, df2, on='Key')\n\nprint(\"合并后的DataFrame:\")\nprint(merged_df)\n输出结果如下：\n合并后的DataFrame:\n   A  B Key  C   D\n0  2  5  K2  7  10\n1  3  6  K3  8  11\n\n\njoin()方法\n在Pandas中，join()是一个用于基于索引或列之间的关系将两个DataFrame对象进行连接的方法。它类似于SQL中的JOIN操作，可以根据指定的连接键将两个DataFrame进行合并，并返回一个合并后的DataFrame。\njoin()方法的语法如下：\nDataFrame.join(other, on=None, how='left', lsuffix='', rsuffix='', sort=False)\n参数说明：\n\nother：要连接的另一个DataFrame对象。\non：可选参数，用于指定连接键。可以是一个列名的字符串，或多个列名组成的列表。如果未指定，则根据索引进行连接。\nhow：可选参数，指定连接方式。默认为'left'，表示按照左侧DataFrame的索引或列进行连接；'right'表示按照右侧DataFrame的索引或列进行连接；'inner'表示按照两个DataFrame共有的索引或列进行连接；'outer'表示按照两个DataFrame的并集进行连接。\nlsuffix：可选参数，用于处理连接时重叠列名的后缀（左侧DataFrame）。\nrsuffix：可选参数，用于处理连接时重叠列名的后缀（右侧DataFrame）。\nsort：可选参数，指定是否按照连接键进行排序。\n\n示例：\nimport pandas as pd\n\n# 创建示例DataFrame\ndf1 = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6]}, index=['K1', 'K2', 'K3'])\ndf2 = pd.DataFrame({'C': [7, 8, 9], 'D': [10, 11, 12]}, index=['K2', 'K3', 'K4'])\n\n# 使用join()方法进行连接操作\njoined_df = df1.join(df2)\n\nprint(\"连接后的DataFrame:\")\nprint(joined_df)\n输出：\n连接后的DataFrame:\n     A    B    C     D\nK1   1    4  NaN   NaN\nK2   2    5  7.0  10.0\nK3   3    6  8.0  11.0\n\n\n补充：T（Transpose）转置\n在Pandas中，T（Transpose）是一个用于转置数据的方法。转置操作会将DataFrame或Series的行和列进行交换，从而生成一个新的转置后的数据结构。以下是关于Pandas中的T转置的一些知识点：\n\nDataFrame的转置： 转置DataFrame时，行索引将会变成转置前的列索引，列索引将会变成转置前的行索引。可以使用T方法来执行转置操作，例如：\nimport pandas as pd\n\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6]})\ntransposed_df = df.T\n上述代码将创建一个DataFrame df，然后使用T方法将其转置，结果将会存储在transposed_df中。\nSeries的转置： 转置一个Series对象会生成一个具有单一列的DataFrame，行索引将会保持不变，而列索引将会变为转置前的索引值。可以使用T方法对Series进行转置，例如：\nimport pandas as pd\n\nseries = pd.Series([1, 2, 3, 4], index=['A', 'B', 'C', 'D'])\ntransposed_series = series.T\n上述代码将创建一个Series series，然后使用T方法将其转置，结果将会存储在transposed_series中。\n转置对数据结构的影响： 转置操作不会改变原始数据结构，而是生成一个新的转置后的数据结构。原始数据结构保持不变，只是行和列的排列顺序发生了变化。\n转置的应用： 转置操作常用于需要改变数据结构的情况，例如在数据分析和处理过程中，可以使用转置来更改数据的布局以满足特定的分析需求。\n\n需要注意的是，转置操作可能会导致数据结构的变化，因此在进行转置操作之后，索引和列名可能需要进行调整以适应新的结构。"
  },
  {
    "objectID": "快速入门.html",
    "href": "快速入门.html",
    "title": "2  1. 导入pandas包",
    "section": "",
    "text": "import pandas as pd\n\n# 2. 假设data数据\ndata = {\n  \"calories\": [420, 380, 390],\n  \"duration\": [50, 40, 45]\n}\n\n# 3. 假设df，然后调用pd(pandas包)，将数据转换为DataFrame格式\ndf = pd.DataFrame(data)\n\n# 4. 打印df\ndf"
  },
  {
    "objectID": "pandas处理什么样的数据.html#表格数据",
    "href": "pandas处理什么样的数据.html#表格数据",
    "title": "2  pandas处理什么样的数据",
    "section": "表格数据",
    "text": "表格数据\nPandas最常用于处理表格数据，例如CSV文件、Excel文件、数据库查询结果等。你可以使用Pandas读取这些数据，并对其进行各种操作，如过滤、排序、合并、聚合、计算统计指标等。\n当使用Pandas处理表格数据时，你可以使用DataFrame这个主要的数据结构。DataFrame是一个二维的标记数组，类似于电子表格或SQL表。\n\n\nCode\n# 1. 导入pandas包\nimport pandas as pd\n\n# 2. 假设data数据\ndata = {\n  \"calories\": [420, 380, 390],\n  \"duration\": [50, 40, 45]\n}\n\n# 3. 假设df，然后调用pd(pandas包)，将数据转换为DataFrame格式\ndf = pd.DataFrame(data)\n\n# 4. 打印df\ndf\n\n\n\n\n\n\n\n\n\ncalories\nduration\n\n\n\n\n0\n420\n50\n\n\n1\n380\n40\n\n\n2\n390\n45"
  },
  {
    "objectID": "pandas处理什么样的数据.html#时间序列数据",
    "href": "pandas处理什么样的数据.html#时间序列数据",
    "title": "2  pandas处理什么样的数据",
    "section": "时间序列数据",
    "text": "时间序列数据\nPandas提供了强大的时间序列功能，可以处理日期和时间相关的数据。你可以使用Pandas对时间序列数据进行重采样、滚动计算、时间窗口分析、时间序列绘图等操作。\n\n\nCode\nimport pandas as pd\n\ndate = pd.to_datetime(\"13th of June, 2023\")\n\ndate\n\n\nTimestamp('2023-06-13 00:00:00')\n\n\n可以使用DateTimeIndex和TimedeltaIndex来表示时间索引和时间间隔。\n\n\nCode\nimport pandas as pd\n# 创建一个包含日期范围的时间索引\ndate_range = pd.date_range(start='2023-01-01', end='2023-01-10', freq='D')\n\n# 创建一个DataFrame，并使用时间索引\ndata = pd.DataFrame({'Value': [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]}, index=date_range)\n\n# 查看数据的前几行\ndata.head()\n\n\n\n\n\n\n\n\n\nValue\n\n\n\n\n2023-01-01\n10\n\n\n2023-01-02\n20\n\n\n2023-01-03\n30\n\n\n2023-01-04\n40\n\n\n2023-01-05\n50\n\n\n\n\n\n\n\n选取所需的时间序列数据，并进行计算\n\n\nCode\n# 通过日期索引获取某一天的数据\nday_data = data.loc['2023-01-05']\n\n# 通过日期范围索引获取一段时间内的数据\nrange_data = data.loc['2023-01-03':'2023-01-07']\n\n# 使用日期的年、月、日等属性进行切片\nyear_data = data[data.index.year == 2023]\nmonth_data = data[data.index.month == 1]\nday_data = data[data.index.day == 5]\n\n# 将数据按周进行重采样，计算每周的平均值\nweekly_data = data.resample('W').mean()\n\n# 将数据按月进行重采样，计算每月的总和\nmonthly_data = data.resample('M').sum()"
  },
  {
    "objectID": "pandas处理什么样的数据.html#缺失数据处理",
    "href": "pandas处理什么样的数据.html#缺失数据处理",
    "title": "2  pandas处理什么样的数据",
    "section": "缺失数据处理",
    "text": "缺失数据处理\nPandas提供了灵活的方法来处理缺失数据。你可以使用Pandas来检测和处理缺失值，填充缺失数据，或者根据缺失值进行数据筛选和计算。\n\n\nCode\n# 创建带有缺失数据的DataFrame\ndata = pd.DataFrame({'A': [1, 2, None, 4, 5],\n                     'B': [None, 2, 3, None, 6],\n\n                     'C': [1, 2, 3, 4, 5]})\n\n\n检查并统计缺失值\n\n\nCode\n# 检测每个单元格是否为缺失值\nmissing_values = data.isnull()\n\n# 统计每列的缺失值数量\nmissing_counts = data.isnull().sum()\n\n# 统计整个DataFrame的缺失值数量\ntotal_missing_count = data.isnull().sum().sum()\n\n\n对缺失值进行操作\n\n\nCode\n# 删除包含缺失值的行\ndata_dropna = data.dropna()\n\n# 删除全部为缺失值的列\ndata_dropna_cols = data.dropna(axis=1, how='all')\n\n# 填充缺失值为指定的常数\ndata_fillna = data.fillna(0)\n\n# 使用缺失值前面的值进行前向填充\ndata_ffill = data.fillna(method='ffill')\n\n# 使用缺失值后面的值进行后向填充\ndata_bfill = data.fillna(method='bfill')"
  },
  {
    "objectID": "pandas处理什么样的数据.html#数据清洗和转换",
    "href": "pandas处理什么样的数据.html#数据清洗和转换",
    "title": "2  pandas处理什么样的数据",
    "section": "数据清洗和转换",
    "text": "数据清洗和转换\nPandas可以用于数据清洗和转换的各种操作。你可以使用Pandas对数据进行重塑、合并、分组、变形等，以满足特定的分析需求。\n\n\nCode\n# 创建原始数据\ndata = pd.DataFrame({'Name': ['John', 'Emily', 'Michael', 'Emma'],\n                     'Age': [25, 30, 35, 28],\n                     'Gender': ['M', 'F', 'M', 'F'],\n                     'Salary': ['$5000', '$6000', '$4500', '$7000']})\n\n\n\n数据清洗\n清洗重复或者多余数据\n\n\nCode\n# 去除重复的行\ndata_cleaned = data.drop_duplicates()\n\n# 去除列中的空格\ndata_cleaned['Name'] = data_cleaned['Name'].str.strip()\n\n# 删除缺失值所在的行\ndata_cleaned = data_cleaned.dropna()\n\n\n\n\n数据转换\n将列表转换为系列（Series）\nseries = pd.Series(list)\n\n\nCode\nimport pandas as pd\n\n# 将列表转换为系列\nmy_list = [1, 2, 3, 4, 5]\nseries = pd.Series(my_list)\nseries\n\n\n0    1\n1    2\n2    3\n3    4\n4    5\ndtype: int64\n\n\n将系列（Series）转换为数据帧（DataFrame）\ndataframe = series.to_frame()\n\n\nCode\n# 将系列转换为数据帧\nseries = pd.Series([1, 2, 3, 4, 5])\ndataframe = series.to_frame()\ndataframe\n\n\n\n\n\n\n\n\n\n0\n\n\n\n\n0\n1\n\n\n1\n2\n\n\n2\n3\n\n\n3\n4\n\n\n4\n5\n\n\n\n\n\n\n\n将数据帧（DataFrame）转换为列表（list）\nmy_list = df.values.tolist()\n\n\nCode\n# 将数据帧转换为列表\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6]})\nmy_list = df.values.tolist()\nmy_list\n\n\n[[1, 4], [2, 5], [3, 6]]\n\n\n\n\n\n\n\n\nTip\n\n\n\n数据的清洗和转换是pandas最常使用的功能，之后我们会逐步拆解，进行详细说明"
  },
  {
    "objectID": "pandas处理什么样的数据.html#数据可视化",
    "href": "pandas处理什么样的数据.html#数据可视化",
    "title": "2  pandas处理什么样的数据",
    "section": "数据可视化",
    "text": "数据可视化\nPandas集成了Matplotlib库，可以通过简单的接口生成各种统计图表和可视化图形，以便更好地理解和呈现数据。\n\n\nCode\n# 创建数据\ndata = pd.DataFrame({'Month': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'],\n                     'Sales': [100, 150, 120, 200, 180, 250],\n                     'Expenses': [80, 90, 100, 85, 95, 110]})\n\n# 折线图\ndata.plot(x='Month', y='Sales', kind='line')\n\n\n&lt;Axes: xlabel='Month'&gt;\n\n\n\n\n\n\n\n\n\n\n\nTip\n\n\n\n虽然pandas也可以画图，但是还是静态图形，之后我们会详细说明更加简洁和酷炫的可视化库 Plotly库"
  },
  {
    "objectID": "pandas处理什么样的数据.html#数据建模和分析",
    "href": "pandas处理什么样的数据.html#数据建模和分析",
    "title": "2  pandas处理什么样的数据",
    "section": "数据建模和分析",
    "text": "数据建模和分析\nPandas还支持数据建模和分析的操作。你可以使用Pandas进行数据建模、特征工程、数据预处理等，然后将数据传递给机器学习库（如Scikit-learn）进行模型训练和预测。网上看到不错的数据预测案例"
  },
  {
    "objectID": "添加新列.html#添加新列",
    "href": "添加新列.html#添加新列",
    "title": "5  增删排序(DataFrame)",
    "section": "添加新列",
    "text": "添加新列\n可以看到目前的案例中是四行三列，如果我想添加新的一列“薪资”，有两种方法：\n\n方法一： df[‘列名’] = 值\n\n\nCode\n\ndf['工资'] = [5000, 6000, '', 7000]\ndf\n\n\n\n\n\n\n\n\n\n姓名\n年龄\n性别\n工资\n\n\n\n\n0\n张三\n25\nM\n5000\n\n\n1\n李四\n30\nF\n6000\n\n\n2\n王五\n35\nM\n\n\n\n3\n赵六\n28\nF\n7000\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n[值]必须对应行数，这里有四个人就必须有四个值，没有则可以为空白' ' 或者 'NA'；[]里面的顺序也会保持一样\n\n\n\n\n方法二：使用assign()\n\n\nCode\n\ndf = df.assign(工资=[5000, 6000, 4500, 7000])\ndf\n\n\n\n\n\n\n\n\n\n姓名\n年龄\n性别\n工资\n\n\n\n\n0\n张三\n25\nM\n5000\n\n\n1\n李四\n30\nF\n6000\n\n\n2\n王五\n35\nM\n4500\n\n\n3\n赵六\n28\nF\n7000\n\n\n\n\n\n\n\n我们可以在原有表格中添加新列，也可以从其他数据源（如文件、数据库等）中导入数据，并将其作为新列添加到DataFrame中。"
  },
  {
    "objectID": "添加新列.html#添加新行",
    "href": "添加新列.html#添加新行",
    "title": "5  增删排序(DataFrame)",
    "section": "添加新行",
    "text": "添加新行\n\n方法一： 使用append方法\ndf = df.append(new_row, ignore_index=True)\n其中，new_row是一个包含新行数据的字典或Series对象。\n\n\nCode\n# 重新选取数据\ndata = {'姓名': ['张三', '李四', '王五', '赵六'],\n        '年龄': [25, 30, 35, 28],\n        '性别': ['M', 'F', 'M', 'F']}\n\ndf = pd.DataFrame(data)\n\n\n\n\nCode\n#`ignore_index=True`是确保新行的索引与原始DataFrame的索引保持一致。\n\nnew_row = {'姓名': '熊大', '年龄': 35, '性别': 'M'}\n\ndf = df.append(new_row, ignore_index=True)\ndf\n\n\n/var/folders/fx/3rtntmd93wg4hsmfkcgfpq840000gn/T/ipykernel_42888/3717194637.py:5: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.\n  df = df.append(new_row, ignore_index=True)\n\n\n\n\n\n\n\n\n\n姓名\n年龄\n性别\n\n\n\n\n0\n张三\n25\nM\n\n\n1\n李四\n30\nF\n\n\n2\n王五\n35\nM\n\n\n3\n赵六\n28\nF\n\n\n4\n熊大\n35\nM\n\n\n\n\n\n\n\n\n\n方法二：使用concat()\n先创建一个新的DataFrame，然后将其与原始DataFrame进行合并\n\n\nCode\nnew_row = {'姓名': '熊二', '年龄': 30, '性别': 'M'}\n\nnew_df = pd.DataFrame([new_row])\n\ndf = pd.concat([df, new_df], ignore_index=True)\ndf\n\n\n\n\n\n\n\n\n\n姓名\n年龄\n性别\n\n\n\n\n0\n张三\n25\nM\n\n\n1\n李四\n30\nF\n\n\n2\n王五\n35\nM\n\n\n3\n赵六\n28\nF\n\n\n4\n熊大\n35\nM\n\n\n5\n熊二\n30\nM"
  },
  {
    "objectID": "添加新列.html#删除行列",
    "href": "添加新列.html#删除行列",
    "title": "5  增删排序(DataFrame)",
    "section": "删除行/列",
    "text": "删除行/列\n\n使用drop方法删除列\ndf = df.drop('column_name', axis=1)\n需要提供要删除的列名，然后指定axis=1表示按列进行操作。删除列后，DataFrame会自动调整列的顺序。\n\n\nCode\ndf = df.drop('性别', axis=1)\ndf\n\n\n\n\n\n\n\n\n\n姓名\n年龄\n\n\n\n\n0\n张三\n25\n\n\n1\n李四\n30\n\n\n2\n王五\n35\n\n\n3\n赵六\n28\n\n\n4\n熊大\n35\n\n\n5\n熊二\n30\n\n\n\n\n\n\n\n\n\n使用drop方法删除行\ndf = df.drop(row_index)\n使用drop方法根据行的索引来删除特定的行\n\n\nCode\n# 删除第五行数据\ndf = df.drop(5)\ndf\n\n\n\n\n\n\n\n\n\n姓名\n年龄\n\n\n\n\n0\n张三\n25\n\n\n1\n李四\n30\n\n\n2\n王五\n35\n\n\n3\n赵六\n28\n\n\n4\n熊大\n35"
  },
  {
    "objectID": "添加新列.html#重命名列",
    "href": "添加新列.html#重命名列",
    "title": "5  增删排序(DataFrame)",
    "section": "重命名列",
    "text": "重命名列\n\n使用rename方法：\ndf = df.rename(columns={'old_column_name': 'new_column_name'})\n其中，old_column_name是要重命名的旧列名，new_column_name是新的列名。\n\n\nCode\ndf = df.rename(columns={'姓名': '乘客id', '年龄':'乘客年龄'})\ndf\n\n\n\n\n\n\n\n\n\n乘客id\n乘客年龄\n\n\n\n\n0\n张三\n25\n\n\n1\n李四\n30\n\n\n2\n王五\n35\n\n\n3\n赵六\n28\n\n\n4\n熊大\n35"
  },
  {
    "objectID": "添加新列.html#按值排序",
    "href": "添加新列.html#按值排序",
    "title": "5  增删排序(DataFrame)",
    "section": "按值排序",
    "text": "按值排序\n\n使用sort_values方法：\ndf = df.sort_values(by='column_name', ascending=True)\n其中，column_name是你想要按其值进行排序的列名。ascending=True表示按升序排序，若要按降序排序，将ascending设置为False。\n通过sort_values方法，你可以根据特定列的值对DataFrame进行排序。你可以选择按单个列的值排序，也可以按多个列的值排序，只需在by参数中提供相应的列名列表即可。\n\n\nCode\ndf = df.sort_values(by='乘客年龄', ascending=True)\ndf\n\n\n\n\n\n\n\n\n\n乘客id\n乘客年龄\n\n\n\n\n0\n张三\n25\n\n\n3\n赵六\n28\n\n\n1\n李四\n30\n\n\n2\n王五\n35\n\n\n4\n熊大\n35"
  },
  {
    "objectID": "导入&导出数据.html#选取特定数据",
    "href": "导入&导出数据.html#选取特定数据",
    "title": "3  导入&导出数据",
    "section": "选取特定数据",
    "text": "选取特定数据\n在数据分析中，选取需要的数据进行处理和分析是很重要的。在Excel中，主要通过鼠标点选或拖拽来选取数据。\n而在pandas中，我们也可以通过行列名、索引以及各种条件来筛选感兴趣的数据子集，并进行数据过滤、筛选、切片、分析和连接等操作。\n\n\nCode\n# 获取案例数据\nimport pandas as pd\ndf = pd.read_csv('https://raw.githubusercontent.com/pandas-dev/pandas/main/doc/data/titanic.csv') \ndf.head()\n\n\n\n\n\n\n\n\n\nPassengerId\nSurvived\nPclass\nName\nSex\nAge\nSibSp\nParch\nTicket\nFare\nCabin\nEmbarked\n\n\n\n\n0\n1\n0\n3\nBraund, Mr. Owen Harris\nmale\n22.0\n1\n0\nA/5 21171\n7.2500\nNaN\nS\n\n\n1\n2\n1\n1\nCumings, Mrs. John Bradley (Florence Briggs Th...\nfemale\n38.0\n1\n0\nPC 17599\n71.2833\nC85\nC\n\n\n2\n3\n1\n3\nHeikkinen, Miss. Laina\nfemale\n26.0\n0\n0\nSTON/O2. 3101282\n7.9250\nNaN\nS\n\n\n3\n4\n1\n1\nFutrelle, Mrs. Jacques Heath (Lily May Peel)\nfemale\n35.0\n1\n0\n113803\n53.1000\nC123\nS\n\n\n4\n5\n0\n3\nAllen, Mr. William Henry\nmale\n35.0\n0\n0\n373450\n8.0500\nNaN\nS\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n本教程使用存储为 CSV 格式的泰坦尼克号数据集。以下是详细说明（改成折叠！！！！！）\nPassengerId：每位乘客的Id。\nSurvived：指示乘客是否幸存。0是和1否。\nPclass：3 个机票类别之一：Class 1、Class2和 Class 3。\nName：乘客姓名。\nSex：乘客的性别。\nAge：乘客的年龄。\nSibSp：船上兄弟姐妹或配偶的数量。\nParch：船上父母或孩子的人数。\nTicket：旅客的客票号。\nFare：表示票价。\nCabin：乘客的客舱号。\nEmbarked：登船的港口。\n\n\n\n3.0.3 选取特定列\n通过列索引标签或以属性的方式可以单独获取 DataFrame的列数据，返回的数据为 Series结构。\n假如我想知道每位乘客的姓名id（选取单列），df为数据表格，Name为列名\n\n\nCode\n# 方法一：\ndf['Name']\n\n# 方法二：\ndf.Name\n\n# 方法三：\ndf.loc[:, 'Name']\n\n\n0                                Braund, Mr. Owen Harris\n1      Cumings, Mrs. John Bradley (Florence Briggs Th...\n2                                 Heikkinen, Miss. Laina\n3           Futrelle, Mrs. Jacques Heath (Lily May Peel)\n4                               Allen, Mr. William Henry\n                             ...                        \n886                                Montvila, Rev. Juozas\n887                         Graham, Miss. Margaret Edith\n888             Johnston, Miss. Catherine Helen \"Carrie\"\n889                                Behr, Mr. Karl Howell\n890                                  Dooley, Mr. Patrick\nName: Name, Length: 891, dtype: object\n\n\n假如我想知道所有乘客的幸存情况（获取多列），我们可以通过两个中括号，可以获取多个列的数据。\n\n\nCode\ndf[['Name','Survived']].head()\n\n\n\n\n\n\n\n\nTip\n\n\n\n内部方括号定义了一个 带有列名的Python列表，而外部方括号用于从 pandas 中选择数据\n\n\n\n\n3.0.4 选取特定行\n通过行索引获取行数据，冒号指定范围\n假设想知道第三行，Laina小姐的信息（单行）\n\n\nCode\n# 选取从第二行到第三行到数据\ndf[2:3]\n\n# df[2:5] 选取从第三行到第五行到数据\n\n\n\n\n\n\n\n\n\nPassengerId\nSurvived\nPclass\nName\nSex\nAge\nSibSp\nParch\nTicket\nFare\nCabin\nEmbarked\n\n\n\n\n2\n3\n1\n3\nHeikkinen, Miss. Laina\nfemale\n26.0\n0\n0\nSTON/O2. 3101282\n7.925\nNaN\nS\n\n\n\n\n\n\n\n如果我不想按顺序这样选取多行数据呢？\n如果想获取单独的几行，通过loc和iloc方法 来获取第二行Laina和第五行William的信息\n\n\n\n\n\n\nWarning\n\n\n\n注意在pandas中第0行才是第一行，所以切片要-1\n\n\niloc方法是按行索引位置选取数据，索引就是表格最左边的数字\n\n\nCode\ndf.iloc[[2,4]]\n\n\n\n\n\n\n\n\n\nPassengerId\nSurvived\nPclass\nName\nSex\nAge\nSibSp\nParch\nTicket\nFare\nCabin\nEmbarked\n\n\n\n\n2\n3\n1\n3\nHeikkinen, Miss. Laina\nfemale\n26.0\n0\n0\nSTON/O2. 3101282\n7.925\nNaN\nS\n\n\n4\n5\n0\n3\nAllen, Mr. William Henry\nmale\n35.0\n0\n0\n373450\n8.050\nNaN\nS\n\n\n\n\n\n\n\nloc方法是按行索引标签选取数据，因为这里索引的标签和位置相同，所以结果同上\n\n\nCode\ndf.loc[[2,4]]"
  },
  {
    "objectID": "导入&导出数据.html#根据条件筛选行列",
    "href": "导入&导出数据.html#根据条件筛选行列",
    "title": "3  导入&导出数据",
    "section": "3.1 根据条件筛选行列",
    "text": "3.1 根据条件筛选行列\n假设我想知道十八岁以下的乘客信息\n\n\nCode\ndf[df[\"Age\"] &lt; 18].head()\n\n\n\n\n\n\n\n\n\nPassengerId\nSurvived\nPclass\nName\nSex\nAge\nSibSp\nParch\nTicket\nFare\nCabin\nEmbarked\n\n\n\n\n7\n8\n0\n3\nPalsson, Master. Gosta Leonard\nmale\n2.0\n3\n1\n349909\n21.0750\nNaN\nS\n\n\n9\n10\n1\n2\nNasser, Mrs. Nicholas (Adele Achem)\nfemale\n14.0\n1\n0\n237736\n30.0708\nNaN\nC\n\n\n10\n11\n1\n3\nSandstrom, Miss. Marguerite Rut\nfemale\n4.0\n1\n1\nPP 9549\n16.7000\nG6\nS\n\n\n14\n15\n0\n3\nVestrom, Miss. Hulda Amanda Adolfina\nfemale\n14.0\n0\n0\n350406\n7.8542\nNaN\nS\n\n\n16\n17\n0\n3\nRice, Master. Eugene\nmale\n2.0\n4\n1\n382652\n29.1250\nNaN\nQ\n\n\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\n从里到外来拆解，首先需要先确定\"Age\"列，然后使用运算符&gt;，选取十八岁以下的乘客。然后把这两操作在用方括号框起来，表明在数据df中操作，.head()选取前五行。\n\n\nDataFrames 可以通过多种方式进行过滤，其中最直观的是使用布尔索引"
  },
  {
    "objectID": "更好的数据可视化(Plotly).html",
    "href": "更好的数据可视化(Plotly).html",
    "title": "4  更好的数据可视化(Plotly)",
    "section": "",
    "text": "pip安装conda安装\n\n\n$ pip install plotly\n\n\n$ conda install -c plotly plotly\n\n\n\nplotly.express是plotly的简化包，只需要1～2行就可以生成可视化图表，大家可以滑动鼠标，获取相对应的数据。官方文档\n\n\nCode\nimport plotly.express as px\nfig = px.bar(x=[\"a\", \"b\", \"c\"], y=[6, 1, 8])\nfig.show(renderer=\"notebook\")"
  },
  {
    "objectID": "更好的数据可视化.html",
    "href": "更好的数据可视化.html",
    "title": "8  更好的数据可视化(Plotly)",
    "section": "",
    "text": "pip安装conda安装\n\n\n$ pip install plotly\n\n\n$ conda install -c plotly plotly\n\n\n\nplotly.express是plotly的简化包，只需要1～2行就可以生成可视化图表，大家可以滑动鼠标，获取相对应的数据。官方文档\n\n\nCode\nimport plotly.express as px\nfig = px.bar(x=[\"a\", \"b\", \"c\"], y=[6, 1, 8])\nfig.show(renderer=\"notebook\")"
  },
  {
    "objectID": "index.html#简介",
    "href": "index.html#简介",
    "title": "Python新手文档",
    "section": "简介",
    "text": "简介\n本文是为编程新手准备的Python入门学习指南，旨在帮助初学者掌握Python编程语言以及使用Pandas库进行数据处理和分析。无论你是完全没有编程经验，还是有其他编程语言经验但对Python和Pandas感兴趣，本指南将提供基础知识和实践案例，帮助你快速入门。"
  },
  {
    "objectID": "index.html#目录",
    "href": "index.html#目录",
    "title": "Python新手文档",
    "section": "目录",
    "text": "目录\n\nPython简介\n\nPython的特点和应用领域\n安装Python和开发环境\nPython基础知识\n\n\n\n数据类型和变量\n\n运算符和表达式\n条件语句和循环\n函数和模块\n数据处理与分析入门\n\n\n\n数据处理和分析的基本概念\n\nPandas库介绍和安装\n数据结构：Series和DataFrame\n数据的读取和写入\n数据清洗和转换\n数据筛选和排序\n数据分组和聚合\n数据可视化\n实践案例\n\n\n\n使用Pandas进行数据分析\n\n从实际数据集中读取数据\n数据清洗和预处理\n探索性数据分析（EDA）\n数据可视化展示\n扩展学习资源\n\n\n\n推荐的Python和Pandas学习资源\n\npandas官方文档(自译版)\nPandas对比SQL\nPlotly可视化官方文档\nW3schools for Pandas\n JackB站超级多的视频"
  },
  {
    "objectID": "index.html#结语",
    "href": "index.html#结语",
    "title": "Python新手文档",
    "section": "结语",
    "text": "结语\n通过本文的学习，你将建立起对Python编程语言的基本理解，掌握Pandas库进行数据处理和分析的技能。无论你是想进入数据科学领域、进行数据挖掘，还是对数据处理和分析有兴趣，Python和Pandas都是你的理想选择。开始你的编程之旅吧，让Python和Pandas帮助你实现数据的无限可能！\n\n\n\n\n\n\nNote\n\n\n\n本文档主要针对编程小白，将以简洁易懂的语言和实例进行解释。每个主题都会提供充足的示例代码和实践案例，以便读者能够实际运用所学知识。在学习过程中，不断实践和探索将是提高编程能力的关键，鼓励读者积极动手并勇于尝试。"
  },
  {
    "objectID": "index.html#python入门学习指南从编程小白到掌握pandas",
    "href": "index.html#python入门学习指南从编程小白到掌握pandas",
    "title": "",
    "section": "Python入门学习指南：从编程小白到掌握Pandas",
    "text": "Python入门学习指南：从编程小白到掌握Pandas\n\n简介\n本文是为编程新手准备的Python入门学习指南，旨在帮助初学者掌握Python编程语言以及使用Pandas库进行数据处理和分析。无论你是完全没有编程经验，还是有其他编程语言经验但对Python和Pandas感兴趣，本指南将提供基础知识和实践案例，帮助你快速入门。\n\n\n目录\n\nPython简介\n\nPython的特点和应用领域\n安装Python和开发环境\n第一个Python程序\nPython基础知识\n\n\n\n数据类型和变量\n\n运算符和表达式\n条件语句和循环\n函数和模块\n数据处理与分析入门\n\n\n\n数据处理和分析的基本概念\n\nPandas库介绍和安装\n数据结构：Series和DataFrame\n数据的读取和写入\n数据清洗和转换\n数据筛选和排序\n数据分组和聚合\n数据可视化\n实践案例\n\n\n\n使用Pandas进行数据分析\n\n从实际数据集中读取数据\n数据清洗和预处理\n探索性数据分析（EDA）\n数据可视化展示\n扩展学习资源\n\n\n\n推荐的Python和Pandas学习资源\n\npandas官方文档(自译版)\nPandas对比SQL\nPlotly可视化官方文档\nW3schools for Pandas\n JackB站超级多的视频\n\n\n\n\n结语\n通过本文的学习，你将建立起对Python编程语言的基本理解，掌握Pandas库进行数据处理和分析的技能。无论你是想进入数据科学领域、进行数据挖掘，还是对数据处理和分析有兴趣，Python和Pandas都是你的理想选择。开始你的编程之旅吧，让Python和Pandas帮助你实现数据的无限可能！\n\n\n\n\n\n\nNote\n\n\n\n本文档主要针对编程小白，将以简洁易懂的语言和实例进行解释。每个主题都会提供充足的示例代码和实践案例，以便读者能够实际运用所学知识。在学习过程中，不断实践和探索将是提高编程能力的关键，鼓励读者积极动手并勇于尝试。"
  },
  {
    "objectID": "intro.html#主要特点",
    "href": "intro.html#主要特点",
    "title": "Python简介",
    "section": "主要特点",
    "text": "主要特点\nPython是一种高级编程语言，以其简洁、易读、易学和灵活性而受到广泛欢迎。以下是Python的一些主要特点：\n\n简洁易读：Python采用清晰简洁的语法，使得代码易于阅读和理解。它使用缩进来表示代码块，而不是使用大括号，这使得代码更加易读。\n易学性：Python的语法简单明了，相对于其他编程语言来说，学习曲线较低。这使得初学者能够快速入门并开始编写实用的程序。\n跨平台性：Python可以在多个操作系统上运行，包括Windows、macOS和各种Linux发行版。这意味着开发人员可以在不同的平台上编写一次代码，并在不同的环境中运行。\n大量的库和框架：Python拥有庞大且活跃的社区，为各种用途提供了大量的库和框架。这些库和框架使得开发人员能够快速构建各种应用，例如Web应用、科学计算、数据分析和人工智能等。\n可扩展性：Python可以与其他语言（如C/C++和Java）轻松集成，这使得开发人员能够使用现有的代码库和资源，以提高应用程序的性能和功能。"
  },
  {
    "objectID": "intro.html#应用领域",
    "href": "intro.html#应用领域",
    "title": "Python简介",
    "section": "应用领域",
    "text": "应用领域\nPython具有广泛的应用领域，从Web开发到科学计算和人工智能等各种领域都能发挥其优势。它的简洁性和强大的库生态系统使得开发人员能够快速构建各种类型的应用程序。\n\nWeb开发：Python的Web框架（如Django和Flask）使得构建功能强大的Web应用程序变得简单。Python还可以用于服务器端编程、网页爬虫和API开发等。\n数据科学和机器学习：Python在数据科学和机器学习领域非常受欢迎。它提供了许多用于数据处理、数据可视化和机器学习算法的库，如NumPy、Pandas、Matplotlib、Scikit-learn和TensorFlow等。\n科学计算：Python在科学计算领域也得到广泛应用。科学计算库如NumPy和SciPy提供了许多数值计算、优化和统计分析的功能，适用于物理学、数学、生物学等领域。\n自动化和脚本编写：Python的简洁性和易用性使得它成为自动化任务和脚本编写的理想选择。可以使用Python编写脚本来自动执行重复性的任务、处理文件、操作系统和网络等。\n游戏开发：Python也可以用于游戏开发。有一些专门的库和框架，如Pygame，使得使用Python编写2D游戏变得相对容易。"
  },
  {
    "objectID": "Pandas计算重塑合并 修改版.html",
    "href": "Pandas计算重塑合并 修改版.html",
    "title": "6  如何计算汇总统计",
    "section": "",
    "text": "describe()的用法\n在Pandas中，您可以使用describe()方法查看数值型列的汇总统计信息。这个方法提供了关于数据分布的有用统计量，包括计数、平均值、标准差、最小值、25%、50%和75%的分位数，以及最大值。\n示例代码：\n\nimport pandas as pd\n\n# 创建DataFrame示例\ndata = {'Name': ['John', 'Emma', 'Alex', 'Sophia', 'James'],\n        'Age': [25, 28, 22, 30, 32],\n        'Height': [175, 162, 180, 158, 170],\n        'Weight': [70, 58, 75, 52, 68]}\ndf = pd.DataFrame(data)\n\n# 查看数值型列的汇总统计\nsummary_stats = df.describe()\nmean_age = df['Age'].mean()\nmedian_height = df['Height'].median()\nmax_weight = df['Weight'].max()\n\nprint(summary_stats)\nprint(\"Mean Age:\", mean_age)\nprint(\"Median Height:\", median_height)\nprint(\"Max Weight:\", max_weight)\n\nMean Age: 27.4\nMedian Height: 170.0\nMax Weight: 75\n\n\n常用的计算汇总统计的方法：\n\ndescribe()方法：计算数值型列的基本统计信息，包括计数、均值、标准差、最小值、25%、50%和75%分位数以及最大值。\nmean()方法：计算数值型列的平均值。\nmedian()方法：计算数值型列的中位数。\nmin()方法：计算数值型列的最小值。\nmax()方法：计算数值型列的最大值。\nsum()方法：计算数值型列的总和。\ncount()方法：计算非缺失值的数量。\nstd()方法：计算数值型列的标准差。\nvar()方法：计算数值型列的方差。\n\n通过查看数值型列的汇总统计，可以快速了解数据的整体分布和统计特征，有助于进行数据分析和洞察。\n\n\nsize和count\n在Pandas中，size和count是用于计算分组数据的两个方法，常常与groupby一起使用。它们可以提供关于每个分组的计数信息，但在计算方式和返回结果上有一些区别。\nsize方法：\n\nsize方法用于计算每个分组中的元素数量，包括缺失值。\n返回的结果是一个Series，其索引是分组键，值是每个分组中的元素数量。\nsize方法不考虑缺失值，即使某个分组中存在缺失值，它也会将其计算为有效元素。\n\ncount方法：\n\ncount方法用于计算每个分组中非缺失值的数量。\n返回的结果是一个Series，其索引是分组键，值是每个分组中的非缺失值的数量。\ncount方法排除了缺失值，只计算非缺失值的数量。\n\n示例，演示如何使用size和count方法结合groupby对数据进行计数：\n\nimport pandas as pd\n\n# 创建一个示例DataFrame\ndata = {'Group': ['A', 'A', 'B', 'B', 'B'],\n        'Value': [1, 2, 3, None, 5]}\ndf = pd.DataFrame(data)\n\n# 使用groupby和size计算每个分组的元素数量\nsize_result = df.groupby('Group').size()\n\n# 使用groupby和count计算每个分组的非缺失值数量\ncount_result = df.groupby('Group').count()\n\nprint(\"Size结果:\")\nprint(size_result)\nprint(\"\\nCount结果:\")\nprint(count_result)\n\nSize结果:\nGroup\nA    2\nB    3\ndtype: int64\n\nCount结果:\n       Value\nGroup       \nA          2\nB          2\n\n\n\n\n如何重塑表格布局\n\nsort的用法\n在Pandas中，sort_values和sort_index是用于对DataFrame或Series进行排序的两个常用方法。\nsort_values方法：\n\nsort_values方法用于按照指定的列或多个列的值对DataFrame或Series进行排序。\n可以通过by参数指定要排序的列或多个列，以列表形式提供。\n可以使用ascending参数来控制排序的升序或降序，默认为True（升序）。\n可以使用inplace参数来指定是否原地修改DataFrame或Series，默认为False，即返回排序后的副本。\n示例：\n\n\nimport pandas as pd\n\ndf = pd.DataFrame({'A': [3, 2, 1], 'B': [1, 3, 2]})\nsorted_df = df.sort_values(by='A', ascending=True)\n\n\n上述代码将按照’A’列的值对DataFrame df 进行升序排序，并将结果存储在sorted_df中。\n\nsort_index方法：\n\nsort_index方法用于根据索引对DataFrame或Series进行排序。\n可以使用axis参数指定要排序的轴，axis=0表示按行索引排序，axis=1表示按列索引排序。\n可以使用ascending参数来控制排序的升序或降序，默认为True（升序）。\n可以使用inplace参数来指定是否原地修改DataFrame或Series，默认为False，即返回排序后的副本。\n示例：\n\n\nimport pandas as pd\n\ndf = pd.DataFrame({'A': [3, 2, 1], 'B': [1, 3, 2]}, index=[2, 1, 3])\nsorted_df = df.sort_index(axis=0, ascending=True)\n\n\n上述代码将按照行索引对DataFrame df 进行升序排序，并将结果存储在sorted_df中。\n\n排序操作可以根据具体需求来选择使用sort_values还是sort_index。如果希望根据列的值进行排序，使用sort_values方法；如果希望根据索引进行排序，使用sort_index方法。\n\n在Pandas中，可以使用不同的方法来重新塑造（reshape）表格布局，以满足特定的数据分析和处理需求。以下是一些常用的重塑表格布局的方法：\n\n\npivot()方法\npivot()方法：用于将长格式（long format）的数据转换为宽格式（wide format），根据指定的列创建新的列，并使用列值进行填充。\n示例，展示如何使用pivot()方法将数据从长格式转换为宽格式：\n\nimport pandas as pd\n\n# 创建示例DataFrame\ndata = {'Name': ['John', 'John', 'Emma', 'Emma', 'Alex', 'Alex'],\n        'Subject': ['Math', 'Science', 'Math', 'Science', 'Math', 'Science'],\n        'Score': [85, 92, 78, 88, 90, 85]}\ndf = pd.DataFrame(data)\n\n# 使用pivot方法重塑表格布局\npivot_df = df.pivot(index='Name', columns='Subject', values='Score')\npivot_df\n\n\n\n\n\n\n\nSubject\nMath\nScience\n\n\nName\n\n\n\n\n\n\nAlex\n90\n85\n\n\nEmma\n78\n88\n\n\nJohn\n85\n92\n\n\n\n\n\n\n\n\n\nmelt()方法\n在Pandas中，melt()是一个用于将宽格式（wide format）的数据转换为长格式（long format）的方法。它将数据从列中展开成为更长的格式，使得数据更适合进行分析和可视化。\nmelt()方法的语法如下：\nDataFrame.melt(id_vars=None, value_vars=None, var_name=None, value_name='value', col_level=None)\n参数说明：\n\nid_vars：可选参数，指定要保留的列名，不进行展开操作。\nvalue_vars：可选参数，指定要进行展开操作的列名。如果未指定，则默认展开所有未指定为id_vars的列。\nvar_name：可选参数，指定展开后的列名的名称。\nvalue_name：可选参数，指定展开后的值的列名的名称，默认为value。\ncol_level：可选参数，用于多层索引列的级别。\n\n下面是一个示例，演示如何使用melt()方法将宽格式的数据转换为长格式：\n\nimport pandas as pd\n\n# 创建一个示例DataFrame\ndata = {\n    'Name': ['Alice', 'Bob', 'Charlie'],\n    'Math': [90, 80, 70],\n    'Science': [95, 85, 75],\n    'History': [92, 82, 72]\n}\ndf = pd.DataFrame(data)\n\n# 使用melt()方法进行数据转换\nmelted_df = df.melt(id_vars='Name', value_vars=['Math', 'Science', 'History'], var_name='Subject', value_name='Score')\n\nprint(\"原始DataFrame:\")\nprint(df)\nprint(\"\\n转换后的DataFrame:\")\nprint(melted_df)\n\n原始DataFrame:\n      Name  Math  Science  History\n0    Alice    90       95       92\n1      Bob    80       85       82\n2  Charlie    70       75       72\n\n转换后的DataFrame:\n      Name  Subject  Score\n0    Alice     Math     90\n1      Bob     Math     80\n2  Charlie     Math     70\n3    Alice  Science     95\n4      Bob  Science     85\n5  Charlie  Science     75\n6    Alice  History     92\n7      Bob  History     82\n8  Charlie  History     72\n\n\n\n\nstack()方法\nstack()方法：\n在Pandas中，stack()是一个用于对DataFrame进行堆叠操作的方法。它将列标签（Column labels）转换为行索引（Row index），将数据从宽格式转换为长格式，从而生成一个更紧凑的DataFrame。\nstack()方法的语法如下：\nDataFrame.stack(level=-1, dropna=True)\n参数说明：\n\nlevel：可选参数，用于多层索引列的级别。默认值为-1，表示堆叠所有列。\ndropna：可选参数，指定是否删除包含缺失值的行，默认为True。\n\n示例：\n\nimport pandas as pd\n\n# 创建一个示例DataFrame\ndata = {\n    'Name': ['Alice', 'Bob'],\n    'Math': [90, 80],\n    'Science': [95, 85],\n    'History': [92, 82]\n}\ndf = pd.DataFrame(data)\n\n# 使用stack()方法进行堆叠操作\nstacked_df = df.set_index('Name').stack().reset_index()\n\nprint(\"原始DataFrame:\")\nprint(df)\nprint(\"\\n堆叠后的DataFrame:\")\nprint(stacked_df)\n\n原始DataFrame:\n    Name  Math  Science  History\n0  Alice    90       95       92\n1    Bob    80       85       82\n\n堆叠后的DataFrame:\n    Name  level_1   0\n0  Alice     Math  90\n1  Alice  Science  95\n2  Alice  History  92\n3    Bob     Math  80\n4    Bob  Science  85\n5    Bob  History  82\n\n\n\n\nunstack()方法\n在Pandas中，unstack()是用于将表格中的行索引转换为列索引，将数据从长格式转换为宽格式。\nunstack()方法的语法如下：\nDataFrame.unstack(level=-1, fill_value=None)\n参数说明：\n\nlevel：可选参数，用于指定要展开的层次化索引的级别。默认值为-1，表示展开最内层索引。\nfill_value：可选参数，用于指定填充缺失值的值。\n\n示例：\n\nimport pandas as pd\n\n# 创建一个示例DataFrame\ndata = {\n    'Name': ['Alice', 'Bob'],\n    'Subject': ['Math', 'Science'],\n    'Score': [90, 80]\n}\ndf = pd.DataFrame(data)\n\n# 将DataFrame进行设置层次化索引\nindexed_df = df.set_index(['Name', 'Subject'])\n\n# 使用unstack()方法进行展开操作\nunstacked_df = indexed_df.unstack()\n\nprint(\"原始DataFrame:\")\nprint(df)\nprint(\"\\n展开后的DataFrame:\")\nprint(unstacked_df)\n\n原始DataFrame:\n    Name  Subject  Score\n0  Alice     Math     90\n1    Bob  Science     80\n\n展开后的DataFrame:\n        Score        \nSubject  Math Science\nName                 \nAlice    90.0     NaN\nBob       NaN    80.0\n\n\n\n\n\n如何合并多个表中的数据\n在Pandas中，可以使用不同的方法来合并（merge）多个表中的数据。以下是一些常用的合并数据的方法：\n\nconcat()方法\n在Pandas中，concat()是一个用于沿指定轴（行或列）将多个DataFrame对象进行合并的方法。它可以将多个DataFrame对象按照指定的方式进行连接，并返回一个合并后的DataFrame。以下是关于concat()方法的解释和示例说明：\nconcat()方法的语法如下：\npd.concat(objs, axis=0, join='outer', ignore_index=False)\n参数说明：\n\nobjs：要合并的DataFrame对象列表或字典。\naxis：可选参数，指定合并的轴。默认为0，表示按行合并；1表示按列合并。\njoin：可选参数，指定连接的方式。默认为'outer'，表示按照并集进行连接；'inner'表示按照交集进行连接。\nignore_index：可选参数，指定是否忽略合并后的索引。默认为False，表示保留原始索引。\n\n示例：\n\nimport pandas as pd\n\n# 创建示例DataFrame\ndf1 = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6]})\ndf2 = pd.DataFrame({'A': [7, 8, 9], 'B': [10, 11, 12]})\n\n# 使用concat()方法进行合并操作\nmerged_df = pd.concat([df1, df2])\n\nprint(\"合并后的DataFrame:\")\nprint(merged_df)\n\n\n\nmerge()方法\n在Pandas中，merge()是一个用于合并（或连接）多个DataFrame对象的方法。它基于指定的键（或多个键）将多个DataFrame按照指定的方式进行连接，并返回一个合并后的DataFrame。\nmerge()方法的语法如下：\npd.merge(left, right, how='inner', on=None, left_on=None, right_on=None, left_index=False, right_index=False, sort=True)\n参数说明：\n\nleft：左侧的DataFrame对象。\nright：右侧的DataFrame对象。\nhow：可选参数，指定连接方式。默认为'inner'，表示按照键的交集进行连接；'outer'表示按照键的并集进行连接；'left'表示按照左侧DataFrame的键进行连接；'right'表示按照右侧DataFrame的键进行连接。\non：可选参数，用于指定连接的键。可以是一个列名的字符串，或多个列名组成的列表。\nleft_on：可选参数，用于指定左侧DataFrame连接键的列名或列名列表。\nright_on：可选参数，用于指定右侧DataFrame连接键的列名或列名列表。\nleft_index：可选参数，指定是否使用左侧DataFrame的索引作为连接键。\nright_index：可选参数，指定是否使用右侧DataFrame的索引作为连接键。\nsort：可选参数，指定是否按照连接键进行排序。\n\n示例：\n\nimport pandas as pd\n\n# 创建示例DataFrame\ndf1 = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6], 'Key': ['K1', 'K2', 'K3']})\ndf2 = pd.DataFrame({'C': [7, 8, 9], 'D': [10, 11, 12], 'Key': ['K2', 'K3', 'K4']})\n\n# 使用merge()方法进行合并操作\nmerged_df = pd.merge(df1, df2, on='Key')\n\nprint(\"合并后的DataFrame:\")\nprint(merged_df)\n\n\n\njoin()方法\n在Pandas中，join()是一个用于基于索引或列之间的关系将两个DataFrame对象进行连接的方法。它类似于SQL中的JOIN操作，可以根据指定的连接键将两个DataFrame进行合并，并返回一个合并后的DataFrame。\njoin()方法的语法如下：\nDataFrame.join(other, on=None, how='left', lsuffix='', rsuffix='', sort=False)\n参数说明：\n\nother：要连接的另一个DataFrame对象。\non：可选参数，用于指定连接键。可以是一个列名的字符串，或多个列名组成的列表。如果未指定，则根据索引进行连接。\nhow：可选参数，指定连接方式。默认为'left'，表示按照左侧DataFrame的索引或列进行连接；'right'表示按照右侧DataFrame的索引或列进行连接；'inner'表示按照两个DataFrame共有的索引或列进行连接；'outer'表示按照两个DataFrame的并集进行连接。\nlsuffix：可选参数，用于处理连接时重叠列名的后缀（左侧DataFrame）。\nrsuffix：可选参数，用于处理连接时重叠列名的后缀（右侧DataFrame）。\nsort：可选参数，指定是否按照连接键进行排序。\n\n示例：\n\nimport pandas as pd\n\n# 创建示例DataFrame\ndf1 = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6]}, index=['K1', 'K2', 'K3'])\ndf2 = pd.DataFrame({'C': [7, 8, 9], 'D': [10, 11, 12]}, index=['K2', 'K3', 'K4'])\n\n# 使用join()方法进行连接操作\njoined_df = df1.join(df2)\n\nprint(\"连接后的DataFrame:\")\nprint(joined_df)\n\n\n\n补充：T（Transpose）转置\n在Pandas中，T（Transpose）是一个用于转置数据的方法。转置操作会将DataFrame或Series的行和列进行交换，从而生成一个新的转置后的数据结构。以下是关于Pandas中的T转置的一些知识点：\n\nDataFrame的转置： 转置DataFrame时，行索引将会变成转置前的列索引，列索引将会变成转置前的行索引。可以使用T方法来执行转置操作，例如：\n\n\nimport pandas as pd\n\ndf = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6]})\ntransposed_df = df.T\n\n上述代码将创建一个DataFrame df，然后使用T方法将其转置，结果将会存储在transposed_df中。\n\nSeries的转置： 转置一个Series对象会生成一个具有单一列的DataFrame，行索引将会保持不变，而列索引将会变为转置前的索引值。可以使用T方法对Series进行转置，例如：\n\n\nimport pandas as pd\n\nseries = pd.Series([1, 2, 3, 4], index=['A', 'B', 'C', 'D'])\ntransposed_series = series.T\n\n上述代码将创建一个Series series，然后使用T方法将其转置，结果将会存储在transposed_series中。\n\n转置对数据结构的影响： 转置操作不会改变原始数据结构，而是生成一个新的转置后的数据结构。原始数据结构保持不变，只是行和列的排列顺序发生了变化。\n转置的应用： 转置操作常用于需要改变数据结构的情况，例如在数据分析和处理过程中，可以使用转置来更改数据的布局以满足特定的分析需求。\n\n需要注意的是，转置操作可能会导致数据结构的变化，因此在进行转置操作之后，索引和列名可能需要进行调整以适应新的结构。"
  },
  {
    "objectID": "选取数据.html#根据条件筛选行列",
    "href": "选取数据.html#根据条件筛选行列",
    "title": "4  选取数据",
    "section": "根据条件筛选行列",
    "text": "根据条件筛选行列\n假设我想知道十八岁以下的乘客信息\n\n\nCode\ndf[df[\"Age\"] &lt; 18].head()\n\n\n\n\n\n\n\n\n\nPassengerId\nSurvived\nPclass\nName\nSex\nAge\nSibSp\nParch\nTicket\nFare\nCabin\nEmbarked\n\n\n\n\n7\n8\n0\n3\nPalsson, Master. Gosta Leonard\nmale\n2.0\n3\n1\n349909\n21.0750\nNaN\nS\n\n\n9\n10\n1\n2\nNasser, Mrs. Nicholas (Adele Achem)\nfemale\n14.0\n1\n0\n237736\n30.0708\nNaN\nC\n\n\n10\n11\n1\n3\nSandstrom, Miss. Marguerite Rut\nfemale\n4.0\n1\n1\nPP 9549\n16.7000\nG6\nS\n\n\n14\n15\n0\n3\nVestrom, Miss. Hulda Amanda Adolfina\nfemale\n14.0\n0\n0\n350406\n7.8542\nNaN\nS\n\n\n16\n17\n0\n3\nRice, Master. Eugene\nmale\n2.0\n4\n1\n382652\n29.1250\nNaN\nQ\n\n\n\n\n\n\n\nDataFrames 可以通过多种方式进行过滤，其中最直观的是使用布尔索引"
  },
  {
    "objectID": "导入&导出数据.html",
    "href": "导入&导出数据.html",
    "title": "3  导入&导出数据",
    "section": "",
    "text": "读取本地数据\n获取数据data.csv下载地址，将csv文件下载到本地。\n\n\nCode\n# 导入pandas包\nimport pandas as pd\n\n# 注意csv文件路径\ndf = pd.read_csv('./example_data/data.csv') \n\n# 打印前五个\ndf.head()\n\n\n\n\n\n\n\n\n\nDuration\nPulse\nMaxpulse\nCalories\n\n\n\n\n0\n60\n110\n130\n409.1\n\n\n1\n60\n117\n145\n479.0\n\n\n2\n60\n103\n135\n340.0\n\n\n3\n45\n109\n175\n282.4\n\n\n4\n45\n117\n148\n406.0\n\n\n\n\n\n\n\n\n\n读取线上数据\n线上数据地址\n\n\nCode\ndf = pd.read_csv('https://www.w3schools.com/python/pandas/data.csv.txt')\n\n# 打印前五个\ndf.head()\n\n\n\n\n\n\n\n\n\nDuration\nPulse\nMaxpulse\nCalories\n\n\n\n\n0\n60\n110\n130\n409.1\n\n\n1\n60\n117\n145\n479.0\n\n\n2\n60\n103\n135\n340.0\n\n\n3\n45\n109\n175\n282.4\n\n\n4\n45\n117\n148\n406.0\n\n\n\n\n\n\n\n\n\nCode\n# 获取案例数据\nimport pandas as pd\ndf = pd.read_csv('https://raw.githubusercontent.com/pandas-dev/pandas/main/doc/data/titanic.csv') \ndf.head()\n\n\n\n\n\n\n\n\n\nPassengerId\nSurvived\nPclass\nName\nSex\nAge\nSibSp\nParch\nTicket\nFare\nCabin\nEmbarked\n\n\n\n\n0\n1\n0\n3\nBraund, Mr. Owen Harris\nmale\n22.0\n1\n0\nA/5 21171\n7.2500\nNaN\nS\n\n\n1\n2\n1\n1\nCumings, Mrs. John Bradley (Florence Briggs Th...\nfemale\n38.0\n1\n0\nPC 17599\n71.2833\nC85\nC\n\n\n2\n3\n1\n3\nHeikkinen, Miss. Laina\nfemale\n26.0\n0\n0\nSTON/O2. 3101282\n7.9250\nNaN\nS\n\n\n3\n4\n1\n1\nFutrelle, Mrs. Jacques Heath (Lily May Peel)\nfemale\n35.0\n1\n0\n113803\n53.1000\nC123\nS\n\n\n4\n5\n0\n3\nAllen, Mr. William Henry\nmale\n35.0\n0\n0\n373450\n8.0500\nNaN\nS\n\n\n\n\n\n\n\n\n\n\nPandas连接MySQL数据库导入导出数据\n\n步骤1：安装必要的库\n在开始之前，确保已经安装了以下库：\nPandas：用于数据处理和操作。\nSQLAlchemy：用于数据库连接和交互\n可以使用以下命令通过pip安装它们：\npip install pandas sqlalchemy\n\n\n步骤2：链接数据库\n首先，我们需要使用SQLAlchemy来建立与数据库的连接。根据使用的数据库类型（如MySQL、SQLite、PostgreSQL等），使用适当的连接字符串和数据库驱动程序。\n以下是使用SQLite数据库的示例代码：\n\n\nCode\nimport sqlalchemy\n\n# 建立与数据库的连接\nengine = sqlalchemy.create_engine('sqlite:///path/to/database.db')\n\n\n\n\n\n\n\n\nTip\n\n\n\n将path/to/database.db替换为实际的数据库文件路径或连接字符串\n\n\n\n\n步骤3：导入数据\n有几种方法可以使用Pandas从数据库中导入数据。最简单的方法是使用read_sql()函数，该函数接受一个SQL查询语句并将结果读取为DataFrame对象。\n以下是使用read_sql()函数导入数据的示例代码：\n\n\nCode\nimport pandas as pd\n\n# 执行SQL查询并将结果读取为DataFrame\nquery = 'SELECT * FROM table_name'\ndf = pd.read_sql(query, engine)\n\n# 打印DataFrame\nprint(df)\n\n\n\n\n\n\n\n\nTip\n\n\n\n将table_name替换为要查询的实际表名。\n\n\n\n\n步骤4：导出数据\n同样，使用Pandas可以将DataFrame中的数据导出到数据库中。可以使用to_sql()函数将DataFrame写入数据库表。\n以下是使用to_sql()函数导出数据的示例代码\n\n\nCode\n# 将DataFrame写入数据库表\ndf.to_sql('table_name', engine, if_exists='replace', index=False)\n\n\n\n\n\n\n\n\nTip\n\n\n\n将table_name替换为要写入的实际表名。if_exists=’replace’表示如果表已经存在，则替换它。index=False表示不将DataFrame的索引写入数据库。"
  },
  {
    "objectID": "index.html#文档目录",
    "href": "index.html#文档目录",
    "title": "Python新手文档",
    "section": "文档目录",
    "text": "文档目录\n\nPython简介\n\nPython的特点和应用领域\n安装Python和开发环境\nPython基础知识\n\n\n\n数据类型和变量\n\n运算符和表达式\n条件语句和循环\n函数和模块\n数据处理与分析入门\n\n\n\nPandas 基本操作\n\nPandas库介绍和安装\nPandas处理什么样的数据\n读取和写入\n选取和筛选\n增删和排序\n分组和聚合\n处理时间序列数据\n处理文本数据\n数据可视化\n\n\n\nPandas 实际应用案例\n\n从实际数据集中读取数据\n数据清洗和预处理\nPlotly可视化展示\nDash应用程序展示\n扩展学习资源\n\n\n\n推荐的Pandas学习资源\n\npandas官方文档(自译版)\nPandas对比SQL\nPlotly可视化官方文档\nW3schools for Pandas\n JackB站超级多的视频"
  },
  {
    "objectID": "python链接数据库.html#为什么要用sqlalchemy连接数据库",
    "href": "python链接数据库.html#为什么要用sqlalchemy连接数据库",
    "title": "10  Python连接Postgresql数据库",
    "section": "为什么要用SQLAlchemy连接数据库？",
    "text": "为什么要用SQLAlchemy连接数据库？\n在企业中，很多数据都存储在数据库当中，通过SQLAlchemy，可以轻松连接多种数据库，包括MySQL、PostgreSQL、SQLite等，并使用统一的API进行数据库操作。SQLAlchemy提供了高级的对象关系映射（ORM）功能，使数据库操作更加面向对象，简化了数据模型的开发和管理。它提供了查询构建器、事务管理、数据迁移等功能，提高了开发效率。"
  },
  {
    "objectID": "python链接数据库.html#所需环境和拓展包",
    "href": "python链接数据库.html#所需环境和拓展包",
    "title": "10  Python连接Postgresql数据库",
    "section": "所需环境和拓展包",
    "text": "所需环境和拓展包\n\njupyternotebook – 撰写python代码\nPostgreSQL & Pgadmin4 – 数据库及其GUI工具（数据库客户端）\nSQLAlchemy – python拓展包，用来连接数据库"
  },
  {
    "objectID": "python链接数据库.html#操作步骤",
    "href": "python链接数据库.html#操作步骤",
    "title": "10  Python连接Postgresql数据库",
    "section": "操作步骤",
    "text": "操作步骤\n\nDocker安装jupyternotebook & Postgresql数据库\n本地数据库备份&迁移\n安装和使用SqlAlechemy"
  },
  {
    "objectID": "for循环.html#为什么需要使用for循环",
    "href": "for循环.html#为什么需要使用for循环",
    "title": "9  for循环自动获取股票数据",
    "section": "为什么需要使用for循环？",
    "text": "为什么需要使用for循环？\nfor循环简化了操作、处理大量数据，自动化了重复任务，并提供灵活的遍历顺序。它是一种强大的编程工具，帮助我们优化效率、减少冗余代码。无论初学者还是经验丰富的开发人员，for循环都是不可或缺的技术，提升代码质量、处理数据轻而易举。"
  },
  {
    "objectID": "for循环.html#案例背景",
    "href": "for循环.html#案例背景",
    "title": "9  for循环自动获取股票数据",
    "section": "案例背景",
    "text": "案例背景\n使用for循环调用股票API Tushare获取日线行情。但是有限制调用页数。尝试使用for循环遍历列表，逐个发送API请求获取每只股票的日线行情数据。"
  },
  {
    "objectID": "for循环.html#操作步骤",
    "href": "for循环.html#操作步骤",
    "title": "9  for循环自动获取股票数据",
    "section": "操作步骤",
    "text": "操作步骤\n\n通过def定义函数\nfor循环遍历整个日线行情\nconcat合并上下表"
  },
  {
    "objectID": "Dash案例.html#为什么要使用dash",
    "href": "Dash案例.html#为什么要使用dash",
    "title": "11  Dash创建股票APP",
    "section": "为什么要使用Dash",
    "text": "为什么要使用Dash\nDash Plotly是一个基于Python的开源框架，用于构建交互式数据可视化和分析应用。\n它的优势在于简洁的语法、强大的可视化功能和灵活的布局选项。通过使用Dash Plotly，您可以轻松创建漂亮、交互式的应用程序，展示和探索数据，无论是用于内部报告、数据分析还是对外展示。它提供了丰富的图表类型、注解和样式设置，以及与其他Python库的无缝集成，如pandas和numpy。Dash Plotly还支持部署到Web服务器上，使得应用程序能够通过浏览器进行访问和共享。\n总的来说，Dash Plotly提供了一种简单而强大的方式来创建数据驱动的应用程序，使得数据可视化和交互变得更加容易和高效。"
  },
  {
    "objectID": "Dash案例.html#案例背景",
    "href": "Dash案例.html#案例背景",
    "title": "11  Dash创建股票APP",
    "section": "案例背景",
    "text": "案例背景\n使用Dash 模仿复现股票走势的交互可视化面板，可以查看股票日线级别的涨跌幅度、股票走势和买入卖出盈亏比。以英伟达股票为案例"
  },
  {
    "objectID": "Dash案例.html#相关链接",
    "href": "Dash案例.html#相关链接",
    "title": "11  Dash创建股票APP",
    "section": "相关链接",
    "text": "相关链接\n免费股票数据API\nGitHub Python调用API\n模仿案例网站"
  },
  {
    "objectID": "Dash案例.html#dash股票案例上集",
    "href": "Dash案例.html#dash股票案例上集",
    "title": "11  Dash创建股票APP",
    "section": "Dash股票案例（上集）",
    "text": "Dash股票案例（上集）\n\nAPI获取&调用\npands数据清洗\n导出csv到本地\nDash-Bootstrap主题\nDash-layout排版\nDash-调整位置和宽度"
  },
  {
    "objectID": "Dash案例.html#dash股票案例下集",
    "href": "Dash案例.html#dash股票案例下集",
    "title": "11  Dash创建股票APP",
    "section": "Dash股票案例（下集）",
    "text": "Dash股票案例（下集）\n\napp功能：涨跌百分比\npadnas数据清洗&过滤\nplotly绘制百分比图\napp功能：股票走势图\nupdate_traces VS update_layout\napp功能：滚动数据\nBootstrap组件使用"
  }
]